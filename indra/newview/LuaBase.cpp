/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<typename T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic CAPI SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The swig conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old swig versions, you usually write code as:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit as:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   that seems to be the same, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   requires also to SWIG_ConvertPtr to return new result values, as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   swig errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()


 */
#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))


/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif




#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

typedef struct swig_lua_class {
  const char    *name;
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrappering all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within Swig, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { lua_pushstring(L, (char *) msg); goto fail; } else

/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {lua_pushfstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {lua_pushfstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
//#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a)))
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State* L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default value is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State* L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  lua_pushstring(L,"This variable is immutable");
  lua_error(L);
#endif
    return 0;   /* should not return anything */
}

/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  printf("SWIG_Lua_module_get %p(%s) '%s'\n",
   lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
   lua_tostring(L,2));
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get");  /* get the .get table */
  lua_remove(L,3);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .get table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,3);  /* remove .get */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_call(L,0,1);
      return 1;
    }
    lua_pop(L,1);  /* remove the top */
  }
  lua_pop(L,1);  /* remove the .get */
  lua_pushnil(L);  /* return a nil */
    return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".set");  /* get the .set table */
  lua_remove(L,4);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,4);  /* remove .set */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
  }
  lua_settop(L,3);  /* reset back to start */
  /* we now have the table, key & new value, so just set directly */
  lua_rawset(L,1);  /* add direct */
  return 0;
}

/* registering a module in lua */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushstring(L,name);
  lua_newtable(L);   /* the table */
  /* add meta table */
  lua_newtable(L);    /* the meta table */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
  lua_pushstring(L,".get");
  lua_newtable(L);    /* the .get table */
  lua_rawset(L,-3);  /* add .get into metatable */
  lua_pushstring(L,".set");
  lua_newtable(L);    /* the .set table */
  lua_rawset(L,-3);  /* add .set into metatable */
  lua_setmetatable(L,-2);  /* sets meta table in module */
  lua_rawset(L,-3);        /* add module into parent */
  SWIG_Lua_get_table(L,name);   /* get the table back out */
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
  lua_pop(L,1);       /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_getmetatable(L,-1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* should be a table: */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)  /* if there is a set fn */
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* should be a table: */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
  lua_pop(L,1);       /* tidy stack (remove meta) */
}

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
  SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;  /* sorry not known */
}

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
      lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
      lua_tostring(L,2),
      lua_topointer(L,3),lua_typename(L,lua_type(L,3)));*/

  assert(lua_isuserdata(L,1));  /* just in case */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,1);  /* userdata */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,2,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_pushvalue(L,3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  swig_lua_class* clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    lua_pushstring(L,"SWIG");
    lua_newtable(L);
    lua_rawset(L,LUA_REGISTRYINDEX);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
  int i;
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_details(L,clss->bases[i]);
  }
  /* add fns */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /*   add operator overloads
    these look ANY method which start with "__" and assume they
    are operator overloads & add them to the metatable
    (this might mess up is someone defines a method __gc (the destructor)*/
  for(i=0;clss->methods[i].name;i++){
    if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
      SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
    }
  }
}

/* set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State* L,swig_lua_class* clss)
{
  int i=0;
  swig_module_info* module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }	
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
    SWIG_Lua_add_function(L,clss->name,clss->constructor);

  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->name);  /* get the name */
  lua_newtable(L);    /* create the metatable */
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->name);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */

  SWIG_Lua_get_class_metatable(L,clss->name);
  SWIG_Lua_add_class_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
}

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void _SWIG_Lua_AddMetatable(lua_State* L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
  swig_lua_userdata* usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata* usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
       int argnum,const char* func_name){
  void* result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    lua_pushfstring(L,"Error in %s, expected a %s at argument number %d\n",
      func_name,(type && type->str)?type->str:"void*",argnum);
    lua_error(L);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State* L,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State* L,int index,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata* usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua a really simple way of calling lua from C
Unfortunately lua keeps changing its API's, so we need a conditional compile
In lua 5.0.X its lua_dostring()
In lua 5.1.X its luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char* str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_EAnimate swig_types[0]
#define SWIGTYPE_p_ESex swig_types[1]
#define SWIGTYPE_p_EVOType swig_types[2]
#define SWIGTYPE_p_LLCharacter swig_types[3]
#define SWIGTYPE_p_LLColor3 swig_types[4]
#define SWIGTYPE_p_LLColor4 swig_types[5]
#define SWIGTYPE_p_LLColor4U swig_types[6]
#define SWIGTYPE_p_LLJoint swig_types[7]
#define SWIGTYPE_p_LLMatrix3 swig_types[8]
#define SWIGTYPE_p_LLMatrix4 swig_types[9]
#define SWIGTYPE_p_LLMotion swig_types[10]
#define SWIGTYPE_p_LLMotionConstructor swig_types[11]
#define SWIGTYPE_p_LLMotionController swig_types[12]
#define SWIGTYPE_p_LLParcel swig_types[13]
#define SWIGTYPE_p_LLPartSysData swig_types[14]
#define SWIGTYPE_p_LLPauseRequestHandle swig_types[15]
#define SWIGTYPE_p_LLPointerT_LLPauseRequestHandle_t swig_types[16]
#define SWIGTYPE_p_LLPolyMesh swig_types[17]
#define SWIGTYPE_p_LLQuaternion swig_types[18]
#define SWIGTYPE_p_LLSD swig_types[19]
#define SWIGTYPE_p_LLSafeHandleT_LLObjectSelection_t swig_types[20]
#define SWIGTYPE_p_LLUUID swig_types[21]
#define SWIGTYPE_p_LLVOAvatar swig_types[22]
#define SWIGTYPE_p_LLVector2 swig_types[23]
#define SWIGTYPE_p_LLVector3 swig_types[24]
#define SWIGTYPE_p_LLVector3d swig_types[25]
#define SWIGTYPE_p_LLVector4 swig_types[26]
#define SWIGTYPE_p_LLViewerInventoryItem swig_types[27]
#define SWIGTYPE_p_LLViewerRegion swig_types[28]
#define SWIGTYPE_p_LLVisualParam swig_types[29]
#define SWIGTYPE_p_LLWearable swig_types[30]
#define SWIGTYPE_p_ParticleSystem swig_types[31]
#define SWIGTYPE_p_UI swig_types[32]
#define SWIGTYPE_p_WLSky swig_types[33]
#define SWIGTYPE_p_WLWater swig_types[34]
#define SWIGTYPE_p_child_list_t swig_types[35]
#define SWIGTYPE_p_const_child_list_t swig_types[36]
#define SWIGTYPE_p_double swig_types[37]
#define SWIGTYPE_p_eLayoutOrientation swig_types[38]
#define SWIGTYPE_p_eObjectPartitions swig_types[39]
#define SWIGTYPE_p_e_action_type swig_types[40]
#define SWIGTYPE_p_e_anim_request swig_types[41]
#define SWIGTYPE_p_e_camera_modes swig_types[42]
#define SWIGTYPE_p_e_camera_position swig_types[43]
#define SWIGTYPE_p_e_grid_mode swig_types[44]
#define SWIGTYPE_p_e_object_update_type swig_types[45]
#define SWIGTYPE_p_e_selection_type swig_types[46]
#define SWIGTYPE_p_e_send_type swig_types[47]
#define SWIGTYPE_p_float swig_types[48]
#define SWIGTYPE_p_int swig_types[49]
#define SWIGTYPE_p_iterator swig_types[50]
#define SWIGTYPE_p_list_t swig_types[51]
#define SWIGTYPE_p_long_long swig_types[52]
#define SWIGTYPE_p_root_iterator swig_types[53]
#define SWIGTYPE_p_root_object_iterator swig_types[54]
#define SWIGTYPE_p_short swig_types[55]
#define SWIGTYPE_p_signed_char swig_types[56]
#define SWIGTYPE_p_skip_list_t swig_types[57]
#define SWIGTYPE_p_std__string swig_types[58]
#define SWIGTYPE_p_std__vectorT_LLCharacter_p_t swig_types[59]
#define SWIGTYPE_p_unsigned_char swig_types[60]
#define SWIGTYPE_p_unsigned_int swig_types[61]
#define SWIGTYPE_p_unsigned_long_long swig_types[62]
#define SWIGTYPE_p_unsigned_short swig_types[63]
#define SWIGTYPE_p_valid_iterator swig_types[64]
#define SWIGTYPE_p_valid_root_iterator swig_types[65]
#define SWIGTYPE_p_vobj_list_t swig_types[66]
#define SWIGTYPE_p_void swig_types[67]
#define SWIGTYPE_p_wchar_t swig_types[68]
static swig_type_info *swig_types[70];
static swig_module_info swig_module = {swig_types, 69, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "SL"
#define SWIG_init      luaopen_SL
#define SWIG_init_user luaopen_SL_user

#define SWIG_LUACODE   luaopen_SL_luacode


namespace swig {
typedef struct{} LANGUAGE_OBJ;
}




#include "stdtypes.h"
#include "LuaUI.h"
#include "llfloater.h"
#include "lllineeditor.h"
#include "llpanel.h"
#include "llbutton.h"
#include "lliconctrl.h"
#include "LuaBase_f.h"
#include "LuaAvatar_f.h"
#include "LuaAgent_f.h"
#include "LuaParticles.h"
#include "LuaWindlight.h"
#include "llprimitive.h"
#include "llviewerobject.h"
#include "llvovolume.h"
#include "llagent.h"
#include "llselectmgr.h"
#include "v2math.h"
#include "v3math.h"
#include "v4math.h"
#include "v4color.h"
#include "llcharacter.h"
#include "llagent.h"


	#include <string>


// Lua 5.2.x's print(...) method, from the sourcecode.
// Slightly modified to write to SL instead.
static int LuaBase_print (lua_State *L) {
	std::string out("");
	int n = lua_gettop(L);  /* number of arguments */
	int i;
	lua_getfield(L, LUA_ENVIRONINDEX, "tostring");
	for (i=1; i<=n; i++) {
		const char *s;
		size_t l;
		lua_pushvalue(L, -1);  /* function to be called */
		lua_pushvalue(L, i);   /* value to print */
		lua_call(L, 1, 1);
		s = lua_tolstring(L, -1, &l);  /* get result */
		if (s == NULL)
			return luaL_error(L, "tostring must return a string to print");
		if (i>1) 
			out.append("     ");
		out.append(s);
		lua_pop(L, 1);  /* pop result */
	}
	LuaPrint(out.c_str());
	return 0;
}


/**
*  Lua(Swig) <-> LuaVector* <-> LLLVector*
*/
#include "llviewerprecompiledheaders.h"
#include "v2math.h"
#include "v3math.h"
#include "v4math.h"
#include "v4color.h"

SWIGINTERN std::string LLVector2___str__(LLVector2 *self){
		std::ostringstream s;
		s << "(" << self->mV[0] << "," << self->mV[1] << ")";
		return s.str();
	}
SWIGINTERN std::string LLVector3___str__(LLVector3 *self){
		std::ostringstream s;
		s << "<" << self->mV[0] << "," << self->mV[1] << "," << self->mV[2] << ">";
		return s.str();
	}
SWIGINTERN std::string LLVector4___str__(LLVector4 *self){
		std::ostringstream s;
		s << "<" << self->mV[0] << "," << self->mV[1] << "," << self->mV[2] << "," << self->mV[3] << ">";
		return s.str();
	}

float LLVector2_x_get(LLVector2 *v)
{
	return v->mV[VX];
}

void LLVector2_x_set(LLVector2 *v,float val)
{
	v->mV[VX]=val;
}

float LLVector2_y_get(LLVector2 *v)
{
	return v->mV[VY];
}

void LLVector2_y_set(LLVector2 *v,float val)
{
	v->mV[VY]=val;
}


// Accessors for LLVector3::x
float LLVector3_x_get(LLVector3 *v)
{
	return v->mV[VX];
}

void LLVector3_x_set(LLVector3 *v,float val)
{
	v->mV[VX]=val;
}

// Accessors for LLVector3::r
float LLVector3_r_get(LLVector3 *v)
{
	return v->mV[VX];
}

void LLVector3_r_set(LLVector3 *v,float val)
{
	v->mV[VX]=val;
}

// Accessors for LLVector3::y
float LLVector3_y_get(LLVector3 *v)
{
	return v->mV[VY];
}

void LLVector3_y_set(LLVector3 *v,float val)
{
	v->mV[VY]=val;
}

// Accessors for LLVector3::g
float LLVector3_g_get(LLVector3 *v)
{
	return v->mV[VY];
}

void LLVector3_g_set(LLVector3 *v,float val)
{
	v->mV[VY]=val;
}

// Accessors for LLVector3::z
float LLVector3_z_get(LLVector3 *v)
{
	return v->mV[VZ];
}

void LLVector3_z_set(LLVector3 *v,float val)
{
	v->mV[VZ]=val;
}

// Accessors for LLVector3::b
float LLVector3_b_get(LLVector3 *v)
{
	return v->mV[VZ];
}

void LLVector3_b_set(LLVector3 *v,float val)
{
	v->mV[VZ]=val;
}


// Accessors for LLVector4::x
float LLVector4_x_get(LLVector4 *v)
{
	return v->mV[VX];
}

void LLVector4_x_set(LLVector4 *v,float val)
{
	v->mV[VX]=val;
}

// Accessors for LLVector4::r
float LLVector4_r_get(LLVector4 *v)
{
	return v->mV[VX];
}

void LLVector4_r_set(LLVector4 *v,float val)
{
	v->mV[VX]=val;
}

// Accessors for LLVector4::y
float LLVector4_y_get(LLVector4 *v)
{
	return v->mV[VY];
}

void LLVector4_y_set(LLVector4 *v,float val)
{
	v->mV[VY]=val;
}

// Accessors for LLVector4::g
float LLVector4_g_get(LLVector4 *v)
{
	return v->mV[VY];
}

void LLVector4_g_set(LLVector4 *v,float val)
{
	v->mV[VY]=val;
}

// Accessors for LLVector4::z
float LLVector4_z_get(LLVector4 *v)
{
	return v->mV[VZ];
}

void LLVector4_z_set(LLVector4 *v,float val)
{
	v->mV[VZ]=val;
}

// Accessors for LLVector4::b
float LLVector4_b_get(LLVector4 *v)
{
	return v->mV[VZ];
}

void LLVector4_b_set(LLVector4 *v,float val)
{
	v->mV[VZ]=val;
}

// Accessors for LLVector4::w
float LLVector4_w_get(LLVector4 *v)
{
	return v->mV[VW];
}

void LLVector4_w_set(LLVector4 *v,float val)
{
	v->mV[VW]=val;
}

// Accessors for LLVector4::a
float LLVector4_a_get(LLVector4 *v)
{
	return v->mV[VW];
}

void LLVector4_a_set(LLVector4 *v,float val)
{
	v->mV[VW]=val;
}

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string",0,0)
  result = (std::string *)new std::string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("std::string",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string()\n"
    "    std::string(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_string_size(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("size",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_length(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("length",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_length",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  bool result;
  
  SWIG_check_num_args("empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("empty",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string);
  }
  
  result = (bool)((std::string const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_c_str(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("c_str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("c_str",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_c_str",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->c_str();
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_data(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->data();
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("assign",1,"std::string *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("assign",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_assign",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->assign((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static swig_lua_method swig_std_string_methods[] = {
    {"size", _wrap_string_size}, 
    {"length", _wrap_string_length}, 
    {"empty", _wrap_string_empty}, 
    {"c_str", _wrap_string_c_str}, 
    {"data", _wrap_string_data}, 
    {"assign", _wrap_string_assign}, 
    {0,0}
};
static swig_lua_attribute swig_std_string_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_std_string_bases[] = {0};
static const char *swig_std_string_base_names[] = {0};
static swig_lua_class _wrap_class_std_string = { "string", &SWIGTYPE_p_std__string,_wrap_new_string, swig_delete_string, swig_std_string_methods, swig_std_string_attributes, swig_std_string_bases, swig_std_string_base_names };

static int _wrap_new_UUID__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLUUID *result = 0 ;
  
  SWIG_check_num_args("LLUUID",0,0)
  result = (LLUUID *)new LLUUID();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLUUID,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UUID__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  LLUUID *result = 0 ;
  
  SWIG_check_num_args("LLUUID",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("LLUUID",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (LLUUID *)new LLUUID((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLUUID,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UUID(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UUID__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_UUID__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_UUID'\n"
    "  Possible C/C++ prototypes are:\n"
    "    LLUUID()\n"
    "    LLUUID(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_UUID_asString(lua_State* L) {
  int SWIG_arg = 0;
  LLUUID *arg1 = (LLUUID *) 0 ;
  std::string result;
  
  SWIG_check_num_args("asString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("asString",1,"LLUUID const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLUUID,0))){
    SWIG_fail_ptr("UUID_asString",1,SWIGTYPE_p_LLUUID);
  }
  
  result = ((LLUUID const *)arg1)->asString();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UUID_set__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLUUID *arg1 = (LLUUID *) 0 ;
  std::string *arg2 = 0 ;
  BOOL arg3 ;
  std::string temp2 ;
  BOOL result;
  
  SWIG_check_num_args("set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"LLUUID *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("set",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("set",3,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLUUID,0))){
    SWIG_fail_ptr("UUID_set",1,SWIGTYPE_p_LLUUID);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  arg3 = (BOOL)lua_tonumber(L, 3);
  result = (BOOL)(arg1)->set((std::string const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UUID_set__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLUUID *arg1 = (LLUUID *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  BOOL result;
  
  SWIG_check_num_args("set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"LLUUID *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("set",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLUUID,0))){
    SWIG_fail_ptr("UUID_set",1,SWIGTYPE_p_LLUUID);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (BOOL)(arg1)->set((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UUID_set(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLUUID, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_UUID_set__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLUUID, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_UUID_set__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'UUID_set'\n"
    "  Possible C/C++ prototypes are:\n"
    "    set(LLUUID *,std::string const &,BOOL)\n"
    "    set(LLUUID *,std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UUID_isNull(lua_State* L) {
  int SWIG_arg = 0;
  LLUUID *arg1 = (LLUUID *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("isNull",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isNull",1,"LLUUID const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLUUID,0))){
    SWIG_fail_ptr("UUID_isNull",1,SWIGTYPE_p_LLUUID);
  }
  
  result = (BOOL)((LLUUID const *)arg1)->isNull();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UUID_notNull(lua_State* L) {
  int SWIG_arg = 0;
  LLUUID *arg1 = (LLUUID *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("notNull",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("notNull",1,"LLUUID const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLUUID,0))){
    SWIG_fail_ptr("UUID_notNull",1,SWIGTYPE_p_LLUUID);
  }
  
  result = (BOOL)((LLUUID const *)arg1)->notNull();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UUID_setNull(lua_State* L) {
  int SWIG_arg = 0;
  LLUUID *arg1 = (LLUUID *) 0 ;
  
  SWIG_check_num_args("setNull",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setNull",1,"LLUUID *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLUUID,0))){
    SWIG_fail_ptr("UUID_setNull",1,SWIGTYPE_p_LLUUID);
  }
  
  (arg1)->setNull();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UUID_validate(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  BOOL result;
  
  SWIG_check_num_args("LLUUID::validate",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("LLUUID::validate",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  result = (BOOL)LLUUID::validate((std::string const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UUID(void *obj) {
LLUUID *arg1 = (LLUUID *) obj;
delete arg1;
}
static swig_lua_method swig_LLUUID_methods[] = {
    {"asString", _wrap_UUID_asString}, 
    {"set", _wrap_UUID_set}, 
    {"isNull", _wrap_UUID_isNull}, 
    {"notNull", _wrap_UUID_notNull}, 
    {"setNull", _wrap_UUID_setNull}, 
    {0,0}
};
static swig_lua_attribute swig_LLUUID_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_LLUUID_bases[] = {0};
static const char *swig_LLUUID_base_names[] = {0};
static swig_lua_class _wrap_class_LLUUID = { "UUID", &SWIGTYPE_p_LLUUID,_wrap_new_UUID, swig_delete_UUID, swig_LLUUID_methods, swig_LLUUID_attributes, swig_LLUUID_bases, swig_LLUUID_base_names };

static int _wrap_isUUID(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  bool result;
  
  SWIG_check_num_args("isUUID",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("isUUID",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  result = (bool)isUUID((std::string const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SendChat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("LuaSendChat",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("LuaSendChat",1,"char const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("LuaSendChat",2,"bool");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0);
  LuaSendChat((char const *)arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SendChat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("LuaSendChat",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("LuaSendChat",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  LuaSendChat((char const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SendChat(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_SendChat__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_SendChat__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SendChat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    LuaSendChat(char const *,bool)\n"
    "    LuaSendChat(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_LuaAlert(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("LuaAlert",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("LuaAlert",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  LuaAlert((char const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetCWD(lua_State* L) {
  int SWIG_arg = 0;
  char *result = 0 ;
  
  SWIG_check_num_args("LuaGetCWD",0,0)
  result = (char *)LuaGetCWD();
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RegionFromName(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  LLViewerRegion *result = 0 ;
  
  SWIG_check_num_args("LuaRegionFromName",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("LuaRegionFromName",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (LLViewerRegion *)LuaRegionFromName((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLViewerRegion,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetCurrentRegion(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerRegion *result = 0 ;
  
  SWIG_check_num_args("LuaGetCurrentRegion",0,0)
  result = (LLViewerRegion *)LuaGetCurrentRegion();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLViewerRegion,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_error(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("LuaError",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("LuaError",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  LuaError((char const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_touch(lua_State* L) {
  int SWIG_arg = 0;
  LLUUID *arg1 = 0 ;
  LLUUID temp1 ;
  
  SWIG_check_num_args("LuaTouch",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("LuaTouch",1,"LLUUID const &");
  SWIG_contract_assert(temp1.set(lua_tostring(L,1),false),"Must be of UUID format.")
  arg1=&temp1;
  LuaTouch((LLUUID const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_say__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("LuaSay",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("LuaSay",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaSay",2,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  LuaSay((char const *)arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_say__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("LuaSay",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("LuaSay",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  LuaSay((char const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_say(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_say__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_say__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'say'\n"
    "  Possible C/C++ prototypes are:\n"
    "    LuaSay(char const *,int)\n"
    "    LuaSay(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_shout__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("LuaShout",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("LuaShout",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaShout",2,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  LuaShout((char const *)arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_shout__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("LuaShout",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("LuaShout",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  LuaShout((char const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_shout(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_shout__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_shout__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'shout'\n"
    "  Possible C/C++ prototypes are:\n"
    "    LuaShout(char const *,int)\n"
    "    LuaShout(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_whisper__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("LuaWhisper",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("LuaWhisper",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaWhisper",2,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  LuaWhisper((char const *)arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_whisper__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("LuaWhisper",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("LuaWhisper",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  LuaWhisper((char const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_whisper(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_whisper__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_whisper__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'whisper'\n"
    "  Possible C/C++ prototypes are:\n"
    "    LuaWhisper(char const *,int)\n"
    "    LuaWhisper(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_LuaSendRawChat(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  bool arg3 ;
  S32 arg4 ;
  
  SWIG_check_num_args("LuaSendRawChat",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("LuaSendRawChat",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaSendRawChat",2,"int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("LuaSendRawChat",3,"bool");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("LuaSendRawChat",4,"S32");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (S32)lua_tonumber(L, 4);
  LuaSendRawChat((char const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tp__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("LuaTp",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("LuaTp",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaTp",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("LuaTp",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("LuaTp",4,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  LuaTp((char const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tp__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("LuaTp",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("LuaTp",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaTp",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("LuaTp",3,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  LuaTp((char const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tp__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("LuaTp",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("LuaTp",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaTp",2,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  LuaTp((char const *)arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tp__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("LuaTp",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("LuaTp",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  LuaTp((char const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tp(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_tp__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_tp__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_tp__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_tp__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'tp'\n"
    "  Possible C/C++ prototypes are:\n"
    "    LuaTp(char const *,int,int,int)\n"
    "    LuaTp(char const *,int,int)\n"
    "    LuaTp(char const *,int)\n"
    "    LuaTp(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_exists(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Lua_exists",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Lua_exists",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (bool)Lua_exists((char const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getLuaFolder(lua_State* L) {
  int SWIG_arg = 0;
  std::string result;
  
  SWIG_check_num_args("getLuaFolder",0,0)
  result = getLuaFolder();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_toLuaString(lua_State* L) {
  int SWIG_arg = 0;
  F32 arg1 ;
  std::string result;
  
  SWIG_check_num_args("toLuaString",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("toLuaString",1,"F32");
  arg1 = (F32)lua_tonumber(L, 1);
  result = toLuaString(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_muteAvatar(lua_State* L) {
  int SWIG_arg = 0;
  LLUUID *arg1 = 0 ;
  LLUUID temp1 ;
  bool result;
  
  SWIG_check_num_args("muteAvatar",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("muteAvatar",1,"LLUUID const &");
  SWIG_contract_assert(temp1.set(lua_tostring(L,1),false),"Must be of UUID format.")
  arg1=&temp1;
  result = (bool)muteAvatar((LLUUID const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isMuted(lua_State* L) {
  int SWIG_arg = 0;
  LLUUID *arg1 = 0 ;
  std::string arg2 ;
  LLUUID temp1 ;
  bool result;
  
  SWIG_check_num_args("isMuted",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("isMuted",1,"LLUUID const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("isMuted",2,"std::string");
  SWIG_contract_assert(temp1.set(lua_tostring(L,1),false),"Must be of UUID format.")
  arg1=&temp1;
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  result = (bool)isMuted((LLUUID const &)*arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gAllowWorldMap_set(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  
  SWIG_check_num_args("gAllowWorldMap",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("gAllowWorldMap",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  gAllowWorldMap = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gAllowWorldMap_get(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("gAllowWorldMap",0,0)
  result = (bool)gAllowWorldMap;
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UpdateAppearance(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("LuaUpdateAppearance",0,0)
  LuaUpdateAppearance();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaDumpVisualParams(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("LuaDumpVisualParams",0,0)
  LuaDumpVisualParams();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaDumpVisualParamsToLuaCode(lua_State* L) {
  int SWIG_arg = 0;
  std::string result;
  
  SWIG_check_num_args("LuaDumpVisualParamsToLuaCode",0,0)
  result = LuaDumpVisualParamsToLuaCode();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getParamDefaultWeight(lua_State* L) {
  int SWIG_arg = 0;
  LLUUID *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  LLUUID temp1 ;
  double result;
  
  SWIG_check_num_args("getParamDefaultWeight",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("getParamDefaultWeight",1,"LLUUID const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("getParamDefaultWeight",2,"char const *");
  SWIG_contract_assert(temp1.set(lua_tostring(L,1),false),"Must be of UUID format.")
  arg1=&temp1;
  arg2 = (char *)lua_tostring(L, 2);
  result = (double)getParamDefaultWeight((LLUUID const &)*arg1,(char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getParamCurrentWeight(lua_State* L) {
  int SWIG_arg = 0;
  LLUUID *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  LLUUID temp1 ;
  double result;
  
  SWIG_check_num_args("getParamCurrentWeight",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("getParamCurrentWeight",1,"LLUUID const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("getParamCurrentWeight",2,"char const *");
  SWIG_contract_assert(temp1.set(lua_tostring(L,1),false),"Must be of UUID format.")
  arg1=&temp1;
  arg2 = (char *)lua_tostring(L, 2);
  result = (double)getParamCurrentWeight((LLUUID const &)*arg1,(char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getParamMax(lua_State* L) {
  int SWIG_arg = 0;
  LLUUID *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  LLUUID temp1 ;
  double result;
  
  SWIG_check_num_args("getParamMax",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("getParamMax",1,"LLUUID const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("getParamMax",2,"char const *");
  SWIG_contract_assert(temp1.set(lua_tostring(L,1),false),"Must be of UUID format.")
  arg1=&temp1;
  arg2 = (char *)lua_tostring(L, 2);
  result = (double)getParamMax((LLUUID const &)*arg1,(char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getParamMin(lua_State* L) {
  int SWIG_arg = 0;
  LLUUID *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  LLUUID temp1 ;
  double result;
  
  SWIG_check_num_args("getParamMin",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("getParamMin",1,"LLUUID const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("getParamMin",2,"char const *");
  SWIG_contract_assert(temp1.set(lua_tostring(L,1),false),"Must be of UUID format.")
  arg1=&temp1;
  arg2 = (char *)lua_tostring(L, 2);
  result = (double)getParamMin((LLUUID const &)*arg1,(char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_setParamOnSelf(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  double arg2 ;
  
  SWIG_check_num_args("setParamOnSelf",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("setParamOnSelf",1,"std::string");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setParamOnSelf",2,"double");
  (&arg1)->assign(lua_tostring(L,1),lua_strlen(L,1));
  arg2 = (double)lua_tonumber(L, 2);
  setParamOnSelf(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_setParamOnTarget(lua_State* L) {
  int SWIG_arg = 0;
  LLUUID arg1 ;
  std::string arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("setParamOnTarget",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("setParamOnTarget",1,"LLUUID");
  if(!lua_isstring(L,2)) SWIG_fail_arg("setParamOnTarget",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setParamOnTarget",3,"double");
  
  SWIG_contract_assert((&arg1)->set(lua_tostring(L,1),false),"Must be of UUID format.");
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  arg3 = (double)lua_tonumber(L, 3);
  setParamOnTarget(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_wear(lua_State* L) {
  int SWIG_arg = 0;
  LLUUID *arg1 = 0 ;
  LLUUID temp1 ;
  
  SWIG_check_num_args("LuaWear",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("LuaWear",1,"LLUUID const &");
  SWIG_contract_assert(temp1.set(lua_tostring(L,1),false),"Must be of UUID format.")
  arg1=&temp1;
  LuaWear((LLUUID const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RemoveAllWearables(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("LuaRemoveAllWearables",0,0)
  LuaRemoveAllWearables();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaSaveWearable(lua_State* L) {
  int SWIG_arg = 0;
  LLWearable *arg1 = (LLWearable *) 0 ;
  bool result;
  
  SWIG_check_num_args("LuaSaveWearable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaSaveWearable",1,"LLWearable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLWearable,0))){
    SWIG_fail_ptr("LuaSaveWearable",1,SWIGTYPE_p_LLWearable);
  }
  
  result = (bool)LuaSaveWearable(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaLoadWearable(lua_State* L) {
  int SWIG_arg = 0;
  LLUUID *arg1 = 0 ;
  LLUUID temp1 ;
  LLWearable *result = 0 ;
  
  SWIG_check_num_args("LuaLoadWearable",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("LuaLoadWearable",1,"LLUUID const &");
  SWIG_contract_assert(temp1.set(lua_tostring(L,1),false),"Must be of UUID format.")
  arg1=&temp1;
  result = (LLWearable *)LuaLoadWearable((LLUUID const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLWearable,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_setTEImage(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  LLUUID *arg2 = 0 ;
  LLUUID temp2 ;
  
  SWIG_check_num_args("LuaSetTEImage",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("LuaSetTEImage",1,"int");
  if(!lua_isstring(L,2)) SWIG_fail_arg("LuaSetTEImage",2,"LLUUID const &");
  arg1 = (int)lua_tonumber(L, 1);
  SWIG_contract_assert(temp2.set(lua_tostring(L,2),false),"Must be of UUID format.")
  arg2=&temp2;
  LuaSetTEImage(arg1,(LLUUID const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HasPermissions(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerInventoryItem *arg1 = (LLViewerInventoryItem *) 0 ;
  bool result;
  
  SWIG_check_num_args("HasPermissions",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("HasPermissions",1,"LLViewerInventoryItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerInventoryItem,0))){
    SWIG_fail_ptr("HasPermissions",1,SWIGTYPE_p_LLViewerInventoryItem);
  }
  
  result = (bool)HasPermissions(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_key2name(lua_State* L) {
  int SWIG_arg = 0;
  LLUUID *arg1 = 0 ;
  LLUUID temp1 ;
  std::string result;
  
  SWIG_check_num_args("LuaFindAvatarName",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("LuaFindAvatarName",1,"LLUUID const &");
  SWIG_contract_assert(temp1.set(lua_tostring(L,1),false),"Must be of UUID format.")
  arg1=&temp1;
  result = LuaFindAvatarName((LLUUID const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_name2key(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  std::string result;
  
  SWIG_check_num_args("LuaFindAvatarKey",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("LuaFindAvatarKey",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = LuaFindAvatarKey((char const *)arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getCurrentParcel(lua_State* L) {
  int SWIG_arg = 0;
  LLParcel *result = 0 ;
  
  SWIG_check_num_args("Lua_getCurrentParcel",0,0)
  result = (LLParcel *)Lua_getCurrentParcel();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLParcel,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getParcelOwner(lua_State* L) {
  int SWIG_arg = 0;
  LLParcel *arg1 = (LLParcel *) 0 ;
  LLUUID result;
  
  SWIG_check_num_args("getParcelOwner",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getParcelOwner",1,"LLParcel *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLParcel,0))){
    SWIG_fail_ptr("getParcelOwner",1,SWIGTYPE_p_LLParcel);
  }
  
  result = getParcelOwner(arg1);
  
  lua_pushlstring(L,(&result)->asString().data(),(&result)->asString().size()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getMyID(lua_State* L) {
  int SWIG_arg = 0;
  LLUUID result;
  
  SWIG_check_num_args("getMyID",0,0)
  result = getMyID();
  
  lua_pushlstring(L,(&result)->asString().data(),(&result)->asString().size()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getMyName(lua_State* L) {
  int SWIG_arg = 0;
  std::string result;
  
  SWIG_check_num_args("getMyName",0,0)
  result = getMyName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaGetAvatar(lua_State* L) {
  int SWIG_arg = 0;
  LLUUID *arg1 = 0 ;
  LLUUID temp1 ;
  LLVOAvatar *result = 0 ;
  
  SWIG_check_num_args("LuaGetAvatar",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("LuaGetAvatar",1,"LLUUID const &");
  SWIG_contract_assert(temp1.set(lua_tostring(L,1),false),"Must be of UUID format.")
  arg1=&temp1;
  result = (LLVOAvatar *)LuaGetAvatar((LLUUID const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVOAvatar,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLPauseRequestHandle(lua_State* L) {
  int SWIG_arg = 0;
  LLPauseRequestHandle *result = 0 ;
  
  SWIG_check_num_args("LLPauseRequestHandle",0,0)
  result = (LLPauseRequestHandle *)new LLPauseRequestHandle();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLPauseRequestHandle,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LLPauseRequestHandle(void *obj) {
LLPauseRequestHandle *arg1 = (LLPauseRequestHandle *) obj;
delete arg1;
}
static swig_lua_method swig_LLPauseRequestHandle_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_LLPauseRequestHandle_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_LLPauseRequestHandle_bases[] = {0};
static const char *swig_LLPauseRequestHandle_base_names[] = {0};
static swig_lua_class _wrap_class_LLPauseRequestHandle = { "LLPauseRequestHandle", &SWIGTYPE_p_LLPauseRequestHandle,_wrap_new_LLPauseRequestHandle, swig_delete_LLPauseRequestHandle, swig_LLPauseRequestHandle_methods, swig_LLPauseRequestHandle_attributes, swig_LLPauseRequestHandle_bases, swig_LLPauseRequestHandle_base_names };

static int _wrap_LLCharacter_getAnimationPrefix(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("getAnimationPrefix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAnimationPrefix",1,"LLCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_getAnimationPrefix",1,SWIGTYPE_p_LLCharacter);
  }
  
  result = (char *)(arg1)->getAnimationPrefix();
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_getRootJoint(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  LLJoint *result = 0 ;
  
  SWIG_check_num_args("getRootJoint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRootJoint",1,"LLCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_getRootJoint",1,SWIGTYPE_p_LLCharacter);
  }
  
  result = (LLJoint *)(arg1)->getRootJoint();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLJoint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_getJoint(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  LLJoint *result = 0 ;
  
  SWIG_check_num_args("getJoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getJoint",1,"LLCharacter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("getJoint",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_getJoint",1,SWIGTYPE_p_LLCharacter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (LLJoint *)(arg1)->getJoint((std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLJoint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_getCharacterPosition(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  LLVector3 result;
  
  SWIG_check_num_args("getCharacterPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getCharacterPosition",1,"LLCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_getCharacterPosition",1,SWIGTYPE_p_LLCharacter);
  }
  
  result = (arg1)->getCharacterPosition();
  {
    LLVector3 * resultptr = new LLVector3((const LLVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_getCharacterRotation(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  LLQuaternion result;
  
  SWIG_check_num_args("getCharacterRotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getCharacterRotation",1,"LLCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_getCharacterRotation",1,SWIGTYPE_p_LLCharacter);
  }
  
  result = (arg1)->getCharacterRotation();
  {
    LLQuaternion * resultptr = new LLQuaternion((const LLQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_getCharacterVelocity(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  LLVector3 result;
  
  SWIG_check_num_args("getCharacterVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getCharacterVelocity",1,"LLCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_getCharacterVelocity",1,SWIGTYPE_p_LLCharacter);
  }
  
  result = (arg1)->getCharacterVelocity();
  {
    LLVector3 * resultptr = new LLVector3((const LLVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_getCharacterAngularVelocity(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  LLVector3 result;
  
  SWIG_check_num_args("getCharacterAngularVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getCharacterAngularVelocity",1,"LLCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_getCharacterAngularVelocity",1,SWIGTYPE_p_LLCharacter);
  }
  
  result = (arg1)->getCharacterAngularVelocity();
  {
    LLVector3 * resultptr = new LLVector3((const LLVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_getGround(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  LLVector3 *arg2 = 0 ;
  LLVector3 *arg3 = 0 ;
  LLVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("getGround",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGround",1,"LLCharacter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getGround",2,"LLVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getGround",3,"LLVector3 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("getGround",4,"LLVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_getGround",1,SWIGTYPE_p_LLCharacter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLCharacter_getGround",2,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLCharacter_getGround",3,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLCharacter_getGround",4,SWIGTYPE_p_LLVector3);
  }
  
  (arg1)->getGround((LLVector3 const &)*arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_allocateCharacterJoints(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  U32 arg2 ;
  BOOL result;
  
  SWIG_check_num_args("allocateCharacterJoints",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("allocateCharacterJoints",1,"LLCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("allocateCharacterJoints",2,"U32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_allocateCharacterJoints",1,SWIGTYPE_p_LLCharacter);
  }
  
  arg2 = (U32)lua_tonumber(L, 2);
  result = (BOOL)(arg1)->allocateCharacterJoints(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_getCharacterJoint(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  U32 arg2 ;
  LLJoint *result = 0 ;
  
  SWIG_check_num_args("getCharacterJoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getCharacterJoint",1,"LLCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getCharacterJoint",2,"U32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_getCharacterJoint",1,SWIGTYPE_p_LLCharacter);
  }
  
  arg2 = (U32)lua_tonumber(L, 2);
  result = (LLJoint *)(arg1)->getCharacterJoint(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLJoint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_getTimeDilation(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  F32 result;
  
  SWIG_check_num_args("getTimeDilation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTimeDilation",1,"LLCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_getTimeDilation",1,SWIGTYPE_p_LLCharacter);
  }
  
  result = (F32)(arg1)->getTimeDilation();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_getPixelArea(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  F32 result;
  
  SWIG_check_num_args("getPixelArea",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPixelArea",1,"LLCharacter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_getPixelArea",1,SWIGTYPE_p_LLCharacter);
  }
  
  result = (F32)((LLCharacter const *)arg1)->getPixelArea();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_getHeadMesh(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  LLPolyMesh *result = 0 ;
  
  SWIG_check_num_args("getHeadMesh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getHeadMesh",1,"LLCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_getHeadMesh",1,SWIGTYPE_p_LLCharacter);
  }
  
  result = (LLPolyMesh *)(arg1)->getHeadMesh();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLPolyMesh,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_getUpperBodyMesh(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  LLPolyMesh *result = 0 ;
  
  SWIG_check_num_args("getUpperBodyMesh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getUpperBodyMesh",1,"LLCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_getUpperBodyMesh",1,SWIGTYPE_p_LLCharacter);
  }
  
  result = (LLPolyMesh *)(arg1)->getUpperBodyMesh();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLPolyMesh,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_getPosGlobalFromAgent(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  LLVector3 *arg2 = 0 ;
  LLVector3d result;
  
  SWIG_check_num_args("getPosGlobalFromAgent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPosGlobalFromAgent",1,"LLCharacter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getPosGlobalFromAgent",2,"LLVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_getPosGlobalFromAgent",1,SWIGTYPE_p_LLCharacter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLCharacter_getPosGlobalFromAgent",2,SWIGTYPE_p_LLVector3);
  }
  
  result = (arg1)->getPosGlobalFromAgent((LLVector3 const &)*arg2);
  {
    LLVector3d * resultptr = new LLVector3d((const LLVector3d &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLVector3d,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_getPosAgentFromGlobal(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  LLVector3d *arg2 = 0 ;
  LLVector3 result;
  
  SWIG_check_num_args("getPosAgentFromGlobal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPosAgentFromGlobal",1,"LLCharacter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getPosAgentFromGlobal",2,"LLVector3d const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_getPosAgentFromGlobal",1,SWIGTYPE_p_LLCharacter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3d,0))){
    SWIG_fail_ptr("LLCharacter_getPosAgentFromGlobal",2,SWIGTYPE_p_LLVector3d);
  }
  
  result = (arg1)->getPosAgentFromGlobal((LLVector3d const &)*arg2);
  {
    LLVector3 * resultptr = new LLVector3((const LLVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_updateVisualParams(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  
  SWIG_check_num_args("updateVisualParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateVisualParams",1,"LLCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_updateVisualParams",1,SWIGTYPE_p_LLCharacter);
  }
  
  (arg1)->updateVisualParams();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_addDebugText(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("addDebugText",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addDebugText",1,"LLCharacter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("addDebugText",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_addDebugText",1,SWIGTYPE_p_LLCharacter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->addDebugText((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_getID(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  LLUUID *result = 0 ;
  
  SWIG_check_num_args("getID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getID",1,"LLCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_getID",1,SWIGTYPE_p_LLCharacter);
  }
  
  {
    LLUUID const &_result_ref = (arg1)->getID();
    result = (LLUUID *) &_result_ref;
  }
  lua_pushlstring(L,result->asString().data(),result->asString().size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_registerMotion(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  LLUUID *arg2 = 0 ;
  LLMotionConstructor arg3 ;
  LLUUID temp2 ;
  LLMotionConstructor *argp3 ;
  BOOL result;
  
  SWIG_check_num_args("registerMotion",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("registerMotion",1,"LLCharacter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("registerMotion",2,"LLUUID const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("registerMotion",3,"LLMotionConstructor");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_registerMotion",1,SWIGTYPE_p_LLCharacter);
  }
  
  SWIG_contract_assert(temp2.set(lua_tostring(L,2),false),"Must be of UUID format.")
  arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_LLMotionConstructor,0))){
    SWIG_fail_ptr("LLCharacter_registerMotion",3,SWIGTYPE_p_LLMotionConstructor);
  }
  arg3 = *argp3;
  
  result = (BOOL)(arg1)->registerMotion((LLUUID const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_removeMotion(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  LLUUID *arg2 = 0 ;
  LLUUID temp2 ;
  
  SWIG_check_num_args("removeMotion",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("removeMotion",1,"LLCharacter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("removeMotion",2,"LLUUID const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_removeMotion",1,SWIGTYPE_p_LLCharacter);
  }
  
  SWIG_contract_assert(temp2.set(lua_tostring(L,2),false),"Must be of UUID format.")
  arg2=&temp2;
  (arg1)->removeMotion((LLUUID const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_createMotion(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  LLUUID *arg2 = 0 ;
  LLUUID temp2 ;
  LLMotion *result = 0 ;
  
  SWIG_check_num_args("createMotion",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("createMotion",1,"LLCharacter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("createMotion",2,"LLUUID const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_createMotion",1,SWIGTYPE_p_LLCharacter);
  }
  
  SWIG_contract_assert(temp2.set(lua_tostring(L,2),false),"Must be of UUID format.")
  arg2=&temp2;
  result = (LLMotion *)(arg1)->createMotion((LLUUID const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLMotion,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_findMotion(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  LLUUID *arg2 = 0 ;
  LLUUID temp2 ;
  LLMotion *result = 0 ;
  
  SWIG_check_num_args("findMotion",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findMotion",1,"LLCharacter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("findMotion",2,"LLUUID const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_findMotion",1,SWIGTYPE_p_LLCharacter);
  }
  
  SWIG_contract_assert(temp2.set(lua_tostring(L,2),false),"Must be of UUID format.")
  arg2=&temp2;
  result = (LLMotion *)(arg1)->findMotion((LLUUID const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLMotion,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_startMotion__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  LLUUID *arg2 = 0 ;
  F32 arg3 ;
  LLUUID temp2 ;
  BOOL result;
  
  SWIG_check_num_args("startMotion",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("startMotion",1,"LLCharacter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("startMotion",2,"LLUUID const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("startMotion",3,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_startMotion",1,SWIGTYPE_p_LLCharacter);
  }
  
  SWIG_contract_assert(temp2.set(lua_tostring(L,2),false),"Must be of UUID format.")
  arg2=&temp2;
  arg3 = (F32)lua_tonumber(L, 3);
  result = (BOOL)(arg1)->startMotion((LLUUID const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_startMotion__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  LLUUID *arg2 = 0 ;
  LLUUID temp2 ;
  BOOL result;
  
  SWIG_check_num_args("startMotion",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("startMotion",1,"LLCharacter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("startMotion",2,"LLUUID const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_startMotion",1,SWIGTYPE_p_LLCharacter);
  }
  
  SWIG_contract_assert(temp2.set(lua_tostring(L,2),false),"Must be of UUID format.")
  arg2=&temp2;
  result = (BOOL)(arg1)->startMotion((LLUUID const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_startMotion(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLCharacter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_LLCharacter_startMotion__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLCharacter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_LLCharacter_startMotion__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLCharacter_startMotion'\n"
    "  Possible C/C++ prototypes are:\n"
    "    startMotion(LLCharacter *,LLUUID const &,F32)\n"
    "    startMotion(LLCharacter *,LLUUID const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LLCharacter_stopMotion__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  LLUUID *arg2 = 0 ;
  BOOL arg3 ;
  LLUUID temp2 ;
  BOOL result;
  
  SWIG_check_num_args("stopMotion",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stopMotion",1,"LLCharacter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("stopMotion",2,"LLUUID const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stopMotion",3,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_stopMotion",1,SWIGTYPE_p_LLCharacter);
  }
  
  SWIG_contract_assert(temp2.set(lua_tostring(L,2),false),"Must be of UUID format.")
  arg2=&temp2;
  arg3 = (BOOL)lua_tonumber(L, 3);
  result = (BOOL)(arg1)->stopMotion((LLUUID const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_stopMotion__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  LLUUID *arg2 = 0 ;
  LLUUID temp2 ;
  BOOL result;
  
  SWIG_check_num_args("stopMotion",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stopMotion",1,"LLCharacter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("stopMotion",2,"LLUUID const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_stopMotion",1,SWIGTYPE_p_LLCharacter);
  }
  
  SWIG_contract_assert(temp2.set(lua_tostring(L,2),false),"Must be of UUID format.")
  arg2=&temp2;
  result = (BOOL)(arg1)->stopMotion((LLUUID const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_stopMotion(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLCharacter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_LLCharacter_stopMotion__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLCharacter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_LLCharacter_stopMotion__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLCharacter_stopMotion'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stopMotion(LLCharacter *,LLUUID const &,BOOL)\n"
    "    stopMotion(LLCharacter *,LLUUID const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LLCharacter_isMotionActive(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  LLUUID *arg2 = 0 ;
  LLUUID temp2 ;
  BOOL result;
  
  SWIG_check_num_args("isMotionActive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isMotionActive",1,"LLCharacter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("isMotionActive",2,"LLUUID const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_isMotionActive",1,SWIGTYPE_p_LLCharacter);
  }
  
  SWIG_contract_assert(temp2.set(lua_tostring(L,2),false),"Must be of UUID format.")
  arg2=&temp2;
  result = (BOOL)(arg1)->isMotionActive((LLUUID const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_requestStopMotion(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  LLMotion *arg2 = (LLMotion *) 0 ;
  
  SWIG_check_num_args("requestStopMotion",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("requestStopMotion",1,"LLCharacter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("requestStopMotion",2,"LLMotion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_requestStopMotion",1,SWIGTYPE_p_LLCharacter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLMotion,0))){
    SWIG_fail_ptr("LLCharacter_requestStopMotion",2,SWIGTYPE_p_LLMotion);
  }
  
  (arg1)->requestStopMotion(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_updateMotions(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  LLCharacter::e_update_t arg2 ;
  
  SWIG_check_num_args("updateMotions",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateMotions",1,"LLCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("updateMotions",2,"LLCharacter::e_update_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_updateMotions",1,SWIGTYPE_p_LLCharacter);
  }
  
  arg2 = (LLCharacter::e_update_t)(int)lua_tonumber(L, 2);
  (arg1)->updateMotions(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_requestPause(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  SwigValueWrapper< LLPointer< LLPauseRequestHandle > > result;
  
  SWIG_check_num_args("requestPause",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("requestPause",1,"LLCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_requestPause",1,SWIGTYPE_p_LLCharacter);
  }
  
  result = (arg1)->requestPause();
  {
    LLAnimPauseRequest * resultptr = new LLAnimPauseRequest((const LLAnimPauseRequest &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLPointerT_LLPauseRequestHandle_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_areAnimationsPaused(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("areAnimationsPaused",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("areAnimationsPaused",1,"LLCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_areAnimationsPaused",1,SWIGTYPE_p_LLCharacter);
  }
  
  result = (BOOL)(arg1)->areAnimationsPaused();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_setAnimTimeFactor(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  F32 arg2 ;
  
  SWIG_check_num_args("setAnimTimeFactor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAnimTimeFactor",1,"LLCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setAnimTimeFactor",2,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_setAnimTimeFactor",1,SWIGTYPE_p_LLCharacter);
  }
  
  arg2 = (F32)lua_tonumber(L, 2);
  (arg1)->setAnimTimeFactor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_setTimeStep(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  F32 arg2 ;
  
  SWIG_check_num_args("setTimeStep",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTimeStep",1,"LLCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setTimeStep",2,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_setTimeStep",1,SWIGTYPE_p_LLCharacter);
  }
  
  arg2 = (F32)lua_tonumber(L, 2);
  (arg1)->setTimeStep(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_getMotionController(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  LLMotionController *result = 0 ;
  
  SWIG_check_num_args("getMotionController",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getMotionController",1,"LLCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_getMotionController",1,SWIGTYPE_p_LLCharacter);
  }
  
  {
    LLMotionController &_result_ref = (arg1)->getMotionController();
    result = (LLMotionController *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLMotionController,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_flushAllMotions(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  
  SWIG_check_num_args("flushAllMotions",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("flushAllMotions",1,"LLCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_flushAllMotions",1,SWIGTYPE_p_LLCharacter);
  }
  
  (arg1)->flushAllMotions();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_deactivateAllMotions(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  
  SWIG_check_num_args("deactivateAllMotions",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("deactivateAllMotions",1,"LLCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_deactivateAllMotions",1,SWIGTYPE_p_LLCharacter);
  }
  
  (arg1)->deactivateAllMotions();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_dumpCharacter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  LLJoint *arg2 = (LLJoint *) 0 ;
  
  SWIG_check_num_args("dumpCharacter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dumpCharacter",1,"LLCharacter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("dumpCharacter",2,"LLJoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_dumpCharacter",1,SWIGTYPE_p_LLCharacter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLJoint,0))){
    SWIG_fail_ptr("LLCharacter_dumpCharacter",2,SWIGTYPE_p_LLJoint);
  }
  
  (arg1)->dumpCharacter(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_dumpCharacter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  
  SWIG_check_num_args("dumpCharacter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dumpCharacter",1,"LLCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_dumpCharacter",1,SWIGTYPE_p_LLCharacter);
  }
  
  (arg1)->dumpCharacter();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_dumpCharacter(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLCharacter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_LLCharacter_dumpCharacter__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLCharacter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLJoint, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLCharacter_dumpCharacter__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLCharacter_dumpCharacter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dumpCharacter(LLCharacter *,LLJoint *)\n"
    "    dumpCharacter(LLCharacter *)\n");
  lua_error(L);return 0;
}


static int _wrap_LLCharacter_getPreferredPelvisHeight(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  F32 result;
  
  SWIG_check_num_args("getPreferredPelvisHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPreferredPelvisHeight",1,"LLCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_getPreferredPelvisHeight",1,SWIGTYPE_p_LLCharacter);
  }
  
  result = (F32)(arg1)->getPreferredPelvisHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_getVolumePos(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  S32 arg2 ;
  LLVector3 *arg3 = 0 ;
  LLVector3 result;
  
  SWIG_check_num_args("getVolumePos",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getVolumePos",1,"LLCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getVolumePos",2,"S32");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getVolumePos",3,"LLVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_getVolumePos",1,SWIGTYPE_p_LLCharacter);
  }
  
  arg2 = (S32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLCharacter_getVolumePos",3,SWIGTYPE_p_LLVector3);
  }
  
  result = (arg1)->getVolumePos(arg2,*arg3);
  {
    LLVector3 * resultptr = new LLVector3((const LLVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_findCollisionVolume(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  U32 arg2 ;
  LLJoint *result = 0 ;
  
  SWIG_check_num_args("findCollisionVolume",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findCollisionVolume",1,"LLCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findCollisionVolume",2,"U32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_findCollisionVolume",1,SWIGTYPE_p_LLCharacter);
  }
  
  arg2 = (U32)lua_tonumber(L, 2);
  result = (LLJoint *)(arg1)->findCollisionVolume(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLJoint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_getCollisionVolumeID(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  std::string *arg2 = 0 ;
  S32 result;
  
  SWIG_check_num_args("getCollisionVolumeID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getCollisionVolumeID",1,"LLCharacter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getCollisionVolumeID",2,"std::string &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_getCollisionVolumeID",1,SWIGTYPE_p_LLCharacter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("LLCharacter_getCollisionVolumeID",2,SWIGTYPE_p_std__string);
  }
  
  result = (S32)(arg1)->getCollisionVolumeID(*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_setAnimationData(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  std::string arg2 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("setAnimationData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAnimationData",1,"LLCharacter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("setAnimationData",2,"std::string");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("setAnimationData",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_setAnimationData",1,SWIGTYPE_p_LLCharacter);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"LLCharacter_setAnimationData");
  (arg1)->setAnimationData(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_getAnimationData(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  std::string arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("getAnimationData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAnimationData",1,"LLCharacter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("getAnimationData",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_getAnimationData",1,SWIGTYPE_p_LLCharacter);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  result = (void *)(arg1)->getAnimationData(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_removeAnimationData(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  std::string arg2 ;
  
  SWIG_check_num_args("removeAnimationData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("removeAnimationData",1,"LLCharacter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("removeAnimationData",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_removeAnimationData",1,SWIGTYPE_p_LLCharacter);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  (arg1)->removeAnimationData(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_addVisualParam(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  LLVisualParam *arg2 = (LLVisualParam *) 0 ;
  
  SWIG_check_num_args("addVisualParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addVisualParam",1,"LLCharacter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("addVisualParam",2,"LLVisualParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_addVisualParam",1,SWIGTYPE_p_LLCharacter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVisualParam,0))){
    SWIG_fail_ptr("LLCharacter_addVisualParam",2,SWIGTYPE_p_LLVisualParam);
  }
  
  (arg1)->addVisualParam(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_addSharedVisualParam(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  LLVisualParam *arg2 = (LLVisualParam *) 0 ;
  
  SWIG_check_num_args("addSharedVisualParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addSharedVisualParam",1,"LLCharacter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("addSharedVisualParam",2,"LLVisualParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_addSharedVisualParam",1,SWIGTYPE_p_LLCharacter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVisualParam,0))){
    SWIG_fail_ptr("LLCharacter_addSharedVisualParam",2,SWIGTYPE_p_LLVisualParam);
  }
  
  (arg1)->addSharedVisualParam(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_setVisualParamWeight__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  LLVisualParam *arg2 = (LLVisualParam *) 0 ;
  F32 arg3 ;
  BOOL arg4 ;
  BOOL result;
  
  SWIG_check_num_args("setVisualParamWeight",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVisualParamWeight",1,"LLCharacter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("setVisualParamWeight",2,"LLVisualParam *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setVisualParamWeight",3,"F32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setVisualParamWeight",4,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_setVisualParamWeight",1,SWIGTYPE_p_LLCharacter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVisualParam,0))){
    SWIG_fail_ptr("LLCharacter_setVisualParamWeight",2,SWIGTYPE_p_LLVisualParam);
  }
  
  arg3 = (F32)lua_tonumber(L, 3);
  arg4 = (BOOL)lua_tonumber(L, 4);
  result = (BOOL)(arg1)->setVisualParamWeight(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_setVisualParamWeight__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  LLVisualParam *arg2 = (LLVisualParam *) 0 ;
  F32 arg3 ;
  BOOL result;
  
  SWIG_check_num_args("setVisualParamWeight",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVisualParamWeight",1,"LLCharacter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("setVisualParamWeight",2,"LLVisualParam *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setVisualParamWeight",3,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_setVisualParamWeight",1,SWIGTYPE_p_LLCharacter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVisualParam,0))){
    SWIG_fail_ptr("LLCharacter_setVisualParamWeight",2,SWIGTYPE_p_LLVisualParam);
  }
  
  arg3 = (F32)lua_tonumber(L, 3);
  result = (BOOL)(arg1)->setVisualParamWeight(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_setVisualParamWeight__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  char *arg2 = (char *) 0 ;
  F32 arg3 ;
  BOOL arg4 ;
  BOOL result;
  
  SWIG_check_num_args("setVisualParamWeight",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVisualParamWeight",1,"LLCharacter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("setVisualParamWeight",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setVisualParamWeight",3,"F32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setVisualParamWeight",4,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_setVisualParamWeight",1,SWIGTYPE_p_LLCharacter);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (F32)lua_tonumber(L, 3);
  arg4 = (BOOL)lua_tonumber(L, 4);
  result = (BOOL)(arg1)->setVisualParamWeight((char const *)arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_setVisualParamWeight__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  char *arg2 = (char *) 0 ;
  F32 arg3 ;
  BOOL result;
  
  SWIG_check_num_args("setVisualParamWeight",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVisualParamWeight",1,"LLCharacter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("setVisualParamWeight",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setVisualParamWeight",3,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_setVisualParamWeight",1,SWIGTYPE_p_LLCharacter);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (F32)lua_tonumber(L, 3);
  result = (BOOL)(arg1)->setVisualParamWeight((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_setVisualParamWeightNoClamp__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  char *arg2 = (char *) 0 ;
  F32 arg3 ;
  BOOL arg4 ;
  BOOL result;
  
  SWIG_check_num_args("setVisualParamWeightNoClamp",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVisualParamWeightNoClamp",1,"LLCharacter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("setVisualParamWeightNoClamp",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setVisualParamWeightNoClamp",3,"F32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setVisualParamWeightNoClamp",4,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_setVisualParamWeightNoClamp",1,SWIGTYPE_p_LLCharacter);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (F32)lua_tonumber(L, 3);
  arg4 = (BOOL)lua_tonumber(L, 4);
  result = (BOOL)(arg1)->setVisualParamWeightNoClamp((char const *)arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_setVisualParamWeightNoClamp__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  char *arg2 = (char *) 0 ;
  F32 arg3 ;
  BOOL result;
  
  SWIG_check_num_args("setVisualParamWeightNoClamp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVisualParamWeightNoClamp",1,"LLCharacter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("setVisualParamWeightNoClamp",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setVisualParamWeightNoClamp",3,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_setVisualParamWeightNoClamp",1,SWIGTYPE_p_LLCharacter);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (F32)lua_tonumber(L, 3);
  result = (BOOL)(arg1)->setVisualParamWeightNoClamp((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_setVisualParamWeightNoClamp(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLCharacter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_LLCharacter_setVisualParamWeightNoClamp__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLCharacter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_LLCharacter_setVisualParamWeightNoClamp__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLCharacter_setVisualParamWeightNoClamp'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setVisualParamWeightNoClamp(LLCharacter *,char const *,F32,BOOL)\n"
    "    setVisualParamWeightNoClamp(LLCharacter *,char const *,F32)\n");
  lua_error(L);return 0;
}


static int _wrap_LLCharacter_setVisualParamWeight__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  S32 arg2 ;
  F32 arg3 ;
  BOOL arg4 ;
  BOOL result;
  
  SWIG_check_num_args("setVisualParamWeight",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVisualParamWeight",1,"LLCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setVisualParamWeight",2,"S32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setVisualParamWeight",3,"F32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setVisualParamWeight",4,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_setVisualParamWeight",1,SWIGTYPE_p_LLCharacter);
  }
  
  arg2 = (S32)lua_tonumber(L, 2);
  arg3 = (F32)lua_tonumber(L, 3);
  arg4 = (BOOL)lua_tonumber(L, 4);
  result = (BOOL)(arg1)->setVisualParamWeight(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_setVisualParamWeight__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  S32 arg2 ;
  F32 arg3 ;
  BOOL result;
  
  SWIG_check_num_args("setVisualParamWeight",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVisualParamWeight",1,"LLCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setVisualParamWeight",2,"S32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setVisualParamWeight",3,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_setVisualParamWeight",1,SWIGTYPE_p_LLCharacter);
  }
  
  arg2 = (S32)lua_tonumber(L, 2);
  arg3 = (F32)lua_tonumber(L, 3);
  result = (BOOL)(arg1)->setVisualParamWeight(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_setVisualParamWeight(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLCharacter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVisualParam, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_LLCharacter_setVisualParamWeight__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLCharacter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_LLCharacter_setVisualParamWeight__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLCharacter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_LLCharacter_setVisualParamWeight__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLCharacter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVisualParam, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_LLCharacter_setVisualParamWeight__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLCharacter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_LLCharacter_setVisualParamWeight__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLCharacter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_LLCharacter_setVisualParamWeight__SWIG_2(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLCharacter_setVisualParamWeight'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setVisualParamWeight(LLCharacter *,LLVisualParam *,F32,BOOL)\n"
    "    setVisualParamWeight(LLCharacter *,LLVisualParam *,F32)\n"
    "    setVisualParamWeight(LLCharacter *,char const *,F32,BOOL)\n"
    "    setVisualParamWeight(LLCharacter *,char const *,F32)\n"
    "    setVisualParamWeight(LLCharacter *,S32,F32,BOOL)\n"
    "    setVisualParamWeight(LLCharacter *,S32,F32)\n");
  lua_error(L);return 0;
}


static int _wrap_LLCharacter_getVisualParamWeight__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  LLVisualParam *arg2 = (LLVisualParam *) 0 ;
  F32 result;
  
  SWIG_check_num_args("getVisualParamWeight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getVisualParamWeight",1,"LLCharacter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("getVisualParamWeight",2,"LLVisualParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_getVisualParamWeight",1,SWIGTYPE_p_LLCharacter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVisualParam,0))){
    SWIG_fail_ptr("LLCharacter_getVisualParamWeight",2,SWIGTYPE_p_LLVisualParam);
  }
  
  result = (F32)(arg1)->getVisualParamWeight(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_getVisualParamWeight__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  char *arg2 = (char *) 0 ;
  F32 result;
  
  SWIG_check_num_args("getVisualParamWeight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getVisualParamWeight",1,"LLCharacter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("getVisualParamWeight",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_getVisualParamWeight",1,SWIGTYPE_p_LLCharacter);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (F32)(arg1)->getVisualParamWeight((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_getVisualParamWeight__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  S32 arg2 ;
  F32 result;
  
  SWIG_check_num_args("getVisualParamWeight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getVisualParamWeight",1,"LLCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getVisualParamWeight",2,"S32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_getVisualParamWeight",1,SWIGTYPE_p_LLCharacter);
  }
  
  arg2 = (S32)lua_tonumber(L, 2);
  result = (F32)(arg1)->getVisualParamWeight(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_getVisualParamWeight(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLCharacter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVisualParam, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLCharacter_getVisualParamWeight__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLCharacter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LLCharacter_getVisualParamWeight__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLCharacter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_LLCharacter_getVisualParamWeight__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLCharacter_getVisualParamWeight'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getVisualParamWeight(LLCharacter *,LLVisualParam *)\n"
    "    getVisualParamWeight(LLCharacter *,char const *)\n"
    "    getVisualParamWeight(LLCharacter *,S32)\n");
  lua_error(L);return 0;
}


static int _wrap_LLCharacter_clearVisualParamWeights(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  
  SWIG_check_num_args("clearVisualParamWeights",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clearVisualParamWeights",1,"LLCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_clearVisualParamWeights",1,SWIGTYPE_p_LLCharacter);
  }
  
  (arg1)->clearVisualParamWeights();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_visualParamWeightsAreDefault(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("visualParamWeightsAreDefault",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("visualParamWeightsAreDefault",1,"LLCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_visualParamWeightsAreDefault",1,SWIGTYPE_p_LLCharacter);
  }
  
  result = (BOOL)(arg1)->visualParamWeightsAreDefault();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_getFirstVisualParam(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  LLVisualParam *result = 0 ;
  
  SWIG_check_num_args("getFirstVisualParam",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFirstVisualParam",1,"LLCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_getFirstVisualParam",1,SWIGTYPE_p_LLCharacter);
  }
  
  result = (LLVisualParam *)(arg1)->getFirstVisualParam();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVisualParam,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_getNextVisualParam(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  LLVisualParam *result = 0 ;
  
  SWIG_check_num_args("getNextVisualParam",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNextVisualParam",1,"LLCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_getNextVisualParam",1,SWIGTYPE_p_LLCharacter);
  }
  
  result = (LLVisualParam *)(arg1)->getNextVisualParam();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVisualParam,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_getVisualParam__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  S32 arg2 ;
  LLVisualParam *result = 0 ;
  
  SWIG_check_num_args("getVisualParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getVisualParam",1,"LLCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getVisualParam",2,"S32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_getVisualParam",1,SWIGTYPE_p_LLCharacter);
  }
  
  arg2 = (S32)lua_tonumber(L, 2);
  result = (LLVisualParam *)(arg1)->getVisualParam(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVisualParam,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_getVisualParamID(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  LLVisualParam *arg2 = (LLVisualParam *) 0 ;
  S32 result;
  
  SWIG_check_num_args("getVisualParamID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getVisualParamID",1,"LLCharacter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("getVisualParamID",2,"LLVisualParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_getVisualParamID",1,SWIGTYPE_p_LLCharacter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVisualParam,0))){
    SWIG_fail_ptr("LLCharacter_getVisualParamID",2,SWIGTYPE_p_LLVisualParam);
  }
  
  result = (S32)(arg1)->getVisualParamID(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_getVisualParamCount(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  S32 result;
  
  SWIG_check_num_args("getVisualParamCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getVisualParamCount",1,"LLCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_getVisualParamCount",1,SWIGTYPE_p_LLCharacter);
  }
  
  result = (S32)(arg1)->getVisualParamCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_getVisualParam__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  char *arg2 = (char *) 0 ;
  LLVisualParam *result = 0 ;
  
  SWIG_check_num_args("getVisualParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getVisualParam",1,"LLCharacter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("getVisualParam",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_getVisualParam",1,SWIGTYPE_p_LLCharacter);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (LLVisualParam *)(arg1)->getVisualParam((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVisualParam,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_getVisualParam(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLCharacter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LLCharacter_getVisualParam__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLCharacter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_LLCharacter_getVisualParam__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLCharacter_getVisualParam'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getVisualParam(LLCharacter *,S32)\n"
    "    getVisualParam(LLCharacter *,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_LLCharacter_getSex(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  ESex result;
  
  SWIG_check_num_args("getSex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSex",1,"LLCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_getSex",1,SWIGTYPE_p_LLCharacter);
  }
  
  result = (arg1)->getSex();
  {
    ESex * resultptr = new ESex((const ESex &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ESex,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_setSex(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  ESex arg2 ;
  ESex *argp2 ;
  
  SWIG_check_num_args("setSex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setSex",1,"LLCharacter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setSex",2,"ESex");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_setSex",1,SWIGTYPE_p_LLCharacter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ESex,0))){
    SWIG_fail_ptr("LLCharacter_setSex",2,SWIGTYPE_p_ESex);
  }
  arg2 = *argp2;
  
  (arg1)->setSex(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_setAppearanceFlag(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setAppearanceFlag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAppearanceFlag",1,"LLCharacter *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setAppearanceFlag",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_setAppearanceFlag",1,SWIGTYPE_p_LLCharacter);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setAppearanceFlag(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_getAppearanceFlag(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  bool result;
  
  SWIG_check_num_args("getAppearanceFlag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAppearanceFlag",1,"LLCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_getAppearanceFlag",1,SWIGTYPE_p_LLCharacter);
  }
  
  result = (bool)(arg1)->getAppearanceFlag();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_getAppearanceSerialNum(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  U32 result;
  
  SWIG_check_num_args("getAppearanceSerialNum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAppearanceSerialNum",1,"LLCharacter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_getAppearanceSerialNum",1,SWIGTYPE_p_LLCharacter);
  }
  
  result = (U32)((LLCharacter const *)arg1)->getAppearanceSerialNum();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_setAppearanceSerialNum(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  U32 arg2 ;
  
  SWIG_check_num_args("setAppearanceSerialNum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAppearanceSerialNum",1,"LLCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setAppearanceSerialNum",2,"U32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_setAppearanceSerialNum",1,SWIGTYPE_p_LLCharacter);
  }
  
  arg2 = (U32)lua_tonumber(L, 2);
  (arg1)->setAppearanceSerialNum(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_getSkeletonSerialNum(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  U32 result;
  
  SWIG_check_num_args("getSkeletonSerialNum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSkeletonSerialNum",1,"LLCharacter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_getSkeletonSerialNum",1,SWIGTYPE_p_LLCharacter);
  }
  
  result = (U32)((LLCharacter const *)arg1)->getSkeletonSerialNum();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_setSkeletonSerialNum(lua_State* L) {
  int SWIG_arg = 0;
  LLCharacter *arg1 = (LLCharacter *) 0 ;
  U32 arg2 ;
  
  SWIG_check_num_args("setSkeletonSerialNum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setSkeletonSerialNum",1,"LLCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setSkeletonSerialNum",2,"U32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLCharacter,0))){
    SWIG_fail_ptr("LLCharacter_setSkeletonSerialNum",1,SWIGTYPE_p_LLCharacter);
  }
  
  arg2 = (U32)lua_tonumber(L, 2);
  (arg1)->setSkeletonSerialNum(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_sInstances_set(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< LLCharacter * > *arg1 = (std::vector< LLCharacter * > *) 0 ;
  
  SWIG_check_num_args("LLCharacter::sInstances",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLCharacter::sInstances",1,"std::vector< LLCharacter * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_LLCharacter_p_t,0))){
    SWIG_fail_ptr("LLCharacter_sInstances_set",1,SWIGTYPE_p_std__vectorT_LLCharacter_p_t);
  }
  
  LLCharacter::sInstances = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLCharacter_sInstances_get(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< LLCharacter * > *result = 0 ;
  
  SWIG_check_num_args("LLCharacter::sInstances",0,0)
  result = (std::vector< LLCharacter * > *)&LLCharacter::sInstances;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_LLCharacter_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LLCharacter(void *obj) {
LLCharacter *arg1 = (LLCharacter *) obj;
delete arg1;
}
static swig_lua_method swig_LLCharacter_methods[] = {
    {"getAnimationPrefix", _wrap_LLCharacter_getAnimationPrefix}, 
    {"getRootJoint", _wrap_LLCharacter_getRootJoint}, 
    {"getJoint", _wrap_LLCharacter_getJoint}, 
    {"getCharacterPosition", _wrap_LLCharacter_getCharacterPosition}, 
    {"getCharacterRotation", _wrap_LLCharacter_getCharacterRotation}, 
    {"getCharacterVelocity", _wrap_LLCharacter_getCharacterVelocity}, 
    {"getCharacterAngularVelocity", _wrap_LLCharacter_getCharacterAngularVelocity}, 
    {"getGround", _wrap_LLCharacter_getGround}, 
    {"allocateCharacterJoints", _wrap_LLCharacter_allocateCharacterJoints}, 
    {"getCharacterJoint", _wrap_LLCharacter_getCharacterJoint}, 
    {"getTimeDilation", _wrap_LLCharacter_getTimeDilation}, 
    {"getPixelArea", _wrap_LLCharacter_getPixelArea}, 
    {"getHeadMesh", _wrap_LLCharacter_getHeadMesh}, 
    {"getUpperBodyMesh", _wrap_LLCharacter_getUpperBodyMesh}, 
    {"getPosGlobalFromAgent", _wrap_LLCharacter_getPosGlobalFromAgent}, 
    {"getPosAgentFromGlobal", _wrap_LLCharacter_getPosAgentFromGlobal}, 
    {"updateVisualParams", _wrap_LLCharacter_updateVisualParams}, 
    {"addDebugText", _wrap_LLCharacter_addDebugText}, 
    {"getID", _wrap_LLCharacter_getID}, 
    {"registerMotion", _wrap_LLCharacter_registerMotion}, 
    {"removeMotion", _wrap_LLCharacter_removeMotion}, 
    {"createMotion", _wrap_LLCharacter_createMotion}, 
    {"findMotion", _wrap_LLCharacter_findMotion}, 
    {"startMotion", _wrap_LLCharacter_startMotion}, 
    {"stopMotion", _wrap_LLCharacter_stopMotion}, 
    {"isMotionActive", _wrap_LLCharacter_isMotionActive}, 
    {"requestStopMotion", _wrap_LLCharacter_requestStopMotion}, 
    {"updateMotions", _wrap_LLCharacter_updateMotions}, 
    {"requestPause", _wrap_LLCharacter_requestPause}, 
    {"areAnimationsPaused", _wrap_LLCharacter_areAnimationsPaused}, 
    {"setAnimTimeFactor", _wrap_LLCharacter_setAnimTimeFactor}, 
    {"setTimeStep", _wrap_LLCharacter_setTimeStep}, 
    {"getMotionController", _wrap_LLCharacter_getMotionController}, 
    {"flushAllMotions", _wrap_LLCharacter_flushAllMotions}, 
    {"deactivateAllMotions", _wrap_LLCharacter_deactivateAllMotions}, 
    {"dumpCharacter", _wrap_LLCharacter_dumpCharacter}, 
    {"getPreferredPelvisHeight", _wrap_LLCharacter_getPreferredPelvisHeight}, 
    {"getVolumePos", _wrap_LLCharacter_getVolumePos}, 
    {"findCollisionVolume", _wrap_LLCharacter_findCollisionVolume}, 
    {"getCollisionVolumeID", _wrap_LLCharacter_getCollisionVolumeID}, 
    {"setAnimationData", _wrap_LLCharacter_setAnimationData}, 
    {"getAnimationData", _wrap_LLCharacter_getAnimationData}, 
    {"removeAnimationData", _wrap_LLCharacter_removeAnimationData}, 
    {"addVisualParam", _wrap_LLCharacter_addVisualParam}, 
    {"addSharedVisualParam", _wrap_LLCharacter_addSharedVisualParam}, 
    {"setVisualParamWeightNoClamp", _wrap_LLCharacter_setVisualParamWeightNoClamp}, 
    {"setVisualParamWeight", _wrap_LLCharacter_setVisualParamWeight}, 
    {"getVisualParamWeight", _wrap_LLCharacter_getVisualParamWeight}, 
    {"clearVisualParamWeights", _wrap_LLCharacter_clearVisualParamWeights}, 
    {"visualParamWeightsAreDefault", _wrap_LLCharacter_visualParamWeightsAreDefault}, 
    {"getFirstVisualParam", _wrap_LLCharacter_getFirstVisualParam}, 
    {"getNextVisualParam", _wrap_LLCharacter_getNextVisualParam}, 
    {"getVisualParamID", _wrap_LLCharacter_getVisualParamID}, 
    {"getVisualParamCount", _wrap_LLCharacter_getVisualParamCount}, 
    {"getVisualParam", _wrap_LLCharacter_getVisualParam}, 
    {"getSex", _wrap_LLCharacter_getSex}, 
    {"setSex", _wrap_LLCharacter_setSex}, 
    {"setAppearanceFlag", _wrap_LLCharacter_setAppearanceFlag}, 
    {"getAppearanceFlag", _wrap_LLCharacter_getAppearanceFlag}, 
    {"getAppearanceSerialNum", _wrap_LLCharacter_getAppearanceSerialNum}, 
    {"setAppearanceSerialNum", _wrap_LLCharacter_setAppearanceSerialNum}, 
    {"getSkeletonSerialNum", _wrap_LLCharacter_getSkeletonSerialNum}, 
    {"setSkeletonSerialNum", _wrap_LLCharacter_setSkeletonSerialNum}, 
    {0,0}
};
static swig_lua_attribute swig_LLCharacter_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_LLCharacter_bases[] = {0};
static const char *swig_LLCharacter_base_names[] = {0};
static swig_lua_class _wrap_class_LLCharacter = { "LLCharacter", &SWIGTYPE_p_LLCharacter,0, swig_delete_LLCharacter, swig_LLCharacter_methods, swig_LLCharacter_attributes, swig_LLCharacter_bases, swig_LLCharacter_base_names };

static int _wrap_LENGTHOFVECTOR2_get(lua_State* L) {
  int SWIG_arg = 0;
  U32 result;
  
  SWIG_check_num_args("LENGTHOFVECTOR2",0,0)
  result = (U32)(U32)LENGTHOFVECTOR2;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector2_mV_set(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 *arg1 = (LLVector2 *) 0 ;
  F32 *arg2 ;
  
  SWIG_check_num_args("mV",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mV",1,"LLVector2 *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mV",2,"F32 [LENGTHOFVECTOR2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("LLVector2_mV_set",1,SWIGTYPE_p_LLVector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LLVector2_mV_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    F32 *b = (F32 *) arg1->mV;
    for (ii = 0; ii < (size_t)LENGTHOFVECTOR2; ii++) b[ii] = *((F32 *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector2_mV_get(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 *arg1 = (LLVector2 *) 0 ;
  F32 *result = 0 ;
  
  SWIG_check_num_args("mV",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mV",1,"LLVector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("LLVector2_mV_get",1,SWIGTYPE_p_LLVector2);
  }
  
  result = (F32 *)(F32 *) ((arg1)->mV);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector2_zero_set(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 *arg1 = (LLVector2 *) 0 ;
  
  SWIG_check_num_args("LLVector2::zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLVector2::zero",1,"LLVector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("LLVector2_zero_set",1,SWIGTYPE_p_LLVector2);
  }
  
  LLVector2::zero = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector2_zero_get(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 *result = 0 ;
  
  SWIG_check_num_args("LLVector2::zero",0,0)
  result = (LLVector2 *)&LLVector2::zero;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLVector2__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 *result = 0 ;
  
  SWIG_check_num_args("LLVector2",0,0)
  result = (LLVector2 *)new LLVector2();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLVector2__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  F32 arg1 ;
  F32 arg2 ;
  LLVector2 *result = 0 ;
  
  SWIG_check_num_args("LLVector2",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("LLVector2",1,"F32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LLVector2",2,"F32");
  arg1 = (F32)lua_tonumber(L, 1);
  arg2 = (F32)lua_tonumber(L, 2);
  result = (LLVector2 *)new LLVector2(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLVector2__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  F32 *arg1 = (F32 *) 0 ;
  LLVector2 *result = 0 ;
  
  SWIG_check_num_args("LLVector2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLVector2",1,"F32 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_LLVector2",1,SWIGTYPE_p_float);
  }
  
  result = (LLVector2 *)new LLVector2((F32 const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLVector2__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = 0 ;
  LLVector2 *result = 0 ;
  
  SWIG_check_num_args("LLVector2",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LLVector2",1,"LLVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("new_LLVector2",1,SWIGTYPE_p_LLVector3);
  }
  
  result = (LLVector2 *)new LLVector2((LLVector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLVector2(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_LLVector2__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_LLVector2__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_LLVector2__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_LLVector2__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_LLVector2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    LLVector2()\n"
    "    LLVector2(F32,F32)\n"
    "    LLVector2(F32 const *)\n"
    "    LLVector2(LLVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LLVector2_clear(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 *arg1 = (LLVector2 *) 0 ;
  
  SWIG_check_num_args("clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clear",1,"LLVector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("LLVector2_clear",1,SWIGTYPE_p_LLVector2);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector2_setZero(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 *arg1 = (LLVector2 *) 0 ;
  
  SWIG_check_num_args("setZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setZero",1,"LLVector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("LLVector2_setZero",1,SWIGTYPE_p_LLVector2);
  }
  
  (arg1)->setZero();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector2_clearVec(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 *arg1 = (LLVector2 *) 0 ;
  
  SWIG_check_num_args("clearVec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clearVec",1,"LLVector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("LLVector2_clearVec",1,SWIGTYPE_p_LLVector2);
  }
  
  (arg1)->clearVec();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector2_zeroVec(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 *arg1 = (LLVector2 *) 0 ;
  
  SWIG_check_num_args("zeroVec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("zeroVec",1,"LLVector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("LLVector2_zeroVec",1,SWIGTYPE_p_LLVector2);
  }
  
  (arg1)->zeroVec();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector2_set__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 *arg1 = (LLVector2 *) 0 ;
  F32 arg2 ;
  F32 arg3 ;
  
  SWIG_check_num_args("set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"LLVector2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("set",2,"F32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("set",3,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("LLVector2_set",1,SWIGTYPE_p_LLVector2);
  }
  
  arg2 = (F32)lua_tonumber(L, 2);
  arg3 = (F32)lua_tonumber(L, 3);
  (arg1)->set(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector2_set__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 *arg1 = (LLVector2 *) 0 ;
  LLVector2 *arg2 = 0 ;
  
  SWIG_check_num_args("set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"LLVector2 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("set",2,"LLVector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("LLVector2_set",1,SWIGTYPE_p_LLVector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("LLVector2_set",2,SWIGTYPE_p_LLVector2);
  }
  
  (arg1)->set((LLVector2 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector2_set__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 *arg1 = (LLVector2 *) 0 ;
  F32 *arg2 = (F32 *) 0 ;
  
  SWIG_check_num_args("set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"LLVector2 *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("set",2,"F32 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("LLVector2_set",1,SWIGTYPE_p_LLVector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LLVector2_set",2,SWIGTYPE_p_float);
  }
  
  (arg1)->set((F32 const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector2_set(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLVector2_set__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLVector2_set__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_LLVector2_set__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLVector2_set'\n"
    "  Possible C/C++ prototypes are:\n"
    "    set(LLVector2 *,F32,F32)\n"
    "    set(LLVector2 *,LLVector2 const &)\n"
    "    set(LLVector2 *,F32 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_LLVector2_setVec__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 *arg1 = (LLVector2 *) 0 ;
  F32 arg2 ;
  F32 arg3 ;
  
  SWIG_check_num_args("setVec",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVec",1,"LLVector2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setVec",2,"F32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setVec",3,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("LLVector2_setVec",1,SWIGTYPE_p_LLVector2);
  }
  
  arg2 = (F32)lua_tonumber(L, 2);
  arg3 = (F32)lua_tonumber(L, 3);
  (arg1)->setVec(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector2_setVec__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 *arg1 = (LLVector2 *) 0 ;
  LLVector2 *arg2 = 0 ;
  
  SWIG_check_num_args("setVec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVec",1,"LLVector2 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setVec",2,"LLVector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("LLVector2_setVec",1,SWIGTYPE_p_LLVector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("LLVector2_setVec",2,SWIGTYPE_p_LLVector2);
  }
  
  (arg1)->setVec((LLVector2 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector2_setVec__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 *arg1 = (LLVector2 *) 0 ;
  F32 *arg2 = (F32 *) 0 ;
  
  SWIG_check_num_args("setVec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVec",1,"LLVector2 *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("setVec",2,"F32 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("LLVector2_setVec",1,SWIGTYPE_p_LLVector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LLVector2_setVec",2,SWIGTYPE_p_float);
  }
  
  (arg1)->setVec((F32 const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector2_setVec(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLVector2_setVec__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLVector2_setVec__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_LLVector2_setVec__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLVector2_setVec'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setVec(LLVector2 *,F32,F32)\n"
    "    setVec(LLVector2 *,LLVector2 const &)\n"
    "    setVec(LLVector2 *,F32 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_LLVector2_length(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 *arg1 = (LLVector2 *) 0 ;
  F32 result;
  
  SWIG_check_num_args("length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("length",1,"LLVector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("LLVector2_length",1,SWIGTYPE_p_LLVector2);
  }
  
  result = (F32)((LLVector2 const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector2_lengthSquared(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 *arg1 = (LLVector2 *) 0 ;
  F32 result;
  
  SWIG_check_num_args("lengthSquared",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("lengthSquared",1,"LLVector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("LLVector2_lengthSquared",1,SWIGTYPE_p_LLVector2);
  }
  
  result = (F32)((LLVector2 const *)arg1)->lengthSquared();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector2_normalize(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 *arg1 = (LLVector2 *) 0 ;
  F32 result;
  
  SWIG_check_num_args("normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("normalize",1,"LLVector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("LLVector2_normalize",1,SWIGTYPE_p_LLVector2);
  }
  
  result = (F32)(arg1)->normalize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector2_magVec(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 *arg1 = (LLVector2 *) 0 ;
  F32 result;
  
  SWIG_check_num_args("magVec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("magVec",1,"LLVector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("LLVector2_magVec",1,SWIGTYPE_p_LLVector2);
  }
  
  result = (F32)((LLVector2 const *)arg1)->magVec();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector2_magVecSquared(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 *arg1 = (LLVector2 *) 0 ;
  F32 result;
  
  SWIG_check_num_args("magVecSquared",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("magVecSquared",1,"LLVector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("LLVector2_magVecSquared",1,SWIGTYPE_p_LLVector2);
  }
  
  result = (F32)((LLVector2 const *)arg1)->magVecSquared();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector2_normVec(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 *arg1 = (LLVector2 *) 0 ;
  F32 result;
  
  SWIG_check_num_args("normVec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("normVec",1,"LLVector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("LLVector2_normVec",1,SWIGTYPE_p_LLVector2);
  }
  
  result = (F32)(arg1)->normVec();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector2_abs(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 *arg1 = (LLVector2 *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("abs",1,"LLVector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("LLVector2_abs",1,SWIGTYPE_p_LLVector2);
  }
  
  result = (BOOL)(arg1)->abs();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector2_scaleVec(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 *arg1 = (LLVector2 *) 0 ;
  LLVector2 *arg2 = 0 ;
  LLVector2 *result = 0 ;
  
  SWIG_check_num_args("scaleVec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("scaleVec",1,"LLVector2 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("scaleVec",2,"LLVector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("LLVector2_scaleVec",1,SWIGTYPE_p_LLVector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("LLVector2_scaleVec",2,SWIGTYPE_p_LLVector2);
  }
  
  {
    LLVector2 const &_result_ref = (arg1)->scaleVec((LLVector2 const &)*arg2);
    result = (LLVector2 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector2_isNull(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 *arg1 = (LLVector2 *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("isNull",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isNull",1,"LLVector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("LLVector2_isNull",1,SWIGTYPE_p_LLVector2);
  }
  
  result = (BOOL)(arg1)->isNull();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector2_isExactlyZero(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 *arg1 = (LLVector2 *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("isExactlyZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isExactlyZero",1,"LLVector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("LLVector2_isExactlyZero",1,SWIGTYPE_p_LLVector2);
  }
  
  result = (BOOL)((LLVector2 const *)arg1)->isExactlyZero();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector2_x_set(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 *arg1 = (LLVector2 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("x",1,"LLVector2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("x",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("LLVector2_x_set",1,SWIGTYPE_p_LLVector2);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  LLVector2_x_set(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector2_x_get(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 *arg1 = (LLVector2 *) 0 ;
  float result;
  
  SWIG_check_num_args("x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("x",1,"LLVector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("LLVector2_x_get",1,SWIGTYPE_p_LLVector2);
  }
  
  result = (float)LLVector2_x_get(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector2_y_set(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 *arg1 = (LLVector2 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("y",1,"LLVector2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("y",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("LLVector2_y_set",1,SWIGTYPE_p_LLVector2);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  LLVector2_y_set(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector2_y_get(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 *arg1 = (LLVector2 *) 0 ;
  float result;
  
  SWIG_check_num_args("y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("y",1,"LLVector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("LLVector2_y_get",1,SWIGTYPE_p_LLVector2);
  }
  
  result = (float)LLVector2_y_get(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector2___tostring(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 *arg1 = (LLVector2 *) 0 ;
  std::string result;
  
  SWIG_check_num_args("__str__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("__str__",1,"LLVector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("LLVector2___tostring",1,SWIGTYPE_p_LLVector2);
  }
  
  result = LLVector2___str__(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LLVector2(void *obj) {
LLVector2 *arg1 = (LLVector2 *) obj;
delete arg1;
}
static swig_lua_method swig_LLVector2_methods[] = {
    {"clear", _wrap_LLVector2_clear}, 
    {"setZero", _wrap_LLVector2_setZero}, 
    {"clearVec", _wrap_LLVector2_clearVec}, 
    {"zeroVec", _wrap_LLVector2_zeroVec}, 
    {"set", _wrap_LLVector2_set}, 
    {"setVec", _wrap_LLVector2_setVec}, 
    {"length", _wrap_LLVector2_length}, 
    {"lengthSquared", _wrap_LLVector2_lengthSquared}, 
    {"normalize", _wrap_LLVector2_normalize}, 
    {"magVec", _wrap_LLVector2_magVec}, 
    {"magVecSquared", _wrap_LLVector2_magVecSquared}, 
    {"normVec", _wrap_LLVector2_normVec}, 
    {"abs", _wrap_LLVector2_abs}, 
    {"scaleVec", _wrap_LLVector2_scaleVec}, 
    {"isNull", _wrap_LLVector2_isNull}, 
    {"isExactlyZero", _wrap_LLVector2_isExactlyZero}, 
    {"__tostring", _wrap_LLVector2___tostring}, 
    {0,0}
};
static swig_lua_attribute swig_LLVector2_attributes[] = {
    { "mV", _wrap_LLVector2_mV_get, _wrap_LLVector2_mV_set},
    { "x", _wrap_LLVector2_x_get, _wrap_LLVector2_x_set},
    { "y", _wrap_LLVector2_y_get, _wrap_LLVector2_y_set},
    {0,0,0}
};
static swig_lua_class *swig_LLVector2_bases[] = {0};
static const char *swig_LLVector2_base_names[] = {0};
static swig_lua_class _wrap_class_LLVector2 = { "LLVector2", &SWIGTYPE_p_LLVector2,_wrap_new_LLVector2, swig_delete_LLVector2, swig_LLVector2_methods, swig_LLVector2_attributes, swig_LLVector2_bases, swig_LLVector2_base_names };

static int _wrap_angle_between__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 *arg1 = 0 ;
  LLVector2 *arg2 = 0 ;
  F32 result;
  
  SWIG_check_num_args("angle_between",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("angle_between",1,"LLVector2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("angle_between",2,"LLVector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("angle_between",1,SWIGTYPE_p_LLVector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("angle_between",2,SWIGTYPE_p_LLVector2);
  }
  
  result = (F32)angle_between((LLVector2 const &)*arg1,(LLVector2 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_are_parallel__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 *arg1 = 0 ;
  LLVector2 *arg2 = 0 ;
  F32 arg3 ;
  BOOL result;
  
  SWIG_check_num_args("are_parallel",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("are_parallel",1,"LLVector2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("are_parallel",2,"LLVector2 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("are_parallel",3,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("are_parallel",1,SWIGTYPE_p_LLVector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("are_parallel",2,SWIGTYPE_p_LLVector2);
  }
  
  arg3 = (F32)lua_tonumber(L, 3);
  result = (BOOL)are_parallel((LLVector2 const &)*arg1,(LLVector2 const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_are_parallel__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 *arg1 = 0 ;
  LLVector2 *arg2 = 0 ;
  BOOL result;
  
  SWIG_check_num_args("are_parallel",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("are_parallel",1,"LLVector2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("are_parallel",2,"LLVector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("are_parallel",1,SWIGTYPE_p_LLVector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("are_parallel",2,SWIGTYPE_p_LLVector2);
  }
  
  result = (BOOL)are_parallel((LLVector2 const &)*arg1,(LLVector2 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dist_vec__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 *arg1 = 0 ;
  LLVector2 *arg2 = 0 ;
  F32 result;
  
  SWIG_check_num_args("dist_vec",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("dist_vec",1,"LLVector2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dist_vec",2,"LLVector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("dist_vec",1,SWIGTYPE_p_LLVector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("dist_vec",2,SWIGTYPE_p_LLVector2);
  }
  
  result = (F32)dist_vec((LLVector2 const &)*arg1,(LLVector2 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dist_vec_squared__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 *arg1 = 0 ;
  LLVector2 *arg2 = 0 ;
  F32 result;
  
  SWIG_check_num_args("dist_vec_squared",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("dist_vec_squared",1,"LLVector2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dist_vec_squared",2,"LLVector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("dist_vec_squared",1,SWIGTYPE_p_LLVector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("dist_vec_squared",2,SWIGTYPE_p_LLVector2);
  }
  
  result = (F32)dist_vec_squared((LLVector2 const &)*arg1,(LLVector2 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dist_vec_squared2D__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 *arg1 = 0 ;
  LLVector2 *arg2 = 0 ;
  F32 result;
  
  SWIG_check_num_args("dist_vec_squared2D",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("dist_vec_squared2D",1,"LLVector2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dist_vec_squared2D",2,"LLVector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("dist_vec_squared2D",1,SWIGTYPE_p_LLVector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("dist_vec_squared2D",2,SWIGTYPE_p_LLVector2);
  }
  
  result = (F32)dist_vec_squared2D((LLVector2 const &)*arg1,(LLVector2 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lerp__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 *arg1 = 0 ;
  LLVector2 *arg2 = 0 ;
  F32 arg3 ;
  LLVector2 result;
  
  SWIG_check_num_args("lerp",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("lerp",1,"LLVector2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("lerp",2,"LLVector2 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("lerp",3,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("lerp",1,SWIGTYPE_p_LLVector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("lerp",2,SWIGTYPE_p_LLVector2);
  }
  
  arg3 = (F32)lua_tonumber(L, 3);
  result = lerp((LLVector2 const &)*arg1,(LLVector2 const &)*arg2,arg3);
  {
    LLVector2 * resultptr = new LLVector2((const LLVector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLVector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_update_min_max__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 *arg1 = 0 ;
  LLVector2 *arg2 = 0 ;
  LLVector2 *arg3 = 0 ;
  
  SWIG_check_num_args("update_min_max",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("update_min_max",1,"LLVector2 &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("update_min_max",2,"LLVector2 &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("update_min_max",3,"LLVector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("update_min_max",1,SWIGTYPE_p_LLVector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("update_min_max",2,SWIGTYPE_p_LLVector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("update_min_max",3,SWIGTYPE_p_LLVector2);
  }
  
  update_min_max(*arg1,*arg2,(LLVector2 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LENGTHOFVECTOR3_get(lua_State* L) {
  int SWIG_arg = 0;
  U32 result;
  
  SWIG_check_num_args("LENGTHOFVECTOR3",0,0)
  result = (U32)(U32)LENGTHOFVECTOR3;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_mV_set(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  F32 *arg2 ;
  
  SWIG_check_num_args("mV",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mV",1,"LLVector3 *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mV",2,"F32 [LENGTHOFVECTOR3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_mV_set",1,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LLVector3_mV_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    F32 *b = (F32 *) arg1->mV;
    for (ii = 0; ii < (size_t)LENGTHOFVECTOR3; ii++) b[ii] = *((F32 *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_mV_get(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  F32 *result = 0 ;
  
  SWIG_check_num_args("mV",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mV",1,"LLVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_mV_get",1,SWIGTYPE_p_LLVector3);
  }
  
  result = (F32 *)(F32 *) ((arg1)->mV);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_zero_get(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *result = 0 ;
  
  SWIG_check_num_args("LLVector3::zero",0,0)
  result = (LLVector3 *)&LLVector3::zero;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_x_axis_get(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *result = 0 ;
  
  SWIG_check_num_args("LLVector3::x_axis",0,0)
  result = (LLVector3 *)&LLVector3::x_axis;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_y_axis_get(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *result = 0 ;
  
  SWIG_check_num_args("LLVector3::y_axis",0,0)
  result = (LLVector3 *)&LLVector3::y_axis;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_z_axis_get(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *result = 0 ;
  
  SWIG_check_num_args("LLVector3::z_axis",0,0)
  result = (LLVector3 *)&LLVector3::z_axis;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_x_axis_neg_get(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *result = 0 ;
  
  SWIG_check_num_args("LLVector3::x_axis_neg",0,0)
  result = (LLVector3 *)&LLVector3::x_axis_neg;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_y_axis_neg_get(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *result = 0 ;
  
  SWIG_check_num_args("LLVector3::y_axis_neg",0,0)
  result = (LLVector3 *)&LLVector3::y_axis_neg;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_z_axis_neg_get(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *result = 0 ;
  
  SWIG_check_num_args("LLVector3::z_axis_neg",0,0)
  result = (LLVector3 *)&LLVector3::z_axis_neg;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_all_one_get(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *result = 0 ;
  
  SWIG_check_num_args("LLVector3::all_one",0,0)
  result = (LLVector3 *)&LLVector3::all_one;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLVector3__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *result = 0 ;
  
  SWIG_check_num_args("LLVector3",0,0)
  result = (LLVector3 *)new LLVector3();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLVector3__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  F32 arg1 ;
  F32 arg2 ;
  F32 arg3 ;
  LLVector3 *result = 0 ;
  
  SWIG_check_num_args("LLVector3",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("LLVector3",1,"F32 const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LLVector3",2,"F32 const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("LLVector3",3,"F32 const");
  arg1 = (F32 const)lua_tonumber(L, 1);
  arg2 = (F32 const)lua_tonumber(L, 2);
  arg3 = (F32 const)lua_tonumber(L, 3);
  result = (LLVector3 *)new LLVector3(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLVector3__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  F32 *arg1 = (F32 *) 0 ;
  LLVector3 *result = 0 ;
  
  SWIG_check_num_args("LLVector3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLVector3",1,"F32 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_LLVector3",1,SWIGTYPE_p_float);
  }
  
  result = (LLVector3 *)new LLVector3((F32 const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLVector3__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 *arg1 = 0 ;
  LLVector3 *result = 0 ;
  
  SWIG_check_num_args("LLVector3",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LLVector3",1,"LLVector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("new_LLVector3",1,SWIGTYPE_p_LLVector2);
  }
  
  result = (LLVector3 *)new LLVector3((LLVector2 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLVector3__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3d *arg1 = 0 ;
  LLVector3 *result = 0 ;
  
  SWIG_check_num_args("LLVector3",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LLVector3",1,"LLVector3d const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3d,0))){
    SWIG_fail_ptr("new_LLVector3",1,SWIGTYPE_p_LLVector3d);
  }
  
  result = (LLVector3 *)new LLVector3((LLVector3d const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLVector3__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = 0 ;
  LLVector3 *result = 0 ;
  
  SWIG_check_num_args("LLVector3",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LLVector3",1,"LLVector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("new_LLVector3",1,SWIGTYPE_p_LLVector4);
  }
  
  result = (LLVector3 *)new LLVector3((LLVector4 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLVector3__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  LLSD *arg1 = 0 ;
  LLVector3 *result = 0 ;
  
  SWIG_check_num_args("LLVector3",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LLVector3",1,"LLSD const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLSD,0))){
    SWIG_fail_ptr("new_LLVector3",1,SWIGTYPE_p_LLSD);
  }
  
  result = (LLVector3 *)new LLVector3((LLSD const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLVector3(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_LLVector3__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_LLVector3__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_LLVector3__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector3d, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_LLVector3__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_LLVector3__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLSD, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_LLVector3__SWIG_6(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_LLVector3__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_LLVector3'\n"
    "  Possible C/C++ prototypes are:\n"
    "    LLVector3()\n"
    "    LLVector3(F32 const,F32 const,F32 const)\n"
    "    LLVector3(F32 const *)\n"
    "    LLVector3(LLVector2 const &)\n"
    "    LLVector3(LLVector3d const &)\n"
    "    LLVector3(LLVector4 const &)\n"
    "    LLVector3(LLSD const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LLVector3_getValue(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  LLSD result;
  
  SWIG_check_num_args("getValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getValue",1,"LLVector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_getValue",1,SWIGTYPE_p_LLVector3);
  }
  
  result = ((LLVector3 const *)arg1)->getValue();
  {
    LLSD * resultptr = new LLSD((const LLSD &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLSD,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_setValue(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  LLSD *arg2 = 0 ;
  
  SWIG_check_num_args("setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValue",1,"LLVector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setValue",2,"LLSD const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_setValue",1,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLSD,0))){
    SWIG_fail_ptr("LLVector3_setValue",2,SWIGTYPE_p_LLSD);
  }
  
  (arg1)->setValue((LLSD const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_isFinite(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("isFinite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isFinite",1,"LLVector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_isFinite",1,SWIGTYPE_p_LLVector3);
  }
  
  result = (BOOL)((LLVector3 const *)arg1)->isFinite();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_clamp(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  F32 arg2 ;
  F32 arg3 ;
  BOOL result;
  
  SWIG_check_num_args("clamp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clamp",1,"LLVector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("clamp",2,"F32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("clamp",3,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_clamp",1,SWIGTYPE_p_LLVector3);
  }
  
  arg2 = (F32)lua_tonumber(L, 2);
  arg3 = (F32)lua_tonumber(L, 3);
  result = (BOOL)(arg1)->clamp(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_clampLength(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  F32 arg2 ;
  BOOL result;
  
  SWIG_check_num_args("clampLength",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clampLength",1,"LLVector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("clampLength",2,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_clampLength",1,SWIGTYPE_p_LLVector3);
  }
  
  arg2 = (F32)lua_tonumber(L, 2);
  result = (BOOL)(arg1)->clampLength(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_quantize16(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  F32 arg2 ;
  F32 arg3 ;
  F32 arg4 ;
  F32 arg5 ;
  
  SWIG_check_num_args("quantize16",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("quantize16",1,"LLVector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("quantize16",2,"F32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("quantize16",3,"F32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("quantize16",4,"F32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("quantize16",5,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_quantize16",1,SWIGTYPE_p_LLVector3);
  }
  
  arg2 = (F32)lua_tonumber(L, 2);
  arg3 = (F32)lua_tonumber(L, 3);
  arg4 = (F32)lua_tonumber(L, 4);
  arg5 = (F32)lua_tonumber(L, 5);
  (arg1)->quantize16(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_quantize8(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  F32 arg2 ;
  F32 arg3 ;
  F32 arg4 ;
  F32 arg5 ;
  
  SWIG_check_num_args("quantize8",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("quantize8",1,"LLVector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("quantize8",2,"F32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("quantize8",3,"F32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("quantize8",4,"F32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("quantize8",5,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_quantize8",1,SWIGTYPE_p_LLVector3);
  }
  
  arg2 = (F32)lua_tonumber(L, 2);
  arg3 = (F32)lua_tonumber(L, 3);
  arg4 = (F32)lua_tonumber(L, 4);
  arg5 = (F32)lua_tonumber(L, 5);
  (arg1)->quantize8(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_snap(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  S32 arg2 ;
  
  SWIG_check_num_args("snap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("snap",1,"LLVector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("snap",2,"S32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_snap",1,SWIGTYPE_p_LLVector3);
  }
  
  arg2 = (S32)lua_tonumber(L, 2);
  (arg1)->snap(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_abs(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("abs",1,"LLVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_abs",1,SWIGTYPE_p_LLVector3);
  }
  
  result = (BOOL)(arg1)->abs();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_clear(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  
  SWIG_check_num_args("clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clear",1,"LLVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_clear",1,SWIGTYPE_p_LLVector3);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_setZero(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  
  SWIG_check_num_args("setZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setZero",1,"LLVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_setZero",1,SWIGTYPE_p_LLVector3);
  }
  
  (arg1)->setZero();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_clearVec(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  
  SWIG_check_num_args("clearVec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clearVec",1,"LLVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_clearVec",1,SWIGTYPE_p_LLVector3);
  }
  
  (arg1)->clearVec();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_zeroVec(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  
  SWIG_check_num_args("zeroVec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("zeroVec",1,"LLVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_zeroVec",1,SWIGTYPE_p_LLVector3);
  }
  
  (arg1)->zeroVec();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_set__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  F32 arg2 ;
  F32 arg3 ;
  F32 arg4 ;
  
  SWIG_check_num_args("set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"LLVector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("set",2,"F32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("set",3,"F32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("set",4,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_set",1,SWIGTYPE_p_LLVector3);
  }
  
  arg2 = (F32)lua_tonumber(L, 2);
  arg3 = (F32)lua_tonumber(L, 3);
  arg4 = (F32)lua_tonumber(L, 4);
  (arg1)->set(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_set__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  LLVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"LLVector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("set",2,"LLVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_set",1,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_set",2,SWIGTYPE_p_LLVector3);
  }
  
  (arg1)->set((LLVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_set__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  F32 *arg2 = (F32 *) 0 ;
  
  SWIG_check_num_args("set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"LLVector3 *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("set",2,"F32 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_set",1,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LLVector3_set",2,SWIGTYPE_p_float);
  }
  
  (arg1)->set((F32 const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_set__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  LLVector4 *arg2 = 0 ;
  LLVector3 *result = 0 ;
  
  SWIG_check_num_args("set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"LLVector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("set",2,"LLVector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_set",1,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector3_set",2,SWIGTYPE_p_LLVector4);
  }
  
  {
    LLVector3 const &_result_ref = (arg1)->set((LLVector4 const &)*arg2);
    result = (LLVector3 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_set__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  LLVector3d *arg2 = 0 ;
  LLVector3 *result = 0 ;
  
  SWIG_check_num_args("set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"LLVector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("set",2,"LLVector3d const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_set",1,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3d,0))){
    SWIG_fail_ptr("LLVector3_set",2,SWIGTYPE_p_LLVector3d);
  }
  
  {
    LLVector3 const &_result_ref = (arg1)->set((LLVector3d const &)*arg2);
    result = (LLVector3 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_set(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLVector3_set__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLVector3_set__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector4, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLVector3_set__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3d, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLVector3_set__SWIG_4(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_LLVector3_set__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLVector3_set'\n"
    "  Possible C/C++ prototypes are:\n"
    "    set(LLVector3 *,F32,F32,F32)\n"
    "    set(LLVector3 *,LLVector3 const &)\n"
    "    set(LLVector3 *,F32 const *)\n"
    "    set(LLVector3 *,LLVector4 const &)\n"
    "    set(LLVector3 *,LLVector3d const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LLVector3_setVec__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  F32 arg2 ;
  F32 arg3 ;
  F32 arg4 ;
  
  SWIG_check_num_args("setVec",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVec",1,"LLVector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setVec",2,"F32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setVec",3,"F32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setVec",4,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_setVec",1,SWIGTYPE_p_LLVector3);
  }
  
  arg2 = (F32)lua_tonumber(L, 2);
  arg3 = (F32)lua_tonumber(L, 3);
  arg4 = (F32)lua_tonumber(L, 4);
  (arg1)->setVec(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_setVec__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  LLVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("setVec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVec",1,"LLVector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setVec",2,"LLVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_setVec",1,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_setVec",2,SWIGTYPE_p_LLVector3);
  }
  
  (arg1)->setVec((LLVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_setVec__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  F32 *arg2 = (F32 *) 0 ;
  
  SWIG_check_num_args("setVec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVec",1,"LLVector3 *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("setVec",2,"F32 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_setVec",1,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LLVector3_setVec",2,SWIGTYPE_p_float);
  }
  
  (arg1)->setVec((F32 const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_setVec__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  LLVector4 *arg2 = 0 ;
  LLVector3 *result = 0 ;
  
  SWIG_check_num_args("setVec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVec",1,"LLVector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setVec",2,"LLVector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_setVec",1,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector3_setVec",2,SWIGTYPE_p_LLVector4);
  }
  
  {
    LLVector3 const &_result_ref = (arg1)->setVec((LLVector4 const &)*arg2);
    result = (LLVector3 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_setVec__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  LLVector3d *arg2 = 0 ;
  LLVector3 *result = 0 ;
  
  SWIG_check_num_args("setVec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVec",1,"LLVector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setVec",2,"LLVector3d const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_setVec",1,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3d,0))){
    SWIG_fail_ptr("LLVector3_setVec",2,SWIGTYPE_p_LLVector3d);
  }
  
  {
    LLVector3 const &_result_ref = (arg1)->setVec((LLVector3d const &)*arg2);
    result = (LLVector3 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_setVec(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLVector3_setVec__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLVector3_setVec__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector4, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLVector3_setVec__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3d, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLVector3_setVec__SWIG_4(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_LLVector3_setVec__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLVector3_setVec'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setVec(LLVector3 *,F32,F32,F32)\n"
    "    setVec(LLVector3 *,LLVector3 const &)\n"
    "    setVec(LLVector3 *,F32 const *)\n"
    "    setVec(LLVector3 *,LLVector4 const &)\n"
    "    setVec(LLVector3 *,LLVector3d const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LLVector3_length(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  F32 result;
  
  SWIG_check_num_args("length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("length",1,"LLVector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_length",1,SWIGTYPE_p_LLVector3);
  }
  
  result = (F32)((LLVector3 const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_lengthSquared(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  F32 result;
  
  SWIG_check_num_args("lengthSquared",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("lengthSquared",1,"LLVector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_lengthSquared",1,SWIGTYPE_p_LLVector3);
  }
  
  result = (F32)((LLVector3 const *)arg1)->lengthSquared();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_magVec(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  F32 result;
  
  SWIG_check_num_args("magVec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("magVec",1,"LLVector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_magVec",1,SWIGTYPE_p_LLVector3);
  }
  
  result = (F32)((LLVector3 const *)arg1)->magVec();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_magVecSquared(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  F32 result;
  
  SWIG_check_num_args("magVecSquared",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("magVecSquared",1,"LLVector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_magVecSquared",1,SWIGTYPE_p_LLVector3);
  }
  
  result = (F32)((LLVector3 const *)arg1)->magVecSquared();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_normalize(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  F32 result;
  
  SWIG_check_num_args("normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("normalize",1,"LLVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_normalize",1,SWIGTYPE_p_LLVector3);
  }
  
  result = (F32)(arg1)->normalize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_normVec(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  F32 result;
  
  SWIG_check_num_args("normVec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("normVec",1,"LLVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_normVec",1,SWIGTYPE_p_LLVector3);
  }
  
  result = (F32)(arg1)->normVec();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_inRange(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  F32 arg2 ;
  F32 arg3 ;
  BOOL result;
  
  SWIG_check_num_args("inRange",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inRange",1,"LLVector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inRange",2,"F32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inRange",3,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_inRange",1,SWIGTYPE_p_LLVector3);
  }
  
  arg2 = (F32)lua_tonumber(L, 2);
  arg3 = (F32)lua_tonumber(L, 3);
  result = (BOOL)((LLVector3 const *)arg1)->inRange(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_rotVec__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  F32 arg2 ;
  LLVector3 *arg3 = 0 ;
  LLVector3 *result = 0 ;
  
  SWIG_check_num_args("rotVec",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rotVec",1,"LLVector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rotVec",2,"F32");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("rotVec",3,"LLVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_rotVec",1,SWIGTYPE_p_LLVector3);
  }
  
  arg2 = (F32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_rotVec",3,SWIGTYPE_p_LLVector3);
  }
  
  {
    LLVector3 const &_result_ref = (arg1)->rotVec(arg2,(LLVector3 const &)*arg3);
    result = (LLVector3 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_rotVec__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  F32 arg2 ;
  F32 arg3 ;
  F32 arg4 ;
  F32 arg5 ;
  LLVector3 *result = 0 ;
  
  SWIG_check_num_args("rotVec",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rotVec",1,"LLVector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rotVec",2,"F32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rotVec",3,"F32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rotVec",4,"F32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rotVec",5,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_rotVec",1,SWIGTYPE_p_LLVector3);
  }
  
  arg2 = (F32)lua_tonumber(L, 2);
  arg3 = (F32)lua_tonumber(L, 3);
  arg4 = (F32)lua_tonumber(L, 4);
  arg5 = (F32)lua_tonumber(L, 5);
  {
    LLVector3 const &_result_ref = (arg1)->rotVec(arg2,arg3,arg4,arg5);
    result = (LLVector3 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_rotVec__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  LLMatrix3 *arg2 = 0 ;
  LLVector3 *result = 0 ;
  
  SWIG_check_num_args("rotVec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rotVec",1,"LLVector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("rotVec",2,"LLMatrix3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_rotVec",1,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLMatrix3,0))){
    SWIG_fail_ptr("LLVector3_rotVec",2,SWIGTYPE_p_LLMatrix3);
  }
  
  {
    LLVector3 const &_result_ref = (arg1)->rotVec((LLMatrix3 const &)*arg2);
    result = (LLVector3 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_rotVec__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  LLQuaternion *arg2 = 0 ;
  LLVector3 *result = 0 ;
  
  SWIG_check_num_args("rotVec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rotVec",1,"LLVector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("rotVec",2,"LLQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_rotVec",1,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLQuaternion,0))){
    SWIG_fail_ptr("LLVector3_rotVec",2,SWIGTYPE_p_LLQuaternion);
  }
  
  {
    LLVector3 const &_result_ref = (arg1)->rotVec((LLQuaternion const &)*arg2);
    result = (LLVector3 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_rotVec(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLMatrix3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLVector3_rotVec__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLQuaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLVector3_rotVec__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_LLVector3_rotVec__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_LLVector3_rotVec__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLVector3_rotVec'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rotVec(LLVector3 *,F32,LLVector3 const &)\n"
    "    rotVec(LLVector3 *,F32,F32,F32,F32)\n"
    "    rotVec(LLVector3 *,LLMatrix3 const &)\n"
    "    rotVec(LLVector3 *,LLQuaternion const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LLVector3_scaleVec(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  LLVector3 *arg2 = 0 ;
  LLVector3 *result = 0 ;
  
  SWIG_check_num_args("scaleVec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("scaleVec",1,"LLVector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("scaleVec",2,"LLVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_scaleVec",1,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_scaleVec",2,SWIGTYPE_p_LLVector3);
  }
  
  {
    LLVector3 const &_result_ref = (arg1)->scaleVec((LLVector3 const &)*arg2);
    result = (LLVector3 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_scaledVec(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  LLVector3 *arg2 = 0 ;
  LLVector3 result;
  
  SWIG_check_num_args("scaledVec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("scaledVec",1,"LLVector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("scaledVec",2,"LLVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_scaledVec",1,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_scaledVec",2,SWIGTYPE_p_LLVector3);
  }
  
  result = ((LLVector3 const *)arg1)->scaledVec((LLVector3 const &)*arg2);
  {
    LLVector3 * resultptr = new LLVector3((const LLVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_isNull(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("isNull",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isNull",1,"LLVector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_isNull",1,SWIGTYPE_p_LLVector3);
  }
  
  result = (BOOL)((LLVector3 const *)arg1)->isNull();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_isExactlyZero(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("isExactlyZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isExactlyZero",1,"LLVector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_isExactlyZero",1,SWIGTYPE_p_LLVector3);
  }
  
  result = (BOOL)((LLVector3 const *)arg1)->isExactlyZero();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_x_set(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("x",1,"LLVector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("x",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_x_set",1,SWIGTYPE_p_LLVector3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  LLVector3_x_set(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_x_get(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  float result;
  
  SWIG_check_num_args("x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("x",1,"LLVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_x_get",1,SWIGTYPE_p_LLVector3);
  }
  
  result = (float)LLVector3_x_get(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_y_set(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("y",1,"LLVector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("y",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_y_set",1,SWIGTYPE_p_LLVector3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  LLVector3_y_set(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_y_get(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  float result;
  
  SWIG_check_num_args("y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("y",1,"LLVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_y_get",1,SWIGTYPE_p_LLVector3);
  }
  
  result = (float)LLVector3_y_get(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_z_set(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("z",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("z",1,"LLVector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("z",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_z_set",1,SWIGTYPE_p_LLVector3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  LLVector3_z_set(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_z_get(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  float result;
  
  SWIG_check_num_args("z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("z",1,"LLVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_z_get",1,SWIGTYPE_p_LLVector3);
  }
  
  result = (float)LLVector3_z_get(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_r_set(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("r",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("r",1,"LLVector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("r",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_r_set",1,SWIGTYPE_p_LLVector3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  LLVector3_r_set(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_r_get(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  float result;
  
  SWIG_check_num_args("r",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("r",1,"LLVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_r_get",1,SWIGTYPE_p_LLVector3);
  }
  
  result = (float)LLVector3_r_get(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_g_set(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("g",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("g",1,"LLVector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("g",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_g_set",1,SWIGTYPE_p_LLVector3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  LLVector3_g_set(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_g_get(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  float result;
  
  SWIG_check_num_args("g",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("g",1,"LLVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_g_get",1,SWIGTYPE_p_LLVector3);
  }
  
  result = (float)LLVector3_g_get(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_b_set(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("b",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("b",1,"LLVector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("b",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_b_set",1,SWIGTYPE_p_LLVector3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  LLVector3_b_set(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3_b_get(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  float result;
  
  SWIG_check_num_args("b",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("b",1,"LLVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3_b_get",1,SWIGTYPE_p_LLVector3);
  }
  
  result = (float)LLVector3_b_get(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector3___tostring(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = (LLVector3 *) 0 ;
  std::string result;
  
  SWIG_check_num_args("__str__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("__str__",1,"LLVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector3___tostring",1,SWIGTYPE_p_LLVector3);
  }
  
  result = LLVector3___str__(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LLVector3(void *obj) {
LLVector3 *arg1 = (LLVector3 *) obj;
delete arg1;
}
static swig_lua_method swig_LLVector3_methods[] = {
    {"getValue", _wrap_LLVector3_getValue}, 
    {"setValue", _wrap_LLVector3_setValue}, 
    {"isFinite", _wrap_LLVector3_isFinite}, 
    {"clamp", _wrap_LLVector3_clamp}, 
    {"clampLength", _wrap_LLVector3_clampLength}, 
    {"quantize16", _wrap_LLVector3_quantize16}, 
    {"quantize8", _wrap_LLVector3_quantize8}, 
    {"snap", _wrap_LLVector3_snap}, 
    {"abs", _wrap_LLVector3_abs}, 
    {"clear", _wrap_LLVector3_clear}, 
    {"setZero", _wrap_LLVector3_setZero}, 
    {"clearVec", _wrap_LLVector3_clearVec}, 
    {"zeroVec", _wrap_LLVector3_zeroVec}, 
    {"set", _wrap_LLVector3_set}, 
    {"setVec", _wrap_LLVector3_setVec}, 
    {"length", _wrap_LLVector3_length}, 
    {"lengthSquared", _wrap_LLVector3_lengthSquared}, 
    {"magVec", _wrap_LLVector3_magVec}, 
    {"magVecSquared", _wrap_LLVector3_magVecSquared}, 
    {"normalize", _wrap_LLVector3_normalize}, 
    {"normVec", _wrap_LLVector3_normVec}, 
    {"inRange", _wrap_LLVector3_inRange}, 
    {"rotVec", _wrap_LLVector3_rotVec}, 
    {"scaleVec", _wrap_LLVector3_scaleVec}, 
    {"scaledVec", _wrap_LLVector3_scaledVec}, 
    {"isNull", _wrap_LLVector3_isNull}, 
    {"isExactlyZero", _wrap_LLVector3_isExactlyZero}, 
    {"__tostring", _wrap_LLVector3___tostring}, 
    {0,0}
};
static swig_lua_attribute swig_LLVector3_attributes[] = {
    { "mV", _wrap_LLVector3_mV_get, _wrap_LLVector3_mV_set},
    { "x", _wrap_LLVector3_x_get, _wrap_LLVector3_x_set},
    { "y", _wrap_LLVector3_y_get, _wrap_LLVector3_y_set},
    { "z", _wrap_LLVector3_z_get, _wrap_LLVector3_z_set},
    { "r", _wrap_LLVector3_r_get, _wrap_LLVector3_r_set},
    { "g", _wrap_LLVector3_g_get, _wrap_LLVector3_g_set},
    { "b", _wrap_LLVector3_b_get, _wrap_LLVector3_b_set},
    {0,0,0}
};
static swig_lua_class *swig_LLVector3_bases[] = {0};
static const char *swig_LLVector3_base_names[] = {0};
static swig_lua_class _wrap_class_LLVector3 = { "LLVector3", &SWIGTYPE_p_LLVector3,_wrap_new_LLVector3, swig_delete_LLVector3, swig_LLVector3_methods, swig_LLVector3_attributes, swig_LLVector3_bases, swig_LLVector3_base_names };

static int _wrap_angle_between__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = 0 ;
  LLVector3 *arg2 = 0 ;
  F32 result;
  
  SWIG_check_num_args("angle_between",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("angle_between",1,"LLVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("angle_between",2,"LLVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("angle_between",1,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("angle_between",2,SWIGTYPE_p_LLVector3);
  }
  
  result = (F32)angle_between((LLVector3 const &)*arg1,(LLVector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_are_parallel__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = 0 ;
  LLVector3 *arg2 = 0 ;
  F32 arg3 ;
  BOOL result;
  
  SWIG_check_num_args("are_parallel",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("are_parallel",1,"LLVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("are_parallel",2,"LLVector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("are_parallel",3,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("are_parallel",1,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("are_parallel",2,SWIGTYPE_p_LLVector3);
  }
  
  arg3 = (F32)lua_tonumber(L, 3);
  result = (BOOL)are_parallel((LLVector3 const &)*arg1,(LLVector3 const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_are_parallel__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = 0 ;
  LLVector3 *arg2 = 0 ;
  BOOL result;
  
  SWIG_check_num_args("are_parallel",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("are_parallel",1,"LLVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("are_parallel",2,"LLVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("are_parallel",1,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("are_parallel",2,SWIGTYPE_p_LLVector3);
  }
  
  result = (BOOL)are_parallel((LLVector3 const &)*arg1,(LLVector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dist_vec__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = 0 ;
  LLVector3 *arg2 = 0 ;
  F32 result;
  
  SWIG_check_num_args("dist_vec",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("dist_vec",1,"LLVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dist_vec",2,"LLVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("dist_vec",1,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("dist_vec",2,SWIGTYPE_p_LLVector3);
  }
  
  result = (F32)dist_vec((LLVector3 const &)*arg1,(LLVector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dist_vec_squared__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = 0 ;
  LLVector3 *arg2 = 0 ;
  F32 result;
  
  SWIG_check_num_args("dist_vec_squared",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("dist_vec_squared",1,"LLVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dist_vec_squared",2,"LLVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("dist_vec_squared",1,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("dist_vec_squared",2,SWIGTYPE_p_LLVector3);
  }
  
  result = (F32)dist_vec_squared((LLVector3 const &)*arg1,(LLVector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dist_vec_squared2D__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = 0 ;
  LLVector3 *arg2 = 0 ;
  F32 result;
  
  SWIG_check_num_args("dist_vec_squared2D",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("dist_vec_squared2D",1,"LLVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dist_vec_squared2D",2,"LLVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("dist_vec_squared2D",1,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("dist_vec_squared2D",2,SWIGTYPE_p_LLVector3);
  }
  
  result = (F32)dist_vec_squared2D((LLVector3 const &)*arg1,(LLVector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dist_vec_squared2D(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_dist_vec_squared2D__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_dist_vec_squared2D__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'dist_vec_squared2D'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dist_vec_squared2D(LLVector2 const &,LLVector2 const &)\n"
    "    dist_vec_squared2D(LLVector3 const &,LLVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_projected_vec(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = 0 ;
  LLVector3 *arg2 = 0 ;
  LLVector3 result;
  
  SWIG_check_num_args("projected_vec",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("projected_vec",1,"LLVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("projected_vec",2,"LLVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("projected_vec",1,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("projected_vec",2,SWIGTYPE_p_LLVector3);
  }
  
  result = projected_vec((LLVector3 const &)*arg1,(LLVector3 const &)*arg2);
  {
    LLVector3 * resultptr = new LLVector3((const LLVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lerp__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = 0 ;
  LLVector3 *arg2 = 0 ;
  F32 arg3 ;
  LLVector3 result;
  
  SWIG_check_num_args("lerp",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("lerp",1,"LLVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("lerp",2,"LLVector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("lerp",3,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("lerp",1,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("lerp",2,SWIGTYPE_p_LLVector3);
  }
  
  arg3 = (F32)lua_tonumber(L, 3);
  result = lerp((LLVector3 const &)*arg1,(LLVector3 const &)*arg2,arg3);
  {
    LLVector3 * resultptr = new LLVector3((const LLVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_update_min_max__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = 0 ;
  LLVector3 *arg2 = 0 ;
  LLVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("update_min_max",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("update_min_max",1,"LLVector3 &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("update_min_max",2,"LLVector3 &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("update_min_max",3,"LLVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("update_min_max",1,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("update_min_max",2,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("update_min_max",3,SWIGTYPE_p_LLVector3);
  }
  
  update_min_max(*arg1,*arg2,(LLVector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_update_min_max(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_LLVector2, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_update_min_max__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_update_min_max__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'update_min_max'\n"
    "  Possible C/C++ prototypes are:\n"
    "    update_min_max(LLVector2 &,LLVector2 &,LLVector2 const &)\n"
    "    update_min_max(LLVector3 &,LLVector3 &,LLVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LENGTHOFVECTOR4_get(lua_State* L) {
  int SWIG_arg = 0;
  U32 result;
  
  SWIG_check_num_args("LENGTHOFVECTOR4",0,0)
  result = (U32)(U32)LENGTHOFVECTOR4;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_mV_set(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  F32 *arg2 ;
  
  SWIG_check_num_args("mV",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mV",1,"LLVector4 *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mV",2,"F32 [LENGTHOFVECTOR4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_mV_set",1,SWIGTYPE_p_LLVector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LLVector4_mV_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    F32 *b = (F32 *) arg1->mV;
    for (ii = 0; ii < (size_t)LENGTHOFVECTOR4; ii++) b[ii] = *((F32 *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_mV_get(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  F32 *result = 0 ;
  
  SWIG_check_num_args("mV",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mV",1,"LLVector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_mV_get",1,SWIGTYPE_p_LLVector4);
  }
  
  result = (F32 *)(F32 *) ((arg1)->mV);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLVector4__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *result = 0 ;
  
  SWIG_check_num_args("LLVector4",0,0)
  result = (LLVector4 *)new LLVector4();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLVector4__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  F32 *arg1 = (F32 *) 0 ;
  LLVector4 *result = 0 ;
  
  SWIG_check_num_args("LLVector4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLVector4",1,"F32 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_LLVector4",1,SWIGTYPE_p_float);
  }
  
  result = (LLVector4 *)new LLVector4((F32 const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLVector4__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  F64 *arg1 = (F64 *) 0 ;
  LLVector4 *result = 0 ;
  
  SWIG_check_num_args("LLVector4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLVector4",1,"F64 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("new_LLVector4",1,SWIGTYPE_p_double);
  }
  
  result = (LLVector4 *)new LLVector4((F64 const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLVector4__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = 0 ;
  LLVector4 *result = 0 ;
  
  SWIG_check_num_args("LLVector4",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LLVector4",1,"LLVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("new_LLVector4",1,SWIGTYPE_p_LLVector3);
  }
  
  result = (LLVector4 *)new LLVector4((LLVector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLVector4__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = 0 ;
  F32 arg2 ;
  LLVector4 *result = 0 ;
  
  SWIG_check_num_args("LLVector4",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LLVector4",1,"LLVector3 const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LLVector4",2,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("new_LLVector4",1,SWIGTYPE_p_LLVector3);
  }
  
  arg2 = (F32)lua_tonumber(L, 2);
  result = (LLVector4 *)new LLVector4((LLVector3 const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLVector4__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  F32 arg1 ;
  F32 arg2 ;
  F32 arg3 ;
  LLVector4 *result = 0 ;
  
  SWIG_check_num_args("LLVector4",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("LLVector4",1,"F32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LLVector4",2,"F32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("LLVector4",3,"F32");
  arg1 = (F32)lua_tonumber(L, 1);
  arg2 = (F32)lua_tonumber(L, 2);
  arg3 = (F32)lua_tonumber(L, 3);
  result = (LLVector4 *)new LLVector4(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLVector4__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  F32 arg1 ;
  F32 arg2 ;
  F32 arg3 ;
  F32 arg4 ;
  LLVector4 *result = 0 ;
  
  SWIG_check_num_args("LLVector4",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("LLVector4",1,"F32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LLVector4",2,"F32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("LLVector4",3,"F32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("LLVector4",4,"F32");
  arg1 = (F32)lua_tonumber(L, 1);
  arg2 = (F32)lua_tonumber(L, 2);
  arg3 = (F32)lua_tonumber(L, 3);
  arg4 = (F32)lua_tonumber(L, 4);
  result = (LLVector4 *)new LLVector4(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLVector4(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_LLVector4__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_LLVector4__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_double, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_LLVector4__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_LLVector4__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_LLVector4__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_LLVector4__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_LLVector4__SWIG_6(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_LLVector4'\n"
    "  Possible C/C++ prototypes are:\n"
    "    LLVector4()\n"
    "    LLVector4(F32 const *)\n"
    "    LLVector4(F64 const *)\n"
    "    LLVector4(LLVector3 const &)\n"
    "    LLVector4(LLVector3 const &,F32)\n"
    "    LLVector4(F32,F32,F32)\n"
    "    LLVector4(F32,F32,F32,F32)\n");
  lua_error(L);return 0;
}


static int _wrap_LLVector4_getValue(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  LLSD result;
  
  SWIG_check_num_args("getValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getValue",1,"LLVector4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_getValue",1,SWIGTYPE_p_LLVector4);
  }
  
  result = ((LLVector4 const *)arg1)->getValue();
  {
    LLSD * resultptr = new LLSD((const LLSD &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLSD,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_isFinite(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("isFinite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isFinite",1,"LLVector4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_isFinite",1,SWIGTYPE_p_LLVector4);
  }
  
  result = (BOOL)((LLVector4 const *)arg1)->isFinite();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_clear(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  
  SWIG_check_num_args("clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clear",1,"LLVector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_clear",1,SWIGTYPE_p_LLVector4);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_clearVec(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  
  SWIG_check_num_args("clearVec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clearVec",1,"LLVector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_clearVec",1,SWIGTYPE_p_LLVector4);
  }
  
  (arg1)->clearVec();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_zeroVec(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  
  SWIG_check_num_args("zeroVec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("zeroVec",1,"LLVector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_zeroVec",1,SWIGTYPE_p_LLVector4);
  }
  
  (arg1)->zeroVec();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_set__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  F32 arg2 ;
  F32 arg3 ;
  F32 arg4 ;
  
  SWIG_check_num_args("set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"LLVector4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("set",2,"F32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("set",3,"F32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("set",4,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_set",1,SWIGTYPE_p_LLVector4);
  }
  
  arg2 = (F32)lua_tonumber(L, 2);
  arg3 = (F32)lua_tonumber(L, 3);
  arg4 = (F32)lua_tonumber(L, 4);
  (arg1)->set(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_set__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  F32 arg2 ;
  F32 arg3 ;
  F32 arg4 ;
  F32 arg5 ;
  
  SWIG_check_num_args("set",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"LLVector4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("set",2,"F32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("set",3,"F32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("set",4,"F32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("set",5,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_set",1,SWIGTYPE_p_LLVector4);
  }
  
  arg2 = (F32)lua_tonumber(L, 2);
  arg3 = (F32)lua_tonumber(L, 3);
  arg4 = (F32)lua_tonumber(L, 4);
  arg5 = (F32)lua_tonumber(L, 5);
  (arg1)->set(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_set__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  LLVector4 *arg2 = 0 ;
  
  SWIG_check_num_args("set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"LLVector4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("set",2,"LLVector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_set",1,SWIGTYPE_p_LLVector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_set",2,SWIGTYPE_p_LLVector4);
  }
  
  (arg1)->set((LLVector4 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_set__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  LLVector3 *arg2 = 0 ;
  F32 arg3 ;
  
  SWIG_check_num_args("set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"LLVector4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("set",2,"LLVector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("set",3,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_set",1,SWIGTYPE_p_LLVector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector4_set",2,SWIGTYPE_p_LLVector3);
  }
  
  arg3 = (F32)lua_tonumber(L, 3);
  (arg1)->set((LLVector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_set__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  LLVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"LLVector4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("set",2,"LLVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_set",1,SWIGTYPE_p_LLVector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector4_set",2,SWIGTYPE_p_LLVector3);
  }
  
  (arg1)->set((LLVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_set__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  F32 *arg2 = (F32 *) 0 ;
  
  SWIG_check_num_args("set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"LLVector4 *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("set",2,"F32 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_set",1,SWIGTYPE_p_LLVector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LLVector4_set",2,SWIGTYPE_p_float);
  }
  
  (arg1)->set((F32 const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_set(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector4, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLVector4_set__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLVector4_set__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLVector4_set__SWIG_5(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_LLVector4_set__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_LLVector4_set__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_LLVector4_set__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLVector4_set'\n"
    "  Possible C/C++ prototypes are:\n"
    "    set(LLVector4 *,F32,F32,F32)\n"
    "    set(LLVector4 *,F32,F32,F32,F32)\n"
    "    set(LLVector4 *,LLVector4 const &)\n"
    "    set(LLVector4 *,LLVector3 const &,F32)\n"
    "    set(LLVector4 *,LLVector3 const &)\n"
    "    set(LLVector4 *,F32 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_LLVector4_setVec__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  F32 arg2 ;
  F32 arg3 ;
  F32 arg4 ;
  
  SWIG_check_num_args("setVec",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVec",1,"LLVector4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setVec",2,"F32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setVec",3,"F32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setVec",4,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_setVec",1,SWIGTYPE_p_LLVector4);
  }
  
  arg2 = (F32)lua_tonumber(L, 2);
  arg3 = (F32)lua_tonumber(L, 3);
  arg4 = (F32)lua_tonumber(L, 4);
  (arg1)->setVec(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_setVec__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  F32 arg2 ;
  F32 arg3 ;
  F32 arg4 ;
  F32 arg5 ;
  
  SWIG_check_num_args("setVec",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVec",1,"LLVector4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setVec",2,"F32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setVec",3,"F32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setVec",4,"F32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setVec",5,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_setVec",1,SWIGTYPE_p_LLVector4);
  }
  
  arg2 = (F32)lua_tonumber(L, 2);
  arg3 = (F32)lua_tonumber(L, 3);
  arg4 = (F32)lua_tonumber(L, 4);
  arg5 = (F32)lua_tonumber(L, 5);
  (arg1)->setVec(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_setVec__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  LLVector4 *arg2 = 0 ;
  
  SWIG_check_num_args("setVec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVec",1,"LLVector4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setVec",2,"LLVector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_setVec",1,SWIGTYPE_p_LLVector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_setVec",2,SWIGTYPE_p_LLVector4);
  }
  
  (arg1)->setVec((LLVector4 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_setVec__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  LLVector3 *arg2 = 0 ;
  F32 arg3 ;
  
  SWIG_check_num_args("setVec",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVec",1,"LLVector4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setVec",2,"LLVector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setVec",3,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_setVec",1,SWIGTYPE_p_LLVector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector4_setVec",2,SWIGTYPE_p_LLVector3);
  }
  
  arg3 = (F32)lua_tonumber(L, 3);
  (arg1)->setVec((LLVector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_setVec__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  LLVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("setVec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVec",1,"LLVector4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setVec",2,"LLVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_setVec",1,SWIGTYPE_p_LLVector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVector4_setVec",2,SWIGTYPE_p_LLVector3);
  }
  
  (arg1)->setVec((LLVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_setVec__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  F32 *arg2 = (F32 *) 0 ;
  
  SWIG_check_num_args("setVec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVec",1,"LLVector4 *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("setVec",2,"F32 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_setVec",1,SWIGTYPE_p_LLVector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LLVector4_setVec",2,SWIGTYPE_p_float);
  }
  
  (arg1)->setVec((F32 const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_setVec(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector4, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLVector4_setVec__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLVector4_setVec__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLVector4_setVec__SWIG_5(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_LLVector4_setVec__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_LLVector4_setVec__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_LLVector4_setVec__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLVector4_setVec'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setVec(LLVector4 *,F32,F32,F32)\n"
    "    setVec(LLVector4 *,F32,F32,F32,F32)\n"
    "    setVec(LLVector4 *,LLVector4 const &)\n"
    "    setVec(LLVector4 *,LLVector3 const &,F32)\n"
    "    setVec(LLVector4 *,LLVector3 const &)\n"
    "    setVec(LLVector4 *,F32 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_LLVector4_length(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  F32 result;
  
  SWIG_check_num_args("length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("length",1,"LLVector4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_length",1,SWIGTYPE_p_LLVector4);
  }
  
  result = (F32)((LLVector4 const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_lengthSquared(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  F32 result;
  
  SWIG_check_num_args("lengthSquared",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("lengthSquared",1,"LLVector4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_lengthSquared",1,SWIGTYPE_p_LLVector4);
  }
  
  result = (F32)((LLVector4 const *)arg1)->lengthSquared();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_normalize(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  F32 result;
  
  SWIG_check_num_args("normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("normalize",1,"LLVector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_normalize",1,SWIGTYPE_p_LLVector4);
  }
  
  result = (F32)(arg1)->normalize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_magVec(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  F32 result;
  
  SWIG_check_num_args("magVec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("magVec",1,"LLVector4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_magVec",1,SWIGTYPE_p_LLVector4);
  }
  
  result = (F32)((LLVector4 const *)arg1)->magVec();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_magVecSquared(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  F32 result;
  
  SWIG_check_num_args("magVecSquared",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("magVecSquared",1,"LLVector4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_magVecSquared",1,SWIGTYPE_p_LLVector4);
  }
  
  result = (F32)((LLVector4 const *)arg1)->magVecSquared();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_normVec(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  F32 result;
  
  SWIG_check_num_args("normVec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("normVec",1,"LLVector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_normVec",1,SWIGTYPE_p_LLVector4);
  }
  
  result = (F32)(arg1)->normVec();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_abs(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("abs",1,"LLVector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_abs",1,SWIGTYPE_p_LLVector4);
  }
  
  result = (BOOL)(arg1)->abs();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_isExactlyClear(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("isExactlyClear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isExactlyClear",1,"LLVector4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_isExactlyClear",1,SWIGTYPE_p_LLVector4);
  }
  
  result = (BOOL)((LLVector4 const *)arg1)->isExactlyClear();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_isExactlyZero(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("isExactlyZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isExactlyZero",1,"LLVector4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_isExactlyZero",1,SWIGTYPE_p_LLVector4);
  }
  
  result = (BOOL)((LLVector4 const *)arg1)->isExactlyZero();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_rotVec__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  LLMatrix4 *arg2 = 0 ;
  LLVector4 *result = 0 ;
  
  SWIG_check_num_args("rotVec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rotVec",1,"LLVector4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("rotVec",2,"LLMatrix4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_rotVec",1,SWIGTYPE_p_LLVector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLMatrix4,0))){
    SWIG_fail_ptr("LLVector4_rotVec",2,SWIGTYPE_p_LLMatrix4);
  }
  
  {
    LLVector4 const &_result_ref = (arg1)->rotVec((LLMatrix4 const &)*arg2);
    result = (LLVector4 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_rotVec__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  LLQuaternion *arg2 = 0 ;
  LLVector4 *result = 0 ;
  
  SWIG_check_num_args("rotVec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rotVec",1,"LLVector4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("rotVec",2,"LLQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_rotVec",1,SWIGTYPE_p_LLVector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLQuaternion,0))){
    SWIG_fail_ptr("LLVector4_rotVec",2,SWIGTYPE_p_LLQuaternion);
  }
  
  {
    LLVector4 const &_result_ref = (arg1)->rotVec((LLQuaternion const &)*arg2);
    result = (LLVector4 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_rotVec(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLMatrix4, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLVector4_rotVec__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLQuaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLVector4_rotVec__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLVector4_rotVec'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rotVec(LLVector4 *,LLMatrix4 const &)\n"
    "    rotVec(LLVector4 *,LLQuaternion const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LLVector4_scaleVec(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  LLVector4 *arg2 = 0 ;
  LLVector4 *result = 0 ;
  
  SWIG_check_num_args("scaleVec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("scaleVec",1,"LLVector4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("scaleVec",2,"LLVector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_scaleVec",1,SWIGTYPE_p_LLVector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_scaleVec",2,SWIGTYPE_p_LLVector4);
  }
  
  {
    LLVector4 const &_result_ref = (arg1)->scaleVec((LLVector4 const &)*arg2);
    result = (LLVector4 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_x_set(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("x",1,"LLVector4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("x",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_x_set",1,SWIGTYPE_p_LLVector4);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  LLVector4_x_set(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_x_get(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  float result;
  
  SWIG_check_num_args("x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("x",1,"LLVector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_x_get",1,SWIGTYPE_p_LLVector4);
  }
  
  result = (float)LLVector4_x_get(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_y_set(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("y",1,"LLVector4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("y",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_y_set",1,SWIGTYPE_p_LLVector4);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  LLVector4_y_set(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_y_get(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  float result;
  
  SWIG_check_num_args("y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("y",1,"LLVector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_y_get",1,SWIGTYPE_p_LLVector4);
  }
  
  result = (float)LLVector4_y_get(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_z_set(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("z",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("z",1,"LLVector4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("z",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_z_set",1,SWIGTYPE_p_LLVector4);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  LLVector4_z_set(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_z_get(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  float result;
  
  SWIG_check_num_args("z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("z",1,"LLVector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_z_get",1,SWIGTYPE_p_LLVector4);
  }
  
  result = (float)LLVector4_z_get(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_w_set(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("w",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("w",1,"LLVector4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("w",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_w_set",1,SWIGTYPE_p_LLVector4);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  LLVector4_w_set(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_w_get(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  float result;
  
  SWIG_check_num_args("w",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("w",1,"LLVector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_w_get",1,SWIGTYPE_p_LLVector4);
  }
  
  result = (float)LLVector4_w_get(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_r_set(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("r",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("r",1,"LLVector4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("r",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_r_set",1,SWIGTYPE_p_LLVector4);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  LLVector4_r_set(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_r_get(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  float result;
  
  SWIG_check_num_args("r",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("r",1,"LLVector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_r_get",1,SWIGTYPE_p_LLVector4);
  }
  
  result = (float)LLVector4_r_get(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_g_set(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("g",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("g",1,"LLVector4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("g",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_g_set",1,SWIGTYPE_p_LLVector4);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  LLVector4_g_set(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_g_get(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  float result;
  
  SWIG_check_num_args("g",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("g",1,"LLVector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_g_get",1,SWIGTYPE_p_LLVector4);
  }
  
  result = (float)LLVector4_g_get(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_b_set(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("b",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("b",1,"LLVector4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("b",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_b_set",1,SWIGTYPE_p_LLVector4);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  LLVector4_b_set(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_b_get(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  float result;
  
  SWIG_check_num_args("b",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("b",1,"LLVector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_b_get",1,SWIGTYPE_p_LLVector4);
  }
  
  result = (float)LLVector4_b_get(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_a_set(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("a",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("a",1,"LLVector4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("a",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_a_set",1,SWIGTYPE_p_LLVector4);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  LLVector4_a_set(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4_a_get(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  float result;
  
  SWIG_check_num_args("a",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("a",1,"LLVector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4_a_get",1,SWIGTYPE_p_LLVector4);
  }
  
  result = (float)LLVector4_a_get(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVector4___tostring(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = (LLVector4 *) 0 ;
  std::string result;
  
  SWIG_check_num_args("__str__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("__str__",1,"LLVector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("LLVector4___tostring",1,SWIGTYPE_p_LLVector4);
  }
  
  result = LLVector4___str__(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LLVector4(void *obj) {
LLVector4 *arg1 = (LLVector4 *) obj;
delete arg1;
}
static swig_lua_method swig_LLVector4_methods[] = {
    {"getValue", _wrap_LLVector4_getValue}, 
    {"isFinite", _wrap_LLVector4_isFinite}, 
    {"clear", _wrap_LLVector4_clear}, 
    {"clearVec", _wrap_LLVector4_clearVec}, 
    {"zeroVec", _wrap_LLVector4_zeroVec}, 
    {"set", _wrap_LLVector4_set}, 
    {"setVec", _wrap_LLVector4_setVec}, 
    {"length", _wrap_LLVector4_length}, 
    {"lengthSquared", _wrap_LLVector4_lengthSquared}, 
    {"normalize", _wrap_LLVector4_normalize}, 
    {"magVec", _wrap_LLVector4_magVec}, 
    {"magVecSquared", _wrap_LLVector4_magVecSquared}, 
    {"normVec", _wrap_LLVector4_normVec}, 
    {"abs", _wrap_LLVector4_abs}, 
    {"isExactlyClear", _wrap_LLVector4_isExactlyClear}, 
    {"isExactlyZero", _wrap_LLVector4_isExactlyZero}, 
    {"rotVec", _wrap_LLVector4_rotVec}, 
    {"scaleVec", _wrap_LLVector4_scaleVec}, 
    {"__tostring", _wrap_LLVector4___tostring}, 
    {0,0}
};
static swig_lua_attribute swig_LLVector4_attributes[] = {
    { "mV", _wrap_LLVector4_mV_get, _wrap_LLVector4_mV_set},
    { "x", _wrap_LLVector4_x_get, _wrap_LLVector4_x_set},
    { "y", _wrap_LLVector4_y_get, _wrap_LLVector4_y_set},
    { "z", _wrap_LLVector4_z_get, _wrap_LLVector4_z_set},
    { "w", _wrap_LLVector4_w_get, _wrap_LLVector4_w_set},
    { "r", _wrap_LLVector4_r_get, _wrap_LLVector4_r_set},
    { "g", _wrap_LLVector4_g_get, _wrap_LLVector4_g_set},
    { "b", _wrap_LLVector4_b_get, _wrap_LLVector4_b_set},
    { "a", _wrap_LLVector4_a_get, _wrap_LLVector4_a_set},
    {0,0,0}
};
static swig_lua_class *swig_LLVector4_bases[] = {0};
static const char *swig_LLVector4_base_names[] = {0};
static swig_lua_class _wrap_class_LLVector4 = { "LLVector4", &SWIGTYPE_p_LLVector4,_wrap_new_LLVector4, swig_delete_LLVector4, swig_LLVector4_methods, swig_LLVector4_attributes, swig_LLVector4_bases, swig_LLVector4_base_names };

static int _wrap_angle_between__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = 0 ;
  LLVector4 *arg2 = 0 ;
  F32 result;
  
  SWIG_check_num_args("angle_between",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("angle_between",1,"LLVector4 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("angle_between",2,"LLVector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("angle_between",1,SWIGTYPE_p_LLVector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("angle_between",2,SWIGTYPE_p_LLVector4);
  }
  
  result = (F32)angle_between((LLVector4 const &)*arg1,(LLVector4 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_angle_between(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_angle_between__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_angle_between__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector4, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_angle_between__SWIG_2(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'angle_between'\n"
    "  Possible C/C++ prototypes are:\n"
    "    angle_between(LLVector2 const &,LLVector2 const &)\n"
    "    angle_between(LLVector3 const &,LLVector3 const &)\n"
    "    angle_between(LLVector4 const &,LLVector4 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_are_parallel__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = 0 ;
  LLVector4 *arg2 = 0 ;
  F32 arg3 ;
  BOOL result;
  
  SWIG_check_num_args("are_parallel",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("are_parallel",1,"LLVector4 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("are_parallel",2,"LLVector4 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("are_parallel",3,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("are_parallel",1,SWIGTYPE_p_LLVector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("are_parallel",2,SWIGTYPE_p_LLVector4);
  }
  
  arg3 = (F32)lua_tonumber(L, 3);
  result = (BOOL)are_parallel((LLVector4 const &)*arg1,(LLVector4 const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_are_parallel__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = 0 ;
  LLVector4 *arg2 = 0 ;
  BOOL result;
  
  SWIG_check_num_args("are_parallel",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("are_parallel",1,"LLVector4 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("are_parallel",2,"LLVector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("are_parallel",1,SWIGTYPE_p_LLVector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("are_parallel",2,SWIGTYPE_p_LLVector4);
  }
  
  result = (BOOL)are_parallel((LLVector4 const &)*arg1,(LLVector4 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_are_parallel(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_are_parallel__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_are_parallel__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector4, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_are_parallel__SWIG_5(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_are_parallel__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector4, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_are_parallel__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_are_parallel__SWIG_2(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'are_parallel'\n"
    "  Possible C/C++ prototypes are:\n"
    "    are_parallel(LLVector2 const &,LLVector2 const &,F32)\n"
    "    are_parallel(LLVector2 const &,LLVector2 const &)\n"
    "    are_parallel(LLVector3 const &,LLVector3 const &,F32)\n"
    "    are_parallel(LLVector3 const &,LLVector3 const &)\n"
    "    are_parallel(LLVector4 const &,LLVector4 const &,F32)\n"
    "    are_parallel(LLVector4 const &,LLVector4 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_dist_vec__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = 0 ;
  LLVector4 *arg2 = 0 ;
  F32 result;
  
  SWIG_check_num_args("dist_vec",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("dist_vec",1,"LLVector4 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dist_vec",2,"LLVector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("dist_vec",1,SWIGTYPE_p_LLVector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("dist_vec",2,SWIGTYPE_p_LLVector4);
  }
  
  result = (F32)dist_vec((LLVector4 const &)*arg1,(LLVector4 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dist_vec(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_dist_vec__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_dist_vec__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector4, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_dist_vec__SWIG_2(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'dist_vec'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dist_vec(LLVector2 const &,LLVector2 const &)\n"
    "    dist_vec(LLVector3 const &,LLVector3 const &)\n"
    "    dist_vec(LLVector4 const &,LLVector4 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_dist_vec_squared__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = 0 ;
  LLVector4 *arg2 = 0 ;
  F32 result;
  
  SWIG_check_num_args("dist_vec_squared",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("dist_vec_squared",1,"LLVector4 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dist_vec_squared",2,"LLVector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("dist_vec_squared",1,SWIGTYPE_p_LLVector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("dist_vec_squared",2,SWIGTYPE_p_LLVector4);
  }
  
  result = (F32)dist_vec_squared((LLVector4 const &)*arg1,(LLVector4 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dist_vec_squared(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_dist_vec_squared__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_dist_vec_squared__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector4, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_dist_vec_squared__SWIG_2(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'dist_vec_squared'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dist_vec_squared(LLVector2 const &,LLVector2 const &)\n"
    "    dist_vec_squared(LLVector3 const &,LLVector3 const &)\n"
    "    dist_vec_squared(LLVector4 const &,LLVector4 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_vec4to3__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = 0 ;
  LLVector3 result;
  
  SWIG_check_num_args("vec4to3",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("vec4to3",1,"LLVector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("vec4to3",1,SWIGTYPE_p_LLVector4);
  }
  
  result = vec4to3((LLVector4 const &)*arg1);
  {
    LLVector3 * resultptr = new LLVector3((const LLVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vec3to4__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = 0 ;
  LLVector4 result;
  
  SWIG_check_num_args("vec3to4",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("vec3to4",1,"LLVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("vec3to4",1,SWIGTYPE_p_LLVector3);
  }
  
  result = vec3to4((LLVector3 const &)*arg1);
  {
    LLVector4 * resultptr = new LLVector4((const LLVector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLVector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lerp__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = 0 ;
  LLVector4 *arg2 = 0 ;
  F32 arg3 ;
  LLVector4 result;
  
  SWIG_check_num_args("lerp",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("lerp",1,"LLVector4 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("lerp",2,"LLVector4 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("lerp",3,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("lerp",1,SWIGTYPE_p_LLVector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("lerp",2,SWIGTYPE_p_LLVector4);
  }
  
  arg3 = (F32)lua_tonumber(L, 3);
  result = lerp((LLVector4 const &)*arg1,(LLVector4 const &)*arg2,arg3);
  {
    LLVector4 * resultptr = new LLVector4((const LLVector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLVector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LENGTHOFCOLOR4_get(lua_State* L) {
  int SWIG_arg = 0;
  U32 result;
  
  SWIG_check_num_args("LENGTHOFCOLOR4",0,0)
  result = (U32)(U32)LENGTHOFCOLOR4;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MAX_LENGTH_OF_COLOR_NAME_get(lua_State* L) {
  int SWIG_arg = 0;
  U32 result;
  
  SWIG_check_num_args("MAX_LENGTH_OF_COLOR_NAME",0,0)
  result = (U32)(U32)MAX_LENGTH_OF_COLOR_NAME;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_mV_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  F32 *arg2 ;
  
  SWIG_check_num_args("mV",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mV",1,"LLColor4 *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mV",2,"F32 [LENGTHOFCOLOR4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_mV_set",1,SWIGTYPE_p_LLColor4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LLColor4_mV_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    F32 *b = (F32 *) arg1->mV;
    for (ii = 0; ii < (size_t)LENGTHOFCOLOR4; ii++) b[ii] = *((F32 *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_mV_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  F32 *result = 0 ;
  
  SWIG_check_num_args("mV",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mV",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_mV_get",1,SWIGTYPE_p_LLColor4);
  }
  
  result = (F32 *)(F32 *) ((arg1)->mV);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLColor4__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4",0,0)
  result = (LLColor4 *)new LLColor4();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLColor4__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  F32 arg1 ;
  F32 arg2 ;
  F32 arg3 ;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("LLColor4",1,"F32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LLColor4",2,"F32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("LLColor4",3,"F32");
  arg1 = (F32)lua_tonumber(L, 1);
  arg2 = (F32)lua_tonumber(L, 2);
  arg3 = (F32)lua_tonumber(L, 3);
  result = (LLColor4 *)new LLColor4(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLColor4__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  F32 arg1 ;
  F32 arg2 ;
  F32 arg3 ;
  F32 arg4 ;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("LLColor4",1,"F32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LLColor4",2,"F32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("LLColor4",3,"F32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("LLColor4",4,"F32");
  arg1 = (F32)lua_tonumber(L, 1);
  arg2 = (F32)lua_tonumber(L, 2);
  arg3 = (F32)lua_tonumber(L, 3);
  arg4 = (F32)lua_tonumber(L, 4);
  result = (LLColor4 *)new LLColor4(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLColor4__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  U32 arg1 ;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("LLColor4",1,"U32");
  arg1 = (U32)lua_tonumber(L, 1);
  result = (LLColor4 *)new LLColor4(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLColor4__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  F32 *arg1 = (F32 *) 0 ;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4",1,"F32 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_LLColor4",1,SWIGTYPE_p_float);
  }
  
  result = (LLColor4 *)new LLColor4((F32 const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLColor4__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  LLColor3 *arg1 = 0 ;
  F32 arg2 ;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LLColor4",1,"LLColor3 const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LLColor4",2,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor3,0))){
    SWIG_fail_ptr("new_LLColor4",1,SWIGTYPE_p_LLColor3);
  }
  
  arg2 = (F32)lua_tonumber(L, 2);
  result = (LLColor4 *)new LLColor4((LLColor3 const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLColor4__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  LLColor3 *arg1 = 0 ;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LLColor4",1,"LLColor3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor3,0))){
    SWIG_fail_ptr("new_LLColor4",1,SWIGTYPE_p_LLColor3);
  }
  
  result = (LLColor4 *)new LLColor4((LLColor3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLColor4__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  LLSD *arg1 = 0 ;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LLColor4",1,"LLSD const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLSD,0))){
    SWIG_fail_ptr("new_LLColor4",1,SWIGTYPE_p_LLSD);
  }
  
  result = (LLColor4 *)new LLColor4((LLSD const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLColor4__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4U *arg1 = 0 ;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LLColor4",1,"LLColor4U const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4U,0))){
    SWIG_fail_ptr("new_LLColor4",1,SWIGTYPE_p_LLColor4U);
  }
  
  result = (LLColor4 *)new LLColor4((LLColor4U const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLColor4__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = 0 ;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LLColor4",1,"LLVector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("new_LLColor4",1,SWIGTYPE_p_LLVector4);
  }
  
  result = (LLColor4 *)new LLColor4((LLVector4 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLColor4(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_LLColor4__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_LLColor4__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLColor3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_LLColor4__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLSD, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_LLColor4__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLColor4U, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_LLColor4__SWIG_8(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_LLColor4__SWIG_9(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_LLColor4__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLColor3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_LLColor4__SWIG_5(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_LLColor4__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_LLColor4__SWIG_2(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_LLColor4'\n"
    "  Possible C/C++ prototypes are:\n"
    "    LLColor4()\n"
    "    LLColor4(F32,F32,F32)\n"
    "    LLColor4(F32,F32,F32,F32)\n"
    "    LLColor4(U32)\n"
    "    LLColor4(F32 const *)\n"
    "    LLColor4(LLColor3 const &,F32)\n"
    "    LLColor4(LLColor3 const &)\n"
    "    LLColor4(LLSD const &)\n"
    "    LLColor4(LLColor4U const &)\n"
    "    LLColor4(LLVector4 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LLColor4_getValue(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  LLSD result;
  
  SWIG_check_num_args("getValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getValue",1,"LLColor4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_getValue",1,SWIGTYPE_p_LLColor4);
  }
  
  result = ((LLColor4 const *)arg1)->getValue();
  {
    LLSD * resultptr = new LLSD((const LLSD &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLSD,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_setValue(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  LLSD *arg2 = 0 ;
  
  SWIG_check_num_args("setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValue",1,"LLColor4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setValue",2,"LLSD const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_setValue",1,SWIGTYPE_p_LLColor4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLSD,0))){
    SWIG_fail_ptr("LLColor4_setValue",2,SWIGTYPE_p_LLSD);
  }
  
  (arg1)->setValue((LLSD const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_calcHSL(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  F32 *arg2 = (F32 *) 0 ;
  F32 *arg3 = (F32 *) 0 ;
  F32 *arg4 = (F32 *) 0 ;
  
  SWIG_check_num_args("calcHSL",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("calcHSL",1,"LLColor4 const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("calcHSL",2,"F32 *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("calcHSL",3,"F32 *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("calcHSL",4,"F32 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_calcHSL",1,SWIGTYPE_p_LLColor4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LLColor4_calcHSL",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LLColor4_calcHSL",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LLColor4_calcHSL",4,SWIGTYPE_p_float);
  }
  
  ((LLColor4 const *)arg1)->calcHSL(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_setToBlack(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("setToBlack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setToBlack",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_setToBlack",1,SWIGTYPE_p_LLColor4);
  }
  
  {
    LLColor4 const &_result_ref = (arg1)->setToBlack();
    result = (LLColor4 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_setToWhite(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("setToWhite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setToWhite",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_setToWhite",1,SWIGTYPE_p_LLColor4);
  }
  
  {
    LLColor4 const &_result_ref = (arg1)->setToWhite();
    result = (LLColor4 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_setVec__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  F32 arg2 ;
  F32 arg3 ;
  F32 arg4 ;
  F32 arg5 ;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("setVec",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVec",1,"LLColor4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setVec",2,"F32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setVec",3,"F32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setVec",4,"F32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setVec",5,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_setVec",1,SWIGTYPE_p_LLColor4);
  }
  
  arg2 = (F32)lua_tonumber(L, 2);
  arg3 = (F32)lua_tonumber(L, 3);
  arg4 = (F32)lua_tonumber(L, 4);
  arg5 = (F32)lua_tonumber(L, 5);
  {
    LLColor4 const &_result_ref = (arg1)->setVec(arg2,arg3,arg4,arg5);
    result = (LLColor4 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_setVec__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  F32 arg2 ;
  F32 arg3 ;
  F32 arg4 ;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("setVec",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVec",1,"LLColor4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setVec",2,"F32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setVec",3,"F32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setVec",4,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_setVec",1,SWIGTYPE_p_LLColor4);
  }
  
  arg2 = (F32)lua_tonumber(L, 2);
  arg3 = (F32)lua_tonumber(L, 3);
  arg4 = (F32)lua_tonumber(L, 4);
  {
    LLColor4 const &_result_ref = (arg1)->setVec(arg2,arg3,arg4);
    result = (LLColor4 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_setVec__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  LLColor4 *arg2 = 0 ;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("setVec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVec",1,"LLColor4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setVec",2,"LLColor4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_setVec",1,SWIGTYPE_p_LLColor4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_setVec",2,SWIGTYPE_p_LLColor4);
  }
  
  {
    LLColor4 const &_result_ref = (arg1)->setVec((LLColor4 const &)*arg2);
    result = (LLColor4 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_setVec__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  LLColor3 *arg2 = 0 ;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("setVec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVec",1,"LLColor4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setVec",2,"LLColor3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_setVec",1,SWIGTYPE_p_LLColor4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLColor3,0))){
    SWIG_fail_ptr("LLColor4_setVec",2,SWIGTYPE_p_LLColor3);
  }
  
  {
    LLColor4 const &_result_ref = (arg1)->setVec((LLColor3 const &)*arg2);
    result = (LLColor4 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_setVec__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  LLColor3 *arg2 = 0 ;
  F32 arg3 ;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("setVec",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVec",1,"LLColor4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setVec",2,"LLColor3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setVec",3,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_setVec",1,SWIGTYPE_p_LLColor4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLColor3,0))){
    SWIG_fail_ptr("LLColor4_setVec",2,SWIGTYPE_p_LLColor3);
  }
  
  arg3 = (F32)lua_tonumber(L, 3);
  {
    LLColor4 const &_result_ref = (arg1)->setVec((LLColor3 const &)*arg2,arg3);
    result = (LLColor4 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_setVec__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  F32 *arg2 = (F32 *) 0 ;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("setVec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVec",1,"LLColor4 *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("setVec",2,"F32 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_setVec",1,SWIGTYPE_p_LLColor4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LLColor4_setVec",2,SWIGTYPE_p_float);
  }
  
  {
    LLColor4 const &_result_ref = (arg1)->setVec((F32 const *)arg2);
    result = (LLColor4 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_setVec__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  LLColor4U *arg2 = 0 ;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("setVec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVec",1,"LLColor4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setVec",2,"LLColor4U const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_setVec",1,SWIGTYPE_p_LLColor4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLColor4U,0))){
    SWIG_fail_ptr("LLColor4_setVec",2,SWIGTYPE_p_LLColor4U);
  }
  
  {
    LLColor4 const &_result_ref = (arg1)->setVec((LLColor4U const &)*arg2);
    result = (LLColor4 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_setVec(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLColor4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLColor4, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLColor4_setVec__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLColor4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLColor3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLColor4_setVec__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLColor4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLColor4_setVec__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLColor4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLColor4U, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLColor4_setVec__SWIG_6(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLColor4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLColor3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_LLColor4_setVec__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLColor4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_LLColor4_setVec__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLColor4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_LLColor4_setVec__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLColor4_setVec'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setVec(LLColor4 *,F32,F32,F32,F32)\n"
    "    setVec(LLColor4 *,F32,F32,F32)\n"
    "    setVec(LLColor4 *,LLColor4 const &)\n"
    "    setVec(LLColor4 *,LLColor3 const &)\n"
    "    setVec(LLColor4 *,LLColor3 const &,F32)\n"
    "    setVec(LLColor4 *,F32 const *)\n"
    "    setVec(LLColor4 *,LLColor4U const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LLColor4_set__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  F32 arg2 ;
  F32 arg3 ;
  F32 arg4 ;
  F32 arg5 ;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("set",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"LLColor4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("set",2,"F32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("set",3,"F32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("set",4,"F32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("set",5,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_set",1,SWIGTYPE_p_LLColor4);
  }
  
  arg2 = (F32)lua_tonumber(L, 2);
  arg3 = (F32)lua_tonumber(L, 3);
  arg4 = (F32)lua_tonumber(L, 4);
  arg5 = (F32)lua_tonumber(L, 5);
  {
    LLColor4 const &_result_ref = (arg1)->set(arg2,arg3,arg4,arg5);
    result = (LLColor4 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_set__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  F32 arg2 ;
  F32 arg3 ;
  F32 arg4 ;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"LLColor4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("set",2,"F32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("set",3,"F32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("set",4,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_set",1,SWIGTYPE_p_LLColor4);
  }
  
  arg2 = (F32)lua_tonumber(L, 2);
  arg3 = (F32)lua_tonumber(L, 3);
  arg4 = (F32)lua_tonumber(L, 4);
  {
    LLColor4 const &_result_ref = (arg1)->set(arg2,arg3,arg4);
    result = (LLColor4 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_set__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  LLColor4 *arg2 = 0 ;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"LLColor4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("set",2,"LLColor4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_set",1,SWIGTYPE_p_LLColor4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_set",2,SWIGTYPE_p_LLColor4);
  }
  
  {
    LLColor4 const &_result_ref = (arg1)->set((LLColor4 const &)*arg2);
    result = (LLColor4 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_set__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  LLColor3 *arg2 = 0 ;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"LLColor4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("set",2,"LLColor3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_set",1,SWIGTYPE_p_LLColor4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLColor3,0))){
    SWIG_fail_ptr("LLColor4_set",2,SWIGTYPE_p_LLColor3);
  }
  
  {
    LLColor4 const &_result_ref = (arg1)->set((LLColor3 const &)*arg2);
    result = (LLColor4 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_set__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  LLColor3 *arg2 = 0 ;
  F32 arg3 ;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"LLColor4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("set",2,"LLColor3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("set",3,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_set",1,SWIGTYPE_p_LLColor4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLColor3,0))){
    SWIG_fail_ptr("LLColor4_set",2,SWIGTYPE_p_LLColor3);
  }
  
  arg3 = (F32)lua_tonumber(L, 3);
  {
    LLColor4 const &_result_ref = (arg1)->set((LLColor3 const &)*arg2,arg3);
    result = (LLColor4 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_set__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  F32 *arg2 = (F32 *) 0 ;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"LLColor4 *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("set",2,"F32 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_set",1,SWIGTYPE_p_LLColor4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LLColor4_set",2,SWIGTYPE_p_float);
  }
  
  {
    LLColor4 const &_result_ref = (arg1)->set((F32 const *)arg2);
    result = (LLColor4 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_set__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  LLColor4U *arg2 = 0 ;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"LLColor4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("set",2,"LLColor4U const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_set",1,SWIGTYPE_p_LLColor4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLColor4U,0))){
    SWIG_fail_ptr("LLColor4_set",2,SWIGTYPE_p_LLColor4U);
  }
  
  {
    LLColor4 const &_result_ref = (arg1)->set((LLColor4U const &)*arg2);
    result = (LLColor4 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_set(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLColor4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLColor4, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLColor4_set__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLColor4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLColor3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLColor4_set__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLColor4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLColor4_set__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLColor4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLColor4U, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLColor4_set__SWIG_6(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLColor4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLColor3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_LLColor4_set__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLColor4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_LLColor4_set__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLColor4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_LLColor4_set__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLColor4_set'\n"
    "  Possible C/C++ prototypes are:\n"
    "    set(LLColor4 *,F32,F32,F32,F32)\n"
    "    set(LLColor4 *,F32,F32,F32)\n"
    "    set(LLColor4 *,LLColor4 const &)\n"
    "    set(LLColor4 *,LLColor3 const &)\n"
    "    set(LLColor4 *,LLColor3 const &,F32)\n"
    "    set(LLColor4 *,F32 const *)\n"
    "    set(LLColor4 *,LLColor4U const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LLColor4_setAlpha(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  F32 arg2 ;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("setAlpha",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAlpha",1,"LLColor4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setAlpha",2,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_setAlpha",1,SWIGTYPE_p_LLColor4);
  }
  
  arg2 = (F32)lua_tonumber(L, 2);
  {
    LLColor4 const &_result_ref = (arg1)->setAlpha(arg2);
    result = (LLColor4 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_magVec(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  F32 result;
  
  SWIG_check_num_args("magVec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("magVec",1,"LLColor4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_magVec",1,SWIGTYPE_p_LLColor4);
  }
  
  result = (F32)((LLColor4 const *)arg1)->magVec();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_magVecSquared(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  F32 result;
  
  SWIG_check_num_args("magVecSquared",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("magVecSquared",1,"LLColor4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_magVecSquared",1,SWIGTYPE_p_LLColor4);
  }
  
  result = (F32)((LLColor4 const *)arg1)->magVecSquared();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_normVec(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  F32 result;
  
  SWIG_check_num_args("normVec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("normVec",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_normVec",1,SWIGTYPE_p_LLColor4);
  }
  
  result = (F32)(arg1)->normVec();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_length(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  F32 result;
  
  SWIG_check_num_args("length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("length",1,"LLColor4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_length",1,SWIGTYPE_p_LLColor4);
  }
  
  result = (F32)((LLColor4 const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_lengthSquared(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  F32 result;
  
  SWIG_check_num_args("lengthSquared",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("lengthSquared",1,"LLColor4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_lengthSquared",1,SWIGTYPE_p_LLColor4);
  }
  
  result = (F32)((LLColor4 const *)arg1)->lengthSquared();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_normalize(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  F32 result;
  
  SWIG_check_num_args("normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("normalize",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_normalize",1,SWIGTYPE_p_LLColor4);
  }
  
  result = (F32)(arg1)->normalize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_isOpaque(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("isOpaque",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isOpaque",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_isOpaque",1,SWIGTYPE_p_LLColor4);
  }
  
  result = (BOOL)(arg1)->isOpaque();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_red_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::red",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::red",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_red_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::red = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_red_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::red",0,0)
  result = (LLColor4 *)&LLColor4::red;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_green_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::green",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::green",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_green_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::green = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_green_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::green",0,0)
  result = (LLColor4 *)&LLColor4::green;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_blue_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::blue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::blue",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_blue_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::blue = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_blue_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::blue",0,0)
  result = (LLColor4 *)&LLColor4::blue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_black_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::black",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::black",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_black_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::black = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_black_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::black",0,0)
  result = (LLColor4 *)&LLColor4::black;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_white_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::white",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::white",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_white_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::white = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_white_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::white",0,0)
  result = (LLColor4 *)&LLColor4::white;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_yellow_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::yellow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::yellow",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_yellow_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::yellow = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_yellow_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::yellow",0,0)
  result = (LLColor4 *)&LLColor4::yellow;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_magenta_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::magenta",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::magenta",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_magenta_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::magenta = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_magenta_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::magenta",0,0)
  result = (LLColor4 *)&LLColor4::magenta;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_cyan_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::cyan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::cyan",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_cyan_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::cyan = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_cyan_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::cyan",0,0)
  result = (LLColor4 *)&LLColor4::cyan;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_smoke_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::smoke",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::smoke",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_smoke_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::smoke = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_smoke_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::smoke",0,0)
  result = (LLColor4 *)&LLColor4::smoke;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_grey_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::grey",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::grey",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_grey_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::grey = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_grey_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::grey",0,0)
  result = (LLColor4 *)&LLColor4::grey;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_orange_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::orange",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::orange",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_orange_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::orange = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_orange_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::orange",0,0)
  result = (LLColor4 *)&LLColor4::orange;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_purple_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::purple",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::purple",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_purple_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::purple = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_purple_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::purple",0,0)
  result = (LLColor4 *)&LLColor4::purple;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_pink_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::pink",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::pink",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_pink_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::pink = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_pink_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::pink",0,0)
  result = (LLColor4 *)&LLColor4::pink;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_transparent_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::transparent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::transparent",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_transparent_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::transparent = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_transparent_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::transparent",0,0)
  result = (LLColor4 *)&LLColor4::transparent;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_grey1_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::grey1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::grey1",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_grey1_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::grey1 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_grey1_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::grey1",0,0)
  result = (LLColor4 *)&LLColor4::grey1;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_grey2_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::grey2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::grey2",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_grey2_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::grey2 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_grey2_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::grey2",0,0)
  result = (LLColor4 *)&LLColor4::grey2;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_grey3_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::grey3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::grey3",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_grey3_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::grey3 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_grey3_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::grey3",0,0)
  result = (LLColor4 *)&LLColor4::grey3;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_grey4_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::grey4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::grey4",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_grey4_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::grey4 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_grey4_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::grey4",0,0)
  result = (LLColor4 *)&LLColor4::grey4;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_red1_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::red1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::red1",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_red1_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::red1 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_red1_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::red1",0,0)
  result = (LLColor4 *)&LLColor4::red1;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_red2_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::red2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::red2",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_red2_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::red2 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_red2_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::red2",0,0)
  result = (LLColor4 *)&LLColor4::red2;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_red3_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::red3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::red3",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_red3_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::red3 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_red3_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::red3",0,0)
  result = (LLColor4 *)&LLColor4::red3;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_red4_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::red4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::red4",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_red4_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::red4 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_red4_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::red4",0,0)
  result = (LLColor4 *)&LLColor4::red4;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_red5_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::red5",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::red5",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_red5_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::red5 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_red5_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::red5",0,0)
  result = (LLColor4 *)&LLColor4::red5;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_green1_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::green1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::green1",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_green1_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::green1 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_green1_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::green1",0,0)
  result = (LLColor4 *)&LLColor4::green1;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_green2_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::green2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::green2",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_green2_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::green2 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_green2_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::green2",0,0)
  result = (LLColor4 *)&LLColor4::green2;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_green3_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::green3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::green3",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_green3_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::green3 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_green3_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::green3",0,0)
  result = (LLColor4 *)&LLColor4::green3;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_green4_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::green4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::green4",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_green4_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::green4 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_green4_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::green4",0,0)
  result = (LLColor4 *)&LLColor4::green4;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_green5_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::green5",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::green5",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_green5_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::green5 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_green5_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::green5",0,0)
  result = (LLColor4 *)&LLColor4::green5;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_green6_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::green6",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::green6",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_green6_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::green6 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_green6_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::green6",0,0)
  result = (LLColor4 *)&LLColor4::green6;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_blue1_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::blue1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::blue1",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_blue1_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::blue1 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_blue1_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::blue1",0,0)
  result = (LLColor4 *)&LLColor4::blue1;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_blue2_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::blue2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::blue2",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_blue2_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::blue2 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_blue2_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::blue2",0,0)
  result = (LLColor4 *)&LLColor4::blue2;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_blue3_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::blue3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::blue3",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_blue3_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::blue3 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_blue3_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::blue3",0,0)
  result = (LLColor4 *)&LLColor4::blue3;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_blue4_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::blue4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::blue4",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_blue4_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::blue4 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_blue4_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::blue4",0,0)
  result = (LLColor4 *)&LLColor4::blue4;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_blue5_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::blue5",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::blue5",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_blue5_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::blue5 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_blue5_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::blue5",0,0)
  result = (LLColor4 *)&LLColor4::blue5;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_blue6_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::blue6",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::blue6",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_blue6_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::blue6 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_blue6_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::blue6",0,0)
  result = (LLColor4 *)&LLColor4::blue6;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_yellow1_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::yellow1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::yellow1",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_yellow1_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::yellow1 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_yellow1_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::yellow1",0,0)
  result = (LLColor4 *)&LLColor4::yellow1;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_yellow2_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::yellow2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::yellow2",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_yellow2_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::yellow2 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_yellow2_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::yellow2",0,0)
  result = (LLColor4 *)&LLColor4::yellow2;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_yellow3_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::yellow3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::yellow3",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_yellow3_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::yellow3 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_yellow3_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::yellow3",0,0)
  result = (LLColor4 *)&LLColor4::yellow3;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_yellow4_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::yellow4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::yellow4",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_yellow4_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::yellow4 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_yellow4_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::yellow4",0,0)
  result = (LLColor4 *)&LLColor4::yellow4;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_yellow5_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::yellow5",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::yellow5",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_yellow5_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::yellow5 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_yellow5_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::yellow5",0,0)
  result = (LLColor4 *)&LLColor4::yellow5;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_yellow6_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::yellow6",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::yellow6",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_yellow6_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::yellow6 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_yellow6_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::yellow6",0,0)
  result = (LLColor4 *)&LLColor4::yellow6;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_yellow7_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::yellow7",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::yellow7",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_yellow7_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::yellow7 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_yellow7_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::yellow7",0,0)
  result = (LLColor4 *)&LLColor4::yellow7;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_yellow8_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::yellow8",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::yellow8",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_yellow8_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::yellow8 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_yellow8_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::yellow8",0,0)
  result = (LLColor4 *)&LLColor4::yellow8;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_yellow9_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::yellow9",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::yellow9",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_yellow9_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::yellow9 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_yellow9_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::yellow9",0,0)
  result = (LLColor4 *)&LLColor4::yellow9;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_orange1_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::orange1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::orange1",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_orange1_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::orange1 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_orange1_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::orange1",0,0)
  result = (LLColor4 *)&LLColor4::orange1;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_orange2_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::orange2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::orange2",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_orange2_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::orange2 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_orange2_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::orange2",0,0)
  result = (LLColor4 *)&LLColor4::orange2;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_orange3_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::orange3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::orange3",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_orange3_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::orange3 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_orange3_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::orange3",0,0)
  result = (LLColor4 *)&LLColor4::orange3;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_orange4_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::orange4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::orange4",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_orange4_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::orange4 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_orange4_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::orange4",0,0)
  result = (LLColor4 *)&LLColor4::orange4;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_orange5_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::orange5",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::orange5",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_orange5_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::orange5 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_orange5_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::orange5",0,0)
  result = (LLColor4 *)&LLColor4::orange5;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_orange6_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::orange6",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::orange6",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_orange6_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::orange6 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_orange6_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::orange6",0,0)
  result = (LLColor4 *)&LLColor4::orange6;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_magenta1_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::magenta1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::magenta1",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_magenta1_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::magenta1 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_magenta1_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::magenta1",0,0)
  result = (LLColor4 *)&LLColor4::magenta1;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_magenta2_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::magenta2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::magenta2",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_magenta2_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::magenta2 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_magenta2_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::magenta2",0,0)
  result = (LLColor4 *)&LLColor4::magenta2;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_magenta3_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::magenta3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::magenta3",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_magenta3_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::magenta3 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_magenta3_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::magenta3",0,0)
  result = (LLColor4 *)&LLColor4::magenta3;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_magenta4_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::magenta4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::magenta4",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_magenta4_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::magenta4 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_magenta4_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::magenta4",0,0)
  result = (LLColor4 *)&LLColor4::magenta4;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_purple1_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::purple1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::purple1",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_purple1_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::purple1 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_purple1_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::purple1",0,0)
  result = (LLColor4 *)&LLColor4::purple1;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_purple2_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::purple2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::purple2",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_purple2_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::purple2 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_purple2_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::purple2",0,0)
  result = (LLColor4 *)&LLColor4::purple2;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_purple3_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::purple3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::purple3",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_purple3_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::purple3 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_purple3_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::purple3",0,0)
  result = (LLColor4 *)&LLColor4::purple3;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_purple4_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::purple4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::purple4",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_purple4_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::purple4 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_purple4_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::purple4",0,0)
  result = (LLColor4 *)&LLColor4::purple4;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_purple5_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::purple5",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::purple5",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_purple5_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::purple5 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_purple5_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::purple5",0,0)
  result = (LLColor4 *)&LLColor4::purple5;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_purple6_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::purple6",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::purple6",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_purple6_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::purple6 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_purple6_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::purple6",0,0)
  result = (LLColor4 *)&LLColor4::purple6;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_pink1_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::pink1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::pink1",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_pink1_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::pink1 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_pink1_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::pink1",0,0)
  result = (LLColor4 *)&LLColor4::pink1;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_pink2_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::pink2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::pink2",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_pink2_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::pink2 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_pink2_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::pink2",0,0)
  result = (LLColor4 *)&LLColor4::pink2;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_cyan1_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::cyan1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::cyan1",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_cyan1_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::cyan1 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_cyan1_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::cyan1",0,0)
  result = (LLColor4 *)&LLColor4::cyan1;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_cyan2_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::cyan2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::cyan2",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_cyan2_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::cyan2 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_cyan2_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::cyan2",0,0)
  result = (LLColor4 *)&LLColor4::cyan2;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_cyan3_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::cyan3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::cyan3",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_cyan3_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::cyan3 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_cyan3_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::cyan3",0,0)
  result = (LLColor4 *)&LLColor4::cyan3;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_cyan4_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::cyan4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::cyan4",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_cyan4_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::cyan4 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_cyan4_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::cyan4",0,0)
  result = (LLColor4 *)&LLColor4::cyan4;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_cyan5_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::cyan5",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::cyan5",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_cyan5_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::cyan5 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_cyan5_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::cyan5",0,0)
  result = (LLColor4 *)&LLColor4::cyan5;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_cyan6_set(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("LLColor4::cyan6",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLColor4::cyan6",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_cyan6_set",1,SWIGTYPE_p_LLColor4);
  }
  
  LLColor4::cyan6 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_cyan6_get(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("LLColor4::cyan6",0,0)
  result = (LLColor4 *)&LLColor4::cyan6;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_parseColor(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  LLColor4 *arg2 = (LLColor4 *) 0 ;
  std::string temp1 ;
  BOOL result;
  
  SWIG_check_num_args("LLColor4::parseColor",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("LLColor4::parseColor",1,"std::string const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LLColor4::parseColor",2,"LLColor4 *");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_parseColor",2,SWIGTYPE_p_LLColor4);
  }
  
  result = (BOOL)LLColor4::parseColor((std::string const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_parseColor4(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  LLColor4 *arg2 = (LLColor4 *) 0 ;
  std::string temp1 ;
  BOOL result;
  
  SWIG_check_num_args("LLColor4::parseColor4",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("LLColor4::parseColor4",1,"std::string const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LLColor4::parseColor4",2,"LLColor4 *");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_parseColor4",2,SWIGTYPE_p_LLColor4);
  }
  
  result = (BOOL)LLColor4::parseColor4((std::string const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor4_clamp(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("clamp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clamp",1,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor4_clamp",1,SWIGTYPE_p_LLColor4);
  }
  
  (arg1)->clamp();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LLColor4(void *obj) {
LLColor4 *arg1 = (LLColor4 *) obj;
delete arg1;
}
static swig_lua_method swig_LLColor4_methods[] = {
    {"getValue", _wrap_LLColor4_getValue}, 
    {"setValue", _wrap_LLColor4_setValue}, 
    {"calcHSL", _wrap_LLColor4_calcHSL}, 
    {"setToBlack", _wrap_LLColor4_setToBlack}, 
    {"setToWhite", _wrap_LLColor4_setToWhite}, 
    {"setVec", _wrap_LLColor4_setVec}, 
    {"set", _wrap_LLColor4_set}, 
    {"setAlpha", _wrap_LLColor4_setAlpha}, 
    {"magVec", _wrap_LLColor4_magVec}, 
    {"magVecSquared", _wrap_LLColor4_magVecSquared}, 
    {"normVec", _wrap_LLColor4_normVec}, 
    {"length", _wrap_LLColor4_length}, 
    {"lengthSquared", _wrap_LLColor4_lengthSquared}, 
    {"normalize", _wrap_LLColor4_normalize}, 
    {"isOpaque", _wrap_LLColor4_isOpaque}, 
    {"clamp", _wrap_LLColor4_clamp}, 
    {0,0}
};
static swig_lua_attribute swig_LLColor4_attributes[] = {
    { "mV", _wrap_LLColor4_mV_get, _wrap_LLColor4_mV_set},
    {0,0,0}
};
static swig_lua_class *swig_LLColor4_bases[] = {0};
static const char *swig_LLColor4_base_names[] = {0};
static swig_lua_class _wrap_class_LLColor4 = { "LLColor4", &SWIGTYPE_p_LLColor4,_wrap_new_LLColor4, swig_delete_LLColor4, swig_LLColor4_methods, swig_LLColor4_attributes, swig_LLColor4_bases, swig_LLColor4_base_names };

static int _wrap_distVec(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = 0 ;
  LLColor4 *arg2 = 0 ;
  F32 result;
  
  SWIG_check_num_args("distVec",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("distVec",1,"LLColor4 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("distVec",2,"LLColor4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("distVec",1,SWIGTYPE_p_LLColor4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("distVec",2,SWIGTYPE_p_LLColor4);
  }
  
  result = (F32)distVec((LLColor4 const &)*arg1,(LLColor4 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_distVec_squared(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = 0 ;
  LLColor4 *arg2 = 0 ;
  F32 result;
  
  SWIG_check_num_args("distVec_squared",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("distVec_squared",1,"LLColor4 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("distVec_squared",2,"LLColor4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("distVec_squared",1,SWIGTYPE_p_LLColor4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("distVec_squared",2,SWIGTYPE_p_LLColor4);
  }
  
  result = (F32)distVec_squared((LLColor4 const &)*arg1,(LLColor4 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vec4to3__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = 0 ;
  LLColor3 result;
  
  SWIG_check_num_args("vec4to3",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("vec4to3",1,"LLColor4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("vec4to3",1,SWIGTYPE_p_LLColor4);
  }
  
  result = vec4to3((LLColor4 const &)*arg1);
  {
    LLColor3 * resultptr = new LLColor3((const LLColor3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLColor3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vec4to3(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_vec4to3__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLColor4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_vec4to3__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'vec4to3'\n"
    "  Possible C/C++ prototypes are:\n"
    "    vec4to3(LLVector4 const &)\n"
    "    vec4to3(LLColor4 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_vec3to4__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLColor3 *arg1 = 0 ;
  LLColor4 result;
  
  SWIG_check_num_args("vec3to4",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("vec3to4",1,"LLColor3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor3,0))){
    SWIG_fail_ptr("vec3to4",1,SWIGTYPE_p_LLColor3);
  }
  
  result = vec3to4((LLColor3 const &)*arg1);
  {
    LLColor4 * resultptr = new LLColor4((const LLColor4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLColor4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vec3to4(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_vec3to4__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLColor3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_vec3to4__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'vec3to4'\n"
    "  Possible C/C++ prototypes are:\n"
    "    vec3to4(LLVector3 const &)\n"
    "    vec3to4(LLColor3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_lerp__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = 0 ;
  LLColor4 *arg2 = 0 ;
  F32 arg3 ;
  LLColor4 result;
  
  SWIG_check_num_args("lerp",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("lerp",1,"LLColor4 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("lerp",2,"LLColor4 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("lerp",3,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("lerp",1,SWIGTYPE_p_LLColor4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("lerp",2,SWIGTYPE_p_LLColor4);
  }
  
  arg3 = (F32)lua_tonumber(L, 3);
  result = lerp((LLColor4 const &)*arg1,(LLColor4 const &)*arg2,arg3);
  {
    LLColor4 * resultptr = new LLColor4((const LLColor4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLColor4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lerp(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_lerp__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_lerp__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLVector4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector4, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_lerp__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLColor4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLColor4, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_lerp__SWIG_3(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'lerp'\n"
    "  Possible C/C++ prototypes are:\n"
    "    lerp(LLVector2 const &,LLVector2 const &,F32)\n"
    "    lerp(LLVector3 const &,LLVector3 const &,F32)\n"
    "    lerp(LLVector4 const &,LLVector4 const &,F32)\n"
    "    lerp(LLColor4 const &,LLColor4 const &,F32)\n");
  lua_error(L);return 0;
}


static int _wrap_Vector42LLColor4(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = 0 ;
  LLColor4 result;
  
  SWIG_check_num_args("Vector42LLColor4",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Vector42LLColor4",1,"LLVector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("Vector42LLColor4",1,SWIGTYPE_p_LLVector4);
  }
  
  result = Vector42LLColor4((LLVector4 const &)*arg1);
  {
    LLColor4 * resultptr = new LLColor4((const LLColor4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLColor4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLColor42Vector4(lua_State* L) {
  int SWIG_arg = 0;
  LLColor4 *arg1 = 0 ;
  LLVector4 result;
  
  SWIG_check_num_args("LLColor42Vector4",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LLColor42Vector4",1,"LLColor4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLColor42Vector4",1,SWIGTYPE_p_LLColor4);
  }
  
  result = LLColor42Vector4((LLColor4 const &)*arg1);
  {
    LLVector4 * resultptr = new LLVector4((const LLVector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLVector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_AttachToObject_Event(lua_State* L) {
  int SWIG_arg = 0;
  LLPartSysData *arg1 = 0 ;
  LLUUID *arg2 = 0 ;
  LLUUID *arg3 = 0 ;
  
  SWIG_check_num_args("ParticleSystem_AttachToObject_Event",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ParticleSystem_AttachToObject_Event",1,"LLPartSysData &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ParticleSystem_AttachToObject_Event",2,"LLUUID &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ParticleSystem_AttachToObject_Event",3,"LLUUID &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPartSysData,0))){
    SWIG_fail_ptr("ParticleSystem_AttachToObject_Event",1,SWIGTYPE_p_LLPartSysData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLUUID,0))){
    SWIG_fail_ptr("ParticleSystem_AttachToObject_Event",2,SWIGTYPE_p_LLUUID);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLUUID,0))){
    SWIG_fail_ptr("ParticleSystem_AttachToObject_Event",3,SWIGTYPE_p_LLUUID);
  }
  
  ParticleSystem_AttachToObject_Event(*arg1,*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_ParticleMaxAge_set(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ParticleMaxAge",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleMaxAge",1,"ParticleSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ParticleMaxAge",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_ParticleMaxAge_set",1,SWIGTYPE_p_ParticleSystem);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ParticleMaxAge = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_ParticleMaxAge_get(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  float result;
  
  SWIG_check_num_args("ParticleMaxAge",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleMaxAge",1,"ParticleSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_ParticleMaxAge_get",1,SWIGTYPE_p_ParticleSystem);
  }
  
  result = (float) ((arg1)->ParticleMaxAge);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_StartColor_set(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  LLVector4 *arg2 = (LLVector4 *) 0 ;
  
  SWIG_check_num_args("StartColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StartColor",1,"ParticleSystem *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("StartColor",2,"LLVector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_StartColor_set",1,SWIGTYPE_p_ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("ParticleSystem_StartColor_set",2,SWIGTYPE_p_LLVector4);
  }
  
  if (arg1) (arg1)->StartColor = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_StartColor_get(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  LLVector4 *result = 0 ;
  
  SWIG_check_num_args("StartColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StartColor",1,"ParticleSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_StartColor_get",1,SWIGTYPE_p_ParticleSystem);
  }
  
  result = (LLVector4 *)& ((arg1)->StartColor);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_EndColor_set(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  LLVector4 *arg2 = (LLVector4 *) 0 ;
  
  SWIG_check_num_args("EndColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EndColor",1,"ParticleSystem *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("EndColor",2,"LLVector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_EndColor_set",1,SWIGTYPE_p_ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("ParticleSystem_EndColor_set",2,SWIGTYPE_p_LLVector4);
  }
  
  if (arg1) (arg1)->EndColor = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_EndColor_get(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  LLVector4 *result = 0 ;
  
  SWIG_check_num_args("EndColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EndColor",1,"ParticleSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_EndColor_get",1,SWIGTYPE_p_ParticleSystem);
  }
  
  result = (LLVector4 *)& ((arg1)->EndColor);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_StartScale_set(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  LLVector2 *arg2 = (LLVector2 *) 0 ;
  
  SWIG_check_num_args("StartScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StartScale",1,"ParticleSystem *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("StartScale",2,"LLVector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_StartScale_set",1,SWIGTYPE_p_ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("ParticleSystem_StartScale_set",2,SWIGTYPE_p_LLVector2);
  }
  
  if (arg1) (arg1)->StartScale = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_StartScale_get(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  LLVector2 *result = 0 ;
  
  SWIG_check_num_args("StartScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StartScale",1,"ParticleSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_StartScale_get",1,SWIGTYPE_p_ParticleSystem);
  }
  
  result = (LLVector2 *)& ((arg1)->StartScale);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_EndScale_set(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  LLVector2 *arg2 = (LLVector2 *) 0 ;
  
  SWIG_check_num_args("EndScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EndScale",1,"ParticleSystem *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("EndScale",2,"LLVector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_EndScale_set",1,SWIGTYPE_p_ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("ParticleSystem_EndScale_set",2,SWIGTYPE_p_LLVector2);
  }
  
  if (arg1) (arg1)->EndScale = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_EndScale_get(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  LLVector2 *result = 0 ;
  
  SWIG_check_num_args("EndScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EndScale",1,"ParticleSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_EndScale_get",1,SWIGTYPE_p_ParticleSystem);
  }
  
  result = (LLVector2 *)& ((arg1)->EndScale);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_PosOffset_set(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  LLVector3 *arg2 = (LLVector3 *) 0 ;
  
  SWIG_check_num_args("PosOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PosOffset",1,"ParticleSystem *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("PosOffset",2,"LLVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_PosOffset_set",1,SWIGTYPE_p_ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("ParticleSystem_PosOffset_set",2,SWIGTYPE_p_LLVector3);
  }
  
  if (arg1) (arg1)->PosOffset = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_PosOffset_get(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  LLVector3 *result = 0 ;
  
  SWIG_check_num_args("PosOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PosOffset",1,"ParticleSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_PosOffset_get",1,SWIGTYPE_p_ParticleSystem);
  }
  
  result = (LLVector3 *)& ((arg1)->PosOffset);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_Parameter_set(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Parameter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Parameter",1,"ParticleSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Parameter",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_Parameter_set",1,SWIGTYPE_p_ParticleSystem);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->Parameter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_Parameter_get(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  float result;
  
  SWIG_check_num_args("Parameter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Parameter",1,"ParticleSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_Parameter_get",1,SWIGTYPE_p_ParticleSystem);
  }
  
  result = (float) ((arg1)->Parameter);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_SystemFlags_set(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("SystemFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SystemFlags",1,"ParticleSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SystemFlags",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_SystemFlags_set",1,SWIGTYPE_p_ParticleSystem);
  }
  
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->SystemFlags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_SystemFlags_get(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("SystemFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SystemFlags",1,"ParticleSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_SystemFlags_get",1,SWIGTYPE_p_ParticleSystem);
  }
  
  result = (unsigned int) ((arg1)->SystemFlags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_Pattern_set(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Pattern",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pattern",1,"ParticleSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pattern",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_Pattern_set",1,SWIGTYPE_p_ParticleSystem);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->Pattern = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_Pattern_get(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  int result;
  
  SWIG_check_num_args("Pattern",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Pattern",1,"ParticleSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_Pattern_get",1,SWIGTYPE_p_ParticleSystem);
  }
  
  result = (int) ((arg1)->Pattern);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_InnerAngle_set(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("InnerAngle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("InnerAngle",1,"ParticleSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("InnerAngle",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_InnerAngle_set",1,SWIGTYPE_p_ParticleSystem);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->InnerAngle = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_InnerAngle_get(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  float result;
  
  SWIG_check_num_args("InnerAngle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("InnerAngle",1,"ParticleSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_InnerAngle_get",1,SWIGTYPE_p_ParticleSystem);
  }
  
  result = (float) ((arg1)->InnerAngle);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_OuterAngle_set(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("OuterAngle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OuterAngle",1,"ParticleSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OuterAngle",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_OuterAngle_set",1,SWIGTYPE_p_ParticleSystem);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->OuterAngle = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_OuterAngle_get(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  float result;
  
  SWIG_check_num_args("OuterAngle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OuterAngle",1,"ParticleSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_OuterAngle_get",1,SWIGTYPE_p_ParticleSystem);
  }
  
  result = (float) ((arg1)->OuterAngle);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_AngularVelocity_set(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  LLVector3 *arg2 = (LLVector3 *) 0 ;
  
  SWIG_check_num_args("AngularVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AngularVelocity",1,"ParticleSystem *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AngularVelocity",2,"LLVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_AngularVelocity_set",1,SWIGTYPE_p_ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("ParticleSystem_AngularVelocity_set",2,SWIGTYPE_p_LLVector3);
  }
  
  if (arg1) (arg1)->AngularVelocity = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_AngularVelocity_get(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  LLVector3 *result = 0 ;
  
  SWIG_check_num_args("AngularVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AngularVelocity",1,"ParticleSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_AngularVelocity_get",1,SWIGTYPE_p_ParticleSystem);
  }
  
  result = (LLVector3 *)& ((arg1)->AngularVelocity);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_BurstRate_set(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("BurstRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BurstRate",1,"ParticleSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BurstRate",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_BurstRate_set",1,SWIGTYPE_p_ParticleSystem);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->BurstRate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_BurstRate_get(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  float result;
  
  SWIG_check_num_args("BurstRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BurstRate",1,"ParticleSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_BurstRate_get",1,SWIGTYPE_p_ParticleSystem);
  }
  
  result = (float) ((arg1)->BurstRate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_BurstPartCount_set(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("BurstPartCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BurstPartCount",1,"ParticleSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BurstPartCount",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_BurstPartCount_set",1,SWIGTYPE_p_ParticleSystem);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->BurstPartCount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_BurstPartCount_get(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  int result;
  
  SWIG_check_num_args("BurstPartCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BurstPartCount",1,"ParticleSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_BurstPartCount_get",1,SWIGTYPE_p_ParticleSystem);
  }
  
  result = (int) ((arg1)->BurstPartCount);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_BurstRadius_set(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("BurstRadius",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BurstRadius",1,"ParticleSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BurstRadius",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_BurstRadius_set",1,SWIGTYPE_p_ParticleSystem);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->BurstRadius = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_BurstRadius_get(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  float result;
  
  SWIG_check_num_args("BurstRadius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BurstRadius",1,"ParticleSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_BurstRadius_get",1,SWIGTYPE_p_ParticleSystem);
  }
  
  result = (float) ((arg1)->BurstRadius);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_BurstSpeedMin_set(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("BurstSpeedMin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BurstSpeedMin",1,"ParticleSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BurstSpeedMin",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_BurstSpeedMin_set",1,SWIGTYPE_p_ParticleSystem);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->BurstSpeedMin = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_BurstSpeedMin_get(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  float result;
  
  SWIG_check_num_args("BurstSpeedMin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BurstSpeedMin",1,"ParticleSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_BurstSpeedMin_get",1,SWIGTYPE_p_ParticleSystem);
  }
  
  result = (float) ((arg1)->BurstSpeedMin);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_BurstSpeedMax_set(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("BurstSpeedMax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BurstSpeedMax",1,"ParticleSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BurstSpeedMax",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_BurstSpeedMax_set",1,SWIGTYPE_p_ParticleSystem);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->BurstSpeedMax = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_BurstSpeedMax_get(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  float result;
  
  SWIG_check_num_args("BurstSpeedMax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BurstSpeedMax",1,"ParticleSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_BurstSpeedMax_get",1,SWIGTYPE_p_ParticleSystem);
  }
  
  result = (float) ((arg1)->BurstSpeedMax);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_SystemMaxAge_set(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SystemMaxAge",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SystemMaxAge",1,"ParticleSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SystemMaxAge",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_SystemMaxAge_set",1,SWIGTYPE_p_ParticleSystem);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->SystemMaxAge = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_SystemMaxAge_get(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  float result;
  
  SWIG_check_num_args("SystemMaxAge",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SystemMaxAge",1,"ParticleSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_SystemMaxAge_get",1,SWIGTYPE_p_ParticleSystem);
  }
  
  result = (float) ((arg1)->SystemMaxAge);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_StartAge_set(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("StartAge",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StartAge",1,"ParticleSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StartAge",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_StartAge_set",1,SWIGTYPE_p_ParticleSystem);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->StartAge = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_StartAge_get(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  float result;
  
  SWIG_check_num_args("StartAge",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StartAge",1,"ParticleSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_StartAge_get",1,SWIGTYPE_p_ParticleSystem);
  }
  
  result = (float) ((arg1)->StartAge);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_PartAccel_set(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  LLVector3 *arg2 = (LLVector3 *) 0 ;
  
  SWIG_check_num_args("PartAccel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PartAccel",1,"ParticleSystem *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("PartAccel",2,"LLVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_PartAccel_set",1,SWIGTYPE_p_ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("ParticleSystem_PartAccel_set",2,SWIGTYPE_p_LLVector3);
  }
  
  if (arg1) (arg1)->PartAccel = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_PartAccel_get(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  LLVector3 *result = 0 ;
  
  SWIG_check_num_args("PartAccel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PartAccel",1,"ParticleSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_PartAccel_get",1,SWIGTYPE_p_ParticleSystem);
  }
  
  result = (LLVector3 *)& ((arg1)->PartAccel);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParticleSystem__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *result = 0 ;
  
  SWIG_check_num_args("ParticleSystem",0,0)
  result = (ParticleSystem *)new ParticleSystem();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ParticleSystem,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParticleSystem__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  ParticleSystem *result = 0 ;
  
  SWIG_check_num_args("ParticleSystem",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ParticleSystem",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_strlen(L,1));
  result = (ParticleSystem *)new ParticleSystem(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ParticleSystem,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParticleSystem(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ParticleSystem__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ParticleSystem__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_ParticleSystem'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ParticleSystem()\n"
    "    ParticleSystem(std::string)\n");
  lua_error(L);return 0;
}


static int _wrap_ParticleSystem_SetImageFromFile(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  std::string arg2 ;
  
  SWIG_check_num_args("SetImageFromFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetImageFromFile",1,"ParticleSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("SetImageFromFile",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_SetImageFromFile",1,SWIGTYPE_p_ParticleSystem);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  (arg1)->SetImageFromFile(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_SetImageFromUUID(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  std::string arg2 ;
  
  SWIG_check_num_args("SetImageFromUUID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetImageFromUUID",1,"ParticleSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("SetImageFromUUID",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_SetImageFromUUID",1,SWIGTYPE_p_ParticleSystem);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  (arg1)->SetImageFromUUID(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_GetImageUUID(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  std::string result;
  
  SWIG_check_num_args("GetImageUUID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetImageUUID",1,"ParticleSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_GetImageUUID",1,SWIGTYPE_p_ParticleSystem);
  }
  
  result = (arg1)->GetImageUUID();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_GetTargetUUID(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  std::string result;
  
  SWIG_check_num_args("GetTargetUUID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetTargetUUID",1,"ParticleSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_GetTargetUUID",1,SWIGTYPE_p_ParticleSystem);
  }
  
  result = (arg1)->GetTargetUUID();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_SetTargetUUID(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  std::string arg2 ;
  
  SWIG_check_num_args("SetTargetUUID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetTargetUUID",1,"ParticleSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("SetTargetUUID",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_SetTargetUUID",1,SWIGTYPE_p_ParticleSystem);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  (arg1)->SetTargetUUID(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_AttachToObject(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  LLUUID arg2 ;
  LLUUID arg3 ;
  
  SWIG_check_num_args("AttachToObject",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttachToObject",1,"ParticleSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("AttachToObject",2,"LLUUID");
  if(!lua_isstring(L,3)) SWIG_fail_arg("AttachToObject",3,"LLUUID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_AttachToObject",1,SWIGTYPE_p_ParticleSystem);
  }
  
  
  SWIG_contract_assert((&arg2)->set(lua_tostring(L,2),false),"Must be of UUID format.");
  
  
  SWIG_contract_assert((&arg3)->set(lua_tostring(L,3),false),"Must be of UUID format.");
  
  (arg1)->AttachToObject(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_AddFlag(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("AddFlag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddFlag",1,"ParticleSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AddFlag",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_AddFlag",1,SWIGTYPE_p_ParticleSystem);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->AddFlag(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_RemoveFlag(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("RemoveFlag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RemoveFlag",1,"ParticleSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RemoveFlag",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_RemoveFlag",1,SWIGTYPE_p_ParticleSystem);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->RemoveFlag(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_asParticleSystem(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  LLPartSysData result;
  
  SWIG_check_num_args("asParticleSystem",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("asParticleSystem",1,"ParticleSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_asParticleSystem",1,SWIGTYPE_p_ParticleSystem);
  }
  
  result = (arg1)->asParticleSystem();
  {
    LLPartSysData * resultptr = new LLPartSysData((const LLPartSysData &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLPartSysData,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParticleSystem(void *obj) {
ParticleSystem *arg1 = (ParticleSystem *) obj;
delete arg1;
}
static swig_lua_method swig_ParticleSystem_methods[] = {
    {"SetImageFromFile", _wrap_ParticleSystem_SetImageFromFile}, 
    {"SetImageFromUUID", _wrap_ParticleSystem_SetImageFromUUID}, 
    {"GetImageUUID", _wrap_ParticleSystem_GetImageUUID}, 
    {"GetTargetUUID", _wrap_ParticleSystem_GetTargetUUID}, 
    {"SetTargetUUID", _wrap_ParticleSystem_SetTargetUUID}, 
    {"AttachToObject", _wrap_ParticleSystem_AttachToObject}, 
    {"AddFlag", _wrap_ParticleSystem_AddFlag}, 
    {"RemoveFlag", _wrap_ParticleSystem_RemoveFlag}, 
    {"asParticleSystem", _wrap_ParticleSystem_asParticleSystem}, 
    {0,0}
};
static swig_lua_attribute swig_ParticleSystem_attributes[] = {
    { "ParticleMaxAge", _wrap_ParticleSystem_ParticleMaxAge_get, _wrap_ParticleSystem_ParticleMaxAge_set},
    { "StartColor", _wrap_ParticleSystem_StartColor_get, _wrap_ParticleSystem_StartColor_set},
    { "EndColor", _wrap_ParticleSystem_EndColor_get, _wrap_ParticleSystem_EndColor_set},
    { "StartScale", _wrap_ParticleSystem_StartScale_get, _wrap_ParticleSystem_StartScale_set},
    { "EndScale", _wrap_ParticleSystem_EndScale_get, _wrap_ParticleSystem_EndScale_set},
    { "PosOffset", _wrap_ParticleSystem_PosOffset_get, _wrap_ParticleSystem_PosOffset_set},
    { "Parameter", _wrap_ParticleSystem_Parameter_get, _wrap_ParticleSystem_Parameter_set},
    { "SystemFlags", _wrap_ParticleSystem_SystemFlags_get, _wrap_ParticleSystem_SystemFlags_set},
    { "Pattern", _wrap_ParticleSystem_Pattern_get, _wrap_ParticleSystem_Pattern_set},
    { "InnerAngle", _wrap_ParticleSystem_InnerAngle_get, _wrap_ParticleSystem_InnerAngle_set},
    { "OuterAngle", _wrap_ParticleSystem_OuterAngle_get, _wrap_ParticleSystem_OuterAngle_set},
    { "AngularVelocity", _wrap_ParticleSystem_AngularVelocity_get, _wrap_ParticleSystem_AngularVelocity_set},
    { "BurstRate", _wrap_ParticleSystem_BurstRate_get, _wrap_ParticleSystem_BurstRate_set},
    { "BurstPartCount", _wrap_ParticleSystem_BurstPartCount_get, _wrap_ParticleSystem_BurstPartCount_set},
    { "BurstRadius", _wrap_ParticleSystem_BurstRadius_get, _wrap_ParticleSystem_BurstRadius_set},
    { "BurstSpeedMin", _wrap_ParticleSystem_BurstSpeedMin_get, _wrap_ParticleSystem_BurstSpeedMin_set},
    { "BurstSpeedMax", _wrap_ParticleSystem_BurstSpeedMax_get, _wrap_ParticleSystem_BurstSpeedMax_set},
    { "SystemMaxAge", _wrap_ParticleSystem_SystemMaxAge_get, _wrap_ParticleSystem_SystemMaxAge_set},
    { "StartAge", _wrap_ParticleSystem_StartAge_get, _wrap_ParticleSystem_StartAge_set},
    { "PartAccel", _wrap_ParticleSystem_PartAccel_get, _wrap_ParticleSystem_PartAccel_set},
    {0,0,0}
};
static swig_lua_class *swig_ParticleSystem_bases[] = {0};
static const char *swig_ParticleSystem_base_names[] = {0};
static swig_lua_class _wrap_class_ParticleSystem = { "ParticleSystem", &SWIGTYPE_p_ParticleSystem,_wrap_new_ParticleSystem, swig_delete_ParticleSystem, swig_ParticleSystem_methods, swig_ParticleSystem_attributes, swig_ParticleSystem_bases, swig_ParticleSystem_base_names };

static int _wrap_ClearParticlesFromObject_Event(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  SWIG_check_num_args("ClearParticlesFromObject_Event",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ClearParticlesFromObject_Event",1,"std::string &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ClearParticlesFromObject_Event",2,"std::string &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("ClearParticlesFromObject_Event",1,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("ClearParticlesFromObject_Event",2,SWIGTYPE_p_std__string);
  }
  
  ClearParticlesFromObject_Event(*arg1,*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClearParticlesFromObject(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  std::string arg2 ;
  
  SWIG_check_num_args("ClearParticlesFromObject",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ClearParticlesFromObject",1,"std::string");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ClearParticlesFromObject",2,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_strlen(L,1));
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  ClearParticlesFromObject(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLWater_SetNormalMap(lua_State* L) {
  int SWIG_arg = 0;
  LLUUID *arg1 = 0 ;
  LLUUID temp1 ;
  
  SWIG_check_num_args("WLWater::SetNormalMap",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("WLWater::SetNormalMap",1,"LLUUID const &");
  SWIG_contract_assert(temp1.set(lua_tostring(L,1),false),"Must be of UUID format.")
  arg1=&temp1;
  WLWater::SetNormalMap((LLUUID const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLWater_GetNormalMap(lua_State* L) {
  int SWIG_arg = 0;
  LLUUID result;
  
  SWIG_check_num_args("WLWater::GetNormalMap",0,0)
  result = WLWater::GetNormalMap();
  
  lua_pushlstring(L,(&result)->asString().data(),(&result)->asString().size()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLWater_SetFogColor(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = 0 ;
  
  SWIG_check_num_args("WLWater::SetFogColor",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("WLWater::SetFogColor",1,"LLVector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("WLWater_SetFogColor",1,SWIGTYPE_p_LLVector4);
  }
  
  WLWater::SetFogColor((LLVector4 const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLWater_GetFogColor(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 result;
  
  SWIG_check_num_args("WLWater::GetFogColor",0,0)
  result = WLWater::GetFogColor();
  {
    LLVector4 * resultptr = new LLVector4((const LLVector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLVector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLWater_SetFogDensity(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("WLWater::SetFogDensity",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("WLWater::SetFogDensity",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  WLWater::SetFogDensity(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLWater_GetFogDensity(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("WLWater::GetFogDensity",0,0)
  result = (float)WLWater::GetFogDensity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLWater_SetUnderwaterFogMod(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("WLWater::SetUnderwaterFogMod",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("WLWater::SetUnderwaterFogMod",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  WLWater::SetUnderwaterFogMod(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLWater_GetUnderwaterFogMod(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("WLWater::GetUnderwaterFogMod",0,0)
  result = (float)WLWater::GetUnderwaterFogMod();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLWater_SetNormalScale(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 *arg1 = 0 ;
  
  SWIG_check_num_args("WLWater::SetNormalScale",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("WLWater::SetNormalScale",1,"LLVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("WLWater_SetNormalScale",1,SWIGTYPE_p_LLVector3);
  }
  
  WLWater::SetNormalScale((LLVector3 const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLWater_GetNormalScale(lua_State* L) {
  int SWIG_arg = 0;
  LLVector3 result;
  
  SWIG_check_num_args("WLWater::GetNormalScale",0,0)
  result = WLWater::GetNormalScale();
  {
    LLVector3 * resultptr = new LLVector3((const LLVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLWater_SetFresnelScale(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("WLWater::SetFresnelScale",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("WLWater::SetFresnelScale",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  WLWater::SetFresnelScale(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLWater_GetFresnelScale(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("WLWater::GetFresnelScale",0,0)
  result = (float)WLWater::GetFresnelScale();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLWater_SetFresnelOffset(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("WLWater::SetFresnelOffset",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("WLWater::SetFresnelOffset",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  WLWater::SetFresnelOffset(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLWater_GetFresnelOffset(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("WLWater::GetFresnelOffset",0,0)
  result = (float)WLWater::GetFresnelOffset();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLWater_SetScaleAbove(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("WLWater::SetScaleAbove",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("WLWater::SetScaleAbove",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  WLWater::SetScaleAbove(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLWater_GetScaleAbove(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("WLWater::GetScaleAbove",0,0)
  result = (float)WLWater::GetScaleAbove();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLWater_SetScaleBelow(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("WLWater::SetScaleBelow",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("WLWater::SetScaleBelow",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  WLWater::SetScaleBelow(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLWater_GetScaleBelow(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("WLWater::GetScaleBelow",0,0)
  result = (float)WLWater::GetScaleBelow();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLWater_SetBlurMultiplier(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("WLWater::SetBlurMultiplier",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("WLWater::SetBlurMultiplier",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  WLWater::SetBlurMultiplier(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLWater_GetBlurMultiplier(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("WLWater::GetBlurMultiplier",0,0)
  result = (float)WLWater::GetBlurMultiplier();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLWater_SetWave1Dir(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 arg1 ;
  LLVector2 *argp1 ;
  
  SWIG_check_num_args("WLWater::SetWave1Dir",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("WLWater::SetWave1Dir",1,"LLVector2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("WLWater_SetWave1Dir",1,SWIGTYPE_p_LLVector2);
  }
  arg1 = *argp1;
  
  WLWater::SetWave1Dir(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLWater_GetWave1Dir(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 result;
  
  SWIG_check_num_args("WLWater::GetWave1Dir",0,0)
  result = WLWater::GetWave1Dir();
  {
    LLVector2 * resultptr = new LLVector2((const LLVector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLVector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLWater_SetWave2Dir(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 arg1 ;
  LLVector2 *argp1 ;
  
  SWIG_check_num_args("WLWater::SetWave2Dir",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("WLWater::SetWave2Dir",1,"LLVector2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("WLWater_SetWave2Dir",1,SWIGTYPE_p_LLVector2);
  }
  arg1 = *argp1;
  
  WLWater::SetWave2Dir(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLWater_GetWave2Dir(lua_State* L) {
  int SWIG_arg = 0;
  LLVector2 result;
  
  SWIG_check_num_args("WLWater::GetWave2Dir",0,0)
  result = WLWater::GetWave2Dir();
  {
    LLVector2 * resultptr = new LLVector2((const LLVector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLVector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WLWater(lua_State* L) {
  int SWIG_arg = 0;
  WLWater *result = 0 ;
  
  SWIG_check_num_args("WLWater::WLWater",0,0)
  result = (WLWater *)new WLWater();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_WLWater,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WLWater(void *obj) {
WLWater *arg1 = (WLWater *) obj;
delete arg1;
}
static swig_lua_method swig_WLWater_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_WLWater_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_WLWater_bases[] = {0};
static const char *swig_WLWater_base_names[] = {0};
static swig_lua_class _wrap_class_WLWater = { "WLWater", &SWIGTYPE_p_WLWater,_wrap_new_WLWater, swig_delete_WLWater, swig_WLWater_methods, swig_WLWater_attributes, swig_WLWater_bases, swig_WLWater_base_names };

static int _wrap_WLSky_SetSunDeltaYaw(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("WLSky::SetSunDeltaYaw",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("WLSky::SetSunDeltaYaw",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  WLSky::SetSunDeltaYaw(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLSky_GetSunDeltaYaw(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("WLSky::GetSunDeltaYaw",0,0)
  result = (float)WLSky::GetSunDeltaYaw();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLSky_SetSceneLightStrength(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("WLSky::SetSceneLightStrength",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("WLSky::SetSceneLightStrength",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  WLSky::SetSceneLightStrength(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLSky_GetSceneLightStrength(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("WLSky::GetSceneLightStrength",0,0)
  result = (float)WLSky::GetSceneLightStrength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLSky_SetGamma(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("WLSky::SetGamma",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("WLSky::SetGamma",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  WLSky::SetGamma(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLSky_GetGamma(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("WLSky::GetGamma",0,0)
  result = (float)WLSky::GetGamma();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLSky_SetBlueHorizon(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = 0 ;
  
  SWIG_check_num_args("WLSky::SetBlueHorizon",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("WLSky::SetBlueHorizon",1,"LLVector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("WLSky_SetBlueHorizon",1,SWIGTYPE_p_LLVector4);
  }
  
  WLSky::SetBlueHorizon((LLVector4 const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLSky_GetBlueHorizon(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 result;
  
  SWIG_check_num_args("WLSky::GetBlueHorizon",0,0)
  result = WLSky::GetBlueHorizon();
  {
    LLVector4 * resultptr = new LLVector4((const LLVector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLVector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLSky_SetHazeDensity(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = 0 ;
  
  SWIG_check_num_args("WLSky::SetHazeDensity",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("WLSky::SetHazeDensity",1,"LLVector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("WLSky_SetHazeDensity",1,SWIGTYPE_p_LLVector4);
  }
  
  WLSky::SetHazeDensity((LLVector4 const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLSky_GetHazeDensity(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 result;
  
  SWIG_check_num_args("WLSky::GetHazeDensity",0,0)
  result = WLSky::GetHazeDensity();
  {
    LLVector4 * resultptr = new LLVector4((const LLVector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLVector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLSky_SetBlueDensity(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = 0 ;
  
  SWIG_check_num_args("WLSky::SetBlueDensity",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("WLSky::SetBlueDensity",1,"LLVector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("WLSky_SetBlueDensity",1,SWIGTYPE_p_LLVector4);
  }
  
  WLSky::SetBlueDensity((LLVector4 const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLSky_GetBlueDensity(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 result;
  
  SWIG_check_num_args("WLSky::GetBlueDensity",0,0)
  result = WLSky::GetBlueDensity();
  {
    LLVector4 * resultptr = new LLVector4((const LLVector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLVector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLSky_SetDensityMultiplier(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("WLSky::SetDensityMultiplier",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("WLSky::SetDensityMultiplier",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  WLSky::SetDensityMultiplier(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLSky_GetDensityMultiplier(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("WLSky::GetDensityMultiplier",0,0)
  result = (float)WLSky::GetDensityMultiplier();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLSky_SetHazeHorizon(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = 0 ;
  
  SWIG_check_num_args("WLSky::SetHazeHorizon",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("WLSky::SetHazeHorizon",1,"LLVector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("WLSky_SetHazeHorizon",1,SWIGTYPE_p_LLVector4);
  }
  
  WLSky::SetHazeHorizon((LLVector4 const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLSky_GetHazeHorizon(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 result;
  
  SWIG_check_num_args("WLSky::GetHazeHorizon",0,0)
  result = WLSky::GetHazeHorizon();
  {
    LLVector4 * resultptr = new LLVector4((const LLVector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLVector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLSky_SetMaxAltitude(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("WLSky::SetMaxAltitude",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("WLSky::SetMaxAltitude",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  WLSky::SetMaxAltitude(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLSky_GetMaxAltitude(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("WLSky::GetMaxAltitude",0,0)
  result = (float)WLSky::GetMaxAltitude();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLSky_SetLightNorm(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = 0 ;
  
  SWIG_check_num_args("WLSky::SetLightNorm",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("WLSky::SetLightNorm",1,"LLVector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("WLSky_SetLightNorm",1,SWIGTYPE_p_LLVector4);
  }
  
  WLSky::SetLightNorm((LLVector4 const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLSky_GetLightNorm(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 result;
  
  SWIG_check_num_args("WLSky::GetLightNorm",0,0)
  result = WLSky::GetLightNorm();
  {
    LLVector4 * resultptr = new LLVector4((const LLVector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLVector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLSky_SetSunlight(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = 0 ;
  
  SWIG_check_num_args("WLSky::SetSunlight",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("WLSky::SetSunlight",1,"LLVector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("WLSky_SetSunlight",1,SWIGTYPE_p_LLVector4);
  }
  
  WLSky::SetSunlight((LLVector4 const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLSky_GetSunlight(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 result;
  
  SWIG_check_num_args("WLSky::GetSunlight",0,0)
  result = WLSky::GetSunlight();
  {
    LLVector4 * resultptr = new LLVector4((const LLVector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLVector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLSky_SetAmbient(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = 0 ;
  
  SWIG_check_num_args("WLSky::SetAmbient",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("WLSky::SetAmbient",1,"LLVector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("WLSky_SetAmbient",1,SWIGTYPE_p_LLVector4);
  }
  
  WLSky::SetAmbient((LLVector4 const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLSky_GetAmbient(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 result;
  
  SWIG_check_num_args("WLSky::GetAmbient",0,0)
  result = WLSky::GetAmbient();
  {
    LLVector4 * resultptr = new LLVector4((const LLVector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLVector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLSky_SetGlow(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = 0 ;
  
  SWIG_check_num_args("WLSky::SetGlow",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("WLSky::SetGlow",1,"LLVector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("WLSky_SetGlow",1,SWIGTYPE_p_LLVector4);
  }
  
  WLSky::SetGlow((LLVector4 const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLSky_GetGlow(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 result;
  
  SWIG_check_num_args("WLSky::GetGlow",0,0)
  result = WLSky::GetGlow();
  {
    LLVector4 * resultptr = new LLVector4((const LLVector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLVector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLSky_SetCloudColor(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = 0 ;
  
  SWIG_check_num_args("WLSky::SetCloudColor",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("WLSky::SetCloudColor",1,"LLVector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("WLSky_SetCloudColor",1,SWIGTYPE_p_LLVector4);
  }
  
  WLSky::SetCloudColor((LLVector4 const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLSky_GetCloudColor(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 result;
  
  SWIG_check_num_args("WLSky::GetCloudColor",0,0)
  result = WLSky::GetCloudColor();
  {
    LLVector4 * resultptr = new LLVector4((const LLVector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLVector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLSky_SetCloudDensity1(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = 0 ;
  
  SWIG_check_num_args("WLSky::SetCloudDensity1",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("WLSky::SetCloudDensity1",1,"LLVector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("WLSky_SetCloudDensity1",1,SWIGTYPE_p_LLVector4);
  }
  
  WLSky::SetCloudDensity1((LLVector4 const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLSky_GetCloudDensity1(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 result;
  
  SWIG_check_num_args("WLSky::GetCloudDensity1",0,0)
  result = WLSky::GetCloudDensity1();
  {
    LLVector4 * resultptr = new LLVector4((const LLVector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLVector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLSky_SetCloudCoverage(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("WLSky::SetCloudCoverage",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("WLSky::SetCloudCoverage",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  WLSky::SetCloudCoverage(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLSky_GetCloudCoverage(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("WLSky::GetCloudCoverage",0,0)
  result = (float)WLSky::GetCloudCoverage();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLSky_SetCloudDensity2(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 *arg1 = 0 ;
  
  SWIG_check_num_args("WLSky::SetCloudDensity2",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("WLSky::SetCloudDensity2",1,"LLVector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVector4,0))){
    SWIG_fail_ptr("WLSky_SetCloudDensity2",1,SWIGTYPE_p_LLVector4);
  }
  
  WLSky::SetCloudDensity2((LLVector4 const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLSky_GetCloudDensity2(lua_State* L) {
  int SWIG_arg = 0;
  LLVector4 result;
  
  SWIG_check_num_args("WLSky::GetCloudDensity2",0,0)
  result = WLSky::GetCloudDensity2();
  {
    LLVector4 * resultptr = new LLVector4((const LLVector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLVector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLSky_SetDistanceMult(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("WLSky::SetDistanceMult",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("WLSky::SetDistanceMult",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  WLSky::SetDistanceMult(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLSky_GetDistanceMult(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("WLSky::GetDistanceMult",0,0)
  result = (float)WLSky::GetDistanceMult();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLSky_SetCloudScale(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("WLSky::SetCloudScale",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("WLSky::SetCloudScale",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  WLSky::SetCloudScale(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WLSky_GetCloudScale(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("WLSky::GetCloudScale",0,0)
  result = (float)WLSky::GetCloudScale();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WLSky(lua_State* L) {
  int SWIG_arg = 0;
  WLSky *result = 0 ;
  
  SWIG_check_num_args("WLSky::WLSky",0,0)
  result = (WLSky *)new WLSky();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_WLSky,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WLSky(void *obj) {
WLSky *arg1 = (WLSky *) obj;
delete arg1;
}
static swig_lua_method swig_WLSky_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_WLSky_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_WLSky_bases[] = {0};
static const char *swig_WLSky_base_names[] = {0};
static swig_lua_class _wrap_class_WLSky = { "WLSky", &SWIGTYPE_p_WLSky,_wrap_new_WLSky, swig_delete_WLSky, swig_WLSky_methods, swig_WLSky_attributes, swig_WLSky_bases, swig_WLSky_base_names };

static int _wrap_new_UI(lua_State* L) {
  int SWIG_arg = 0;
  UI *result = 0 ;
  
  SWIG_check_num_args("UI::UI",0,0)
  result = (UI *)new UI();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_UI,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UI(void *obj) {
UI *arg1 = (UI *) obj;
delete arg1;
}
static swig_lua_method swig_UI_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_UI_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_UI_bases[] = {0};
static const char *swig_UI_base_names[] = {0};
static swig_lua_class _wrap_class_UI = { "UI", &SWIGTYPE_p_UI,_wrap_new_UI, swig_delete_UI, swig_UI_methods, swig_UI_attributes, swig_UI_bases, swig_UI_base_names };

#ifdef __cplusplus
}
#endif

static const struct luaL_reg swig_commands[] = {
    { "UUID_validate", _wrap_UUID_validate},
    { "print",LuaBase_print},
    { "isUUID", _wrap_isUUID},
    { "SendChat",_wrap_SendChat},
    { "LuaAlert", _wrap_LuaAlert},
    { "GetCWD", _wrap_GetCWD},
    { "RegionFromName", _wrap_RegionFromName},
    { "GetCurrentRegion", _wrap_GetCurrentRegion},
    { "error", _wrap_error},
    { "touch", _wrap_touch},
    { "say",_wrap_say},
    { "shout",_wrap_shout},
    { "whisper",_wrap_whisper},
    { "LuaSendRawChat", _wrap_LuaSendRawChat},
    { "tp",_wrap_tp},
    { "exists", _wrap_exists},
    { "getLuaFolder", _wrap_getLuaFolder},
    { "toLuaString", _wrap_toLuaString},
    { "muteAvatar", _wrap_muteAvatar},
    { "isMuted", _wrap_isMuted},
    { "UpdateAppearance", _wrap_UpdateAppearance},
    { "LuaDumpVisualParams", _wrap_LuaDumpVisualParams},
    { "LuaDumpVisualParamsToLuaCode", _wrap_LuaDumpVisualParamsToLuaCode},
    { "getParamDefaultWeight", _wrap_getParamDefaultWeight},
    { "getParamCurrentWeight", _wrap_getParamCurrentWeight},
    { "getParamMax", _wrap_getParamMax},
    { "getParamMin", _wrap_getParamMin},
    { "setParamOnSelf", _wrap_setParamOnSelf},
    { "setParamOnTarget", _wrap_setParamOnTarget},
    { "wear", _wrap_wear},
    { "RemoveAllWearables", _wrap_RemoveAllWearables},
    { "LuaSaveWearable", _wrap_LuaSaveWearable},
    { "LuaLoadWearable", _wrap_LuaLoadWearable},
    { "setTEImage", _wrap_setTEImage},
    { "HasPermissions", _wrap_HasPermissions},
    { "key2name", _wrap_key2name},
    { "name2key", _wrap_name2key},
    { "getCurrentParcel", _wrap_getCurrentParcel},
    { "getParcelOwner", _wrap_getParcelOwner},
    { "getMyID", _wrap_getMyID},
    { "getMyName", _wrap_getMyName},
    { "LuaGetAvatar", _wrap_LuaGetAvatar},
    { "dist_vec_squared2D",_wrap_dist_vec_squared2D},
    { "projected_vec", _wrap_projected_vec},
    { "update_min_max",_wrap_update_min_max},
    { "angle_between",_wrap_angle_between},
    { "are_parallel",_wrap_are_parallel},
    { "dist_vec",_wrap_dist_vec},
    { "dist_vec_squared",_wrap_dist_vec_squared},
    { "LLColor4_parseColor", _wrap_LLColor4_parseColor},
    { "LLColor4_parseColor4", _wrap_LLColor4_parseColor4},
    { "distVec", _wrap_distVec},
    { "distVec_squared", _wrap_distVec_squared},
    { "vec4to3",_wrap_vec4to3},
    { "vec3to4",_wrap_vec3to4},
    { "lerp",_wrap_lerp},
    { "Vector42LLColor4", _wrap_Vector42LLColor4},
    { "LLColor42Vector4", _wrap_LLColor42Vector4},
    { "ParticleSystem_AttachToObject_Event", _wrap_ParticleSystem_AttachToObject_Event},
    { "ClearParticlesFromObject_Event", _wrap_ClearParticlesFromObject_Event},
    { "ClearParticlesFromObject", _wrap_ClearParticlesFromObject},
    { "WLWater_SetNormalMap", _wrap_WLWater_SetNormalMap},
    { "WLWater_GetNormalMap", _wrap_WLWater_GetNormalMap},
    { "WLWater_SetFogColor", _wrap_WLWater_SetFogColor},
    { "WLWater_GetFogColor", _wrap_WLWater_GetFogColor},
    { "WLWater_SetFogDensity", _wrap_WLWater_SetFogDensity},
    { "WLWater_GetFogDensity", _wrap_WLWater_GetFogDensity},
    { "WLWater_SetUnderwaterFogMod", _wrap_WLWater_SetUnderwaterFogMod},
    { "WLWater_GetUnderwaterFogMod", _wrap_WLWater_GetUnderwaterFogMod},
    { "WLWater_SetNormalScale", _wrap_WLWater_SetNormalScale},
    { "WLWater_GetNormalScale", _wrap_WLWater_GetNormalScale},
    { "WLWater_SetFresnelScale", _wrap_WLWater_SetFresnelScale},
    { "WLWater_GetFresnelScale", _wrap_WLWater_GetFresnelScale},
    { "WLWater_SetFresnelOffset", _wrap_WLWater_SetFresnelOffset},
    { "WLWater_GetFresnelOffset", _wrap_WLWater_GetFresnelOffset},
    { "WLWater_SetScaleAbove", _wrap_WLWater_SetScaleAbove},
    { "WLWater_GetScaleAbove", _wrap_WLWater_GetScaleAbove},
    { "WLWater_SetScaleBelow", _wrap_WLWater_SetScaleBelow},
    { "WLWater_GetScaleBelow", _wrap_WLWater_GetScaleBelow},
    { "WLWater_SetBlurMultiplier", _wrap_WLWater_SetBlurMultiplier},
    { "WLWater_GetBlurMultiplier", _wrap_WLWater_GetBlurMultiplier},
    { "WLWater_SetWave1Dir", _wrap_WLWater_SetWave1Dir},
    { "WLWater_GetWave1Dir", _wrap_WLWater_GetWave1Dir},
    { "WLWater_SetWave2Dir", _wrap_WLWater_SetWave2Dir},
    { "WLWater_GetWave2Dir", _wrap_WLWater_GetWave2Dir},
    { "WLSky_SetSunDeltaYaw", _wrap_WLSky_SetSunDeltaYaw},
    { "WLSky_GetSunDeltaYaw", _wrap_WLSky_GetSunDeltaYaw},
    { "WLSky_SetSceneLightStrength", _wrap_WLSky_SetSceneLightStrength},
    { "WLSky_GetSceneLightStrength", _wrap_WLSky_GetSceneLightStrength},
    { "WLSky_SetGamma", _wrap_WLSky_SetGamma},
    { "WLSky_GetGamma", _wrap_WLSky_GetGamma},
    { "WLSky_SetBlueHorizon", _wrap_WLSky_SetBlueHorizon},
    { "WLSky_GetBlueHorizon", _wrap_WLSky_GetBlueHorizon},
    { "WLSky_SetHazeDensity", _wrap_WLSky_SetHazeDensity},
    { "WLSky_GetHazeDensity", _wrap_WLSky_GetHazeDensity},
    { "WLSky_SetBlueDensity", _wrap_WLSky_SetBlueDensity},
    { "WLSky_GetBlueDensity", _wrap_WLSky_GetBlueDensity},
    { "WLSky_SetDensityMultiplier", _wrap_WLSky_SetDensityMultiplier},
    { "WLSky_GetDensityMultiplier", _wrap_WLSky_GetDensityMultiplier},
    { "WLSky_SetHazeHorizon", _wrap_WLSky_SetHazeHorizon},
    { "WLSky_GetHazeHorizon", _wrap_WLSky_GetHazeHorizon},
    { "WLSky_SetMaxAltitude", _wrap_WLSky_SetMaxAltitude},
    { "WLSky_GetMaxAltitude", _wrap_WLSky_GetMaxAltitude},
    { "WLSky_SetLightNorm", _wrap_WLSky_SetLightNorm},
    { "WLSky_GetLightNorm", _wrap_WLSky_GetLightNorm},
    { "WLSky_SetSunlight", _wrap_WLSky_SetSunlight},
    { "WLSky_GetSunlight", _wrap_WLSky_GetSunlight},
    { "WLSky_SetAmbient", _wrap_WLSky_SetAmbient},
    { "WLSky_GetAmbient", _wrap_WLSky_GetAmbient},
    { "WLSky_SetGlow", _wrap_WLSky_SetGlow},
    { "WLSky_GetGlow", _wrap_WLSky_GetGlow},
    { "WLSky_SetCloudColor", _wrap_WLSky_SetCloudColor},
    { "WLSky_GetCloudColor", _wrap_WLSky_GetCloudColor},
    { "WLSky_SetCloudDensity1", _wrap_WLSky_SetCloudDensity1},
    { "WLSky_GetCloudDensity1", _wrap_WLSky_GetCloudDensity1},
    { "WLSky_SetCloudCoverage", _wrap_WLSky_SetCloudCoverage},
    { "WLSky_GetCloudCoverage", _wrap_WLSky_GetCloudCoverage},
    { "WLSky_SetCloudDensity2", _wrap_WLSky_SetCloudDensity2},
    { "WLSky_GetCloudDensity2", _wrap_WLSky_GetCloudDensity2},
    { "WLSky_SetDistanceMult", _wrap_WLSky_SetDistanceMult},
    { "WLSky_GetDistanceMult", _wrap_WLSky_GetDistanceMult},
    { "WLSky_SetCloudScale", _wrap_WLSky_SetCloudScale},
    { "WLSky_GetCloudScale", _wrap_WLSky_GetCloudScale},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    { "gAllowWorldMap", _wrap_gAllowWorldMap_get, _wrap_gAllowWorldMap_set },
    { "LLCharacter_sInstances", _wrap_LLCharacter_sInstances_get, _wrap_LLCharacter_sInstances_set },
    { "LENGTHOFVECTOR2", _wrap_LENGTHOFVECTOR2_get, SWIG_Lua_set_immutable },
    { "LLVector2_zero", _wrap_LLVector2_zero_get, _wrap_LLVector2_zero_set },
    { "LENGTHOFVECTOR3", _wrap_LENGTHOFVECTOR3_get, SWIG_Lua_set_immutable },
    { "LLVector3_zero", _wrap_LLVector3_zero_get, SWIG_Lua_set_immutable },
    { "LLVector3_x_axis", _wrap_LLVector3_x_axis_get, SWIG_Lua_set_immutable },
    { "LLVector3_y_axis", _wrap_LLVector3_y_axis_get, SWIG_Lua_set_immutable },
    { "LLVector3_z_axis", _wrap_LLVector3_z_axis_get, SWIG_Lua_set_immutable },
    { "LLVector3_x_axis_neg", _wrap_LLVector3_x_axis_neg_get, SWIG_Lua_set_immutable },
    { "LLVector3_y_axis_neg", _wrap_LLVector3_y_axis_neg_get, SWIG_Lua_set_immutable },
    { "LLVector3_z_axis_neg", _wrap_LLVector3_z_axis_neg_get, SWIG_Lua_set_immutable },
    { "LLVector3_all_one", _wrap_LLVector3_all_one_get, SWIG_Lua_set_immutable },
    { "LENGTHOFVECTOR4", _wrap_LENGTHOFVECTOR4_get, SWIG_Lua_set_immutable },
    { "LENGTHOFCOLOR4", _wrap_LENGTHOFCOLOR4_get, SWIG_Lua_set_immutable },
    { "MAX_LENGTH_OF_COLOR_NAME", _wrap_MAX_LENGTH_OF_COLOR_NAME_get, SWIG_Lua_set_immutable },
    { "LLColor4_red", _wrap_LLColor4_red_get, _wrap_LLColor4_red_set },
    { "LLColor4_green", _wrap_LLColor4_green_get, _wrap_LLColor4_green_set },
    { "LLColor4_blue", _wrap_LLColor4_blue_get, _wrap_LLColor4_blue_set },
    { "LLColor4_black", _wrap_LLColor4_black_get, _wrap_LLColor4_black_set },
    { "LLColor4_white", _wrap_LLColor4_white_get, _wrap_LLColor4_white_set },
    { "LLColor4_yellow", _wrap_LLColor4_yellow_get, _wrap_LLColor4_yellow_set },
    { "LLColor4_magenta", _wrap_LLColor4_magenta_get, _wrap_LLColor4_magenta_set },
    { "LLColor4_cyan", _wrap_LLColor4_cyan_get, _wrap_LLColor4_cyan_set },
    { "LLColor4_smoke", _wrap_LLColor4_smoke_get, _wrap_LLColor4_smoke_set },
    { "LLColor4_grey", _wrap_LLColor4_grey_get, _wrap_LLColor4_grey_set },
    { "LLColor4_orange", _wrap_LLColor4_orange_get, _wrap_LLColor4_orange_set },
    { "LLColor4_purple", _wrap_LLColor4_purple_get, _wrap_LLColor4_purple_set },
    { "LLColor4_pink", _wrap_LLColor4_pink_get, _wrap_LLColor4_pink_set },
    { "LLColor4_transparent", _wrap_LLColor4_transparent_get, _wrap_LLColor4_transparent_set },
    { "LLColor4_grey1", _wrap_LLColor4_grey1_get, _wrap_LLColor4_grey1_set },
    { "LLColor4_grey2", _wrap_LLColor4_grey2_get, _wrap_LLColor4_grey2_set },
    { "LLColor4_grey3", _wrap_LLColor4_grey3_get, _wrap_LLColor4_grey3_set },
    { "LLColor4_grey4", _wrap_LLColor4_grey4_get, _wrap_LLColor4_grey4_set },
    { "LLColor4_red1", _wrap_LLColor4_red1_get, _wrap_LLColor4_red1_set },
    { "LLColor4_red2", _wrap_LLColor4_red2_get, _wrap_LLColor4_red2_set },
    { "LLColor4_red3", _wrap_LLColor4_red3_get, _wrap_LLColor4_red3_set },
    { "LLColor4_red4", _wrap_LLColor4_red4_get, _wrap_LLColor4_red4_set },
    { "LLColor4_red5", _wrap_LLColor4_red5_get, _wrap_LLColor4_red5_set },
    { "LLColor4_green1", _wrap_LLColor4_green1_get, _wrap_LLColor4_green1_set },
    { "LLColor4_green2", _wrap_LLColor4_green2_get, _wrap_LLColor4_green2_set },
    { "LLColor4_green3", _wrap_LLColor4_green3_get, _wrap_LLColor4_green3_set },
    { "LLColor4_green4", _wrap_LLColor4_green4_get, _wrap_LLColor4_green4_set },
    { "LLColor4_green5", _wrap_LLColor4_green5_get, _wrap_LLColor4_green5_set },
    { "LLColor4_green6", _wrap_LLColor4_green6_get, _wrap_LLColor4_green6_set },
    { "LLColor4_blue1", _wrap_LLColor4_blue1_get, _wrap_LLColor4_blue1_set },
    { "LLColor4_blue2", _wrap_LLColor4_blue2_get, _wrap_LLColor4_blue2_set },
    { "LLColor4_blue3", _wrap_LLColor4_blue3_get, _wrap_LLColor4_blue3_set },
    { "LLColor4_blue4", _wrap_LLColor4_blue4_get, _wrap_LLColor4_blue4_set },
    { "LLColor4_blue5", _wrap_LLColor4_blue5_get, _wrap_LLColor4_blue5_set },
    { "LLColor4_blue6", _wrap_LLColor4_blue6_get, _wrap_LLColor4_blue6_set },
    { "LLColor4_yellow1", _wrap_LLColor4_yellow1_get, _wrap_LLColor4_yellow1_set },
    { "LLColor4_yellow2", _wrap_LLColor4_yellow2_get, _wrap_LLColor4_yellow2_set },
    { "LLColor4_yellow3", _wrap_LLColor4_yellow3_get, _wrap_LLColor4_yellow3_set },
    { "LLColor4_yellow4", _wrap_LLColor4_yellow4_get, _wrap_LLColor4_yellow4_set },
    { "LLColor4_yellow5", _wrap_LLColor4_yellow5_get, _wrap_LLColor4_yellow5_set },
    { "LLColor4_yellow6", _wrap_LLColor4_yellow6_get, _wrap_LLColor4_yellow6_set },
    { "LLColor4_yellow7", _wrap_LLColor4_yellow7_get, _wrap_LLColor4_yellow7_set },
    { "LLColor4_yellow8", _wrap_LLColor4_yellow8_get, _wrap_LLColor4_yellow8_set },
    { "LLColor4_yellow9", _wrap_LLColor4_yellow9_get, _wrap_LLColor4_yellow9_set },
    { "LLColor4_orange1", _wrap_LLColor4_orange1_get, _wrap_LLColor4_orange1_set },
    { "LLColor4_orange2", _wrap_LLColor4_orange2_get, _wrap_LLColor4_orange2_set },
    { "LLColor4_orange3", _wrap_LLColor4_orange3_get, _wrap_LLColor4_orange3_set },
    { "LLColor4_orange4", _wrap_LLColor4_orange4_get, _wrap_LLColor4_orange4_set },
    { "LLColor4_orange5", _wrap_LLColor4_orange5_get, _wrap_LLColor4_orange5_set },
    { "LLColor4_orange6", _wrap_LLColor4_orange6_get, _wrap_LLColor4_orange6_set },
    { "LLColor4_magenta1", _wrap_LLColor4_magenta1_get, _wrap_LLColor4_magenta1_set },
    { "LLColor4_magenta2", _wrap_LLColor4_magenta2_get, _wrap_LLColor4_magenta2_set },
    { "LLColor4_magenta3", _wrap_LLColor4_magenta3_get, _wrap_LLColor4_magenta3_set },
    { "LLColor4_magenta4", _wrap_LLColor4_magenta4_get, _wrap_LLColor4_magenta4_set },
    { "LLColor4_purple1", _wrap_LLColor4_purple1_get, _wrap_LLColor4_purple1_set },
    { "LLColor4_purple2", _wrap_LLColor4_purple2_get, _wrap_LLColor4_purple2_set },
    { "LLColor4_purple3", _wrap_LLColor4_purple3_get, _wrap_LLColor4_purple3_set },
    { "LLColor4_purple4", _wrap_LLColor4_purple4_get, _wrap_LLColor4_purple4_set },
    { "LLColor4_purple5", _wrap_LLColor4_purple5_get, _wrap_LLColor4_purple5_set },
    { "LLColor4_purple6", _wrap_LLColor4_purple6_get, _wrap_LLColor4_purple6_set },
    { "LLColor4_pink1", _wrap_LLColor4_pink1_get, _wrap_LLColor4_pink1_set },
    { "LLColor4_pink2", _wrap_LLColor4_pink2_get, _wrap_LLColor4_pink2_set },
    { "LLColor4_cyan1", _wrap_LLColor4_cyan1_get, _wrap_LLColor4_cyan1_set },
    { "LLColor4_cyan2", _wrap_LLColor4_cyan2_get, _wrap_LLColor4_cyan2_set },
    { "LLColor4_cyan3", _wrap_LLColor4_cyan3_get, _wrap_LLColor4_cyan3_set },
    { "LLColor4_cyan4", _wrap_LLColor4_cyan4_get, _wrap_LLColor4_cyan4_set },
    { "LLColor4_cyan5", _wrap_LLColor4_cyan5_get, _wrap_LLColor4_cyan5_set },
    { "LLColor4_cyan6", _wrap_LLColor4_cyan6_get, _wrap_LLColor4_cyan6_set },
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
{ SWIG_LUA_STRING,  (char *)"UUID_null", 0, 0, (void *)"00000000-0000-0000-0000-000000000000", 0},
{ SWIG_LUA_INT,     (char *)"LLCharacter_NORMAL_UPDATE", (long) LLCharacter::NORMAL_UPDATE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LLCharacter_HIDDEN_UPDATE", (long) LLCharacter::HIDDEN_UPDATE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LLCharacter_FORCE_UPDATE", (long) LLCharacter::FORCE_UPDATE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ParticleSystem_DROP", (long) ParticleSystem::DROP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ParticleSystem_EXPLODE", (long) ParticleSystem::EXPLODE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ParticleSystem_ANGLE", (long) ParticleSystem::ANGLE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ParticleSystem_ANGLE_CONE", (long) ParticleSystem::ANGLE_CONE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ParticleSystem_CONE_EMPTY", (long) ParticleSystem::CONE_EMPTY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ParticleSystem_INTERP_COLOR_MASK", (long) ParticleSystem::INTERP_COLOR_MASK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ParticleSystem_INTERP_SCALE_MASK", (long) ParticleSystem::INTERP_SCALE_MASK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ParticleSystem_BOUNCE_MASK", (long) ParticleSystem::BOUNCE_MASK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ParticleSystem_WIND_MASK", (long) ParticleSystem::WIND_MASK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ParticleSystem_FOLLOW_SRC_MASK", (long) ParticleSystem::FOLLOW_SRC_MASK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ParticleSystem_FOLLOW_VELOCITY_MASK", (long) ParticleSystem::FOLLOW_VELOCITY_MASK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ParticleSystem_TARGET_POS_MASK", (long) ParticleSystem::TARGET_POS_MASK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ParticleSystem_TARGET_LINEAR_MASK", (long) ParticleSystem::TARGET_LINEAR_MASK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ParticleSystem_EMISSIVE_MASK", (long) ParticleSystem::EMISSIVE_MASK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ParticleSystem_BEAM_MASK", (long) ParticleSystem::BEAM_MASK, 0, 0, 0},
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_EAnimate = {"_p_EAnimate", "EAnimate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ESex = {"_p_ESex", "ESex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EVOType = {"_p_EVOType", "EVOType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLCharacter = {"_p_LLCharacter", "LLCharacter *", 0, 0, (void*)&_wrap_class_LLCharacter, 0};
static swig_type_info _swigt__p_LLColor3 = {"_p_LLColor3", "LLColor3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLColor4 = {"_p_LLColor4", "LLColor4 *", 0, 0, (void*)&_wrap_class_LLColor4, 0};
static swig_type_info _swigt__p_LLColor4U = {"_p_LLColor4U", "LLColor4U *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLJoint = {"_p_LLJoint", "LLJoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLMatrix3 = {"_p_LLMatrix3", "LLMatrix3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLMatrix4 = {"_p_LLMatrix4", "LLMatrix4 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLMotion = {"_p_LLMotion", "LLMotion *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLMotionConstructor = {"_p_LLMotionConstructor", "LLMotionConstructor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLMotionController = {"_p_LLMotionController", "LLMotionController *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLParcel = {"_p_LLParcel", "LLParcel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLPartSysData = {"_p_LLPartSysData", "LLPartSysData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLPauseRequestHandle = {"_p_LLPauseRequestHandle", "LLPauseRequestHandle *", 0, 0, (void*)&_wrap_class_LLPauseRequestHandle, 0};
static swig_type_info _swigt__p_LLPointerT_LLPauseRequestHandle_t = {"_p_LLPointerT_LLPauseRequestHandle_t", "LLAnimPauseRequest *|LLPointer< LLPauseRequestHandle > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLPolyMesh = {"_p_LLPolyMesh", "LLPolyMesh *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLQuaternion = {"_p_LLQuaternion", "LLQuaternion *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLSD = {"_p_LLSD", "LLSD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLSafeHandleT_LLObjectSelection_t = {"_p_LLSafeHandleT_LLObjectSelection_t", "LLSafeHandle< LLObjectSelection > *|LLObjectSelectionHandle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLUUID = {"_p_LLUUID", "LLUUID *", 0, 0, (void*)&_wrap_class_LLUUID, 0};
static swig_type_info _swigt__p_LLVOAvatar = {"_p_LLVOAvatar", "LLVOAvatar *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLVector2 = {"_p_LLVector2", "LLVector2 *", 0, 0, (void*)&_wrap_class_LLVector2, 0};
static swig_type_info _swigt__p_LLVector3 = {"_p_LLVector3", "LLVector3 *|LLSimLocalVec *", 0, 0, (void*)&_wrap_class_LLVector3, 0};
static swig_type_info _swigt__p_LLVector3d = {"_p_LLVector3d", "LLVector3d *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLVector4 = {"_p_LLVector4", "LLVector4 *", 0, 0, (void*)&_wrap_class_LLVector4, 0};
static swig_type_info _swigt__p_LLViewerInventoryItem = {"_p_LLViewerInventoryItem", "LLViewerInventoryItem *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLViewerRegion = {"_p_LLViewerRegion", "LLViewerRegion *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLVisualParam = {"_p_LLVisualParam", "LLVisualParam *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLWearable = {"_p_LLWearable", "LLWearable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ParticleSystem = {"_p_ParticleSystem", "ParticleSystem *", 0, 0, (void*)&_wrap_class_ParticleSystem, 0};
static swig_type_info _swigt__p_UI = {"_p_UI", "UI *", 0, 0, (void*)&_wrap_class_UI, 0};
static swig_type_info _swigt__p_WLSky = {"_p_WLSky", "WLSky *", 0, 0, (void*)&_wrap_class_WLSky, 0};
static swig_type_info _swigt__p_WLWater = {"_p_WLWater", "WLWater *", 0, 0, (void*)&_wrap_class_WLWater, 0};
static swig_type_info _swigt__p_child_list_t = {"_p_child_list_t", "child_list_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_child_list_t = {"_p_const_child_list_t", "const_child_list_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *|F64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eLayoutOrientation = {"_p_eLayoutOrientation", "eLayoutOrientation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eObjectPartitions = {"_p_eObjectPartitions", "eObjectPartitions *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_e_action_type = {"_p_e_action_type", "enum e_action_type *|EActionType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_e_anim_request = {"_p_e_anim_request", "enum e_anim_request *|EAnimRequest *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_e_camera_modes = {"_p_e_camera_modes", "enum e_camera_modes *|ECameraMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_e_camera_position = {"_p_e_camera_position", "enum e_camera_position *|ECameraPosition *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_e_grid_mode = {"_p_e_grid_mode", "enum e_grid_mode *|EGridMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_e_object_update_type = {"_p_e_object_update_type", "enum e_object_update_type *|EObjectUpdateType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_e_selection_type = {"_p_e_selection_type", "enum e_selection_type *|ESelectType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_e_send_type = {"_p_e_send_type", "enum e_send_type *|ESendType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *|F32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "BOOL *|int *|S32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iterator = {"_p_iterator", "iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_list_t = {"_p_list_t", "list_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "S64 *|long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_root_iterator = {"_p_root_iterator", "root_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_root_object_iterator = {"_p_root_object_iterator", "root_object_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "S16 *|short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|S8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_skip_list_t = {"_p_skip_list_t", "skip_list_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)&_wrap_class_std_string, 0};
static swig_type_info _swigt__p_std__vectorT_LLCharacter_p_t = {"_p_std__vectorT_LLCharacter_p_t", "std::vector< LLCharacter * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|KEY *|U8 *|LLPCode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *|U32 *|MASK *|TPACKETID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "unsigned long long *|U64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "U16 *|unsigned short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_valid_iterator = {"_p_valid_iterator", "valid_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_valid_root_iterator = {"_p_valid_root_iterator", "valid_root_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vobj_list_t = {"_p_vobj_list_t", "vobj_list_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wchar_t = {"_p_wchar_t", "llwchar *|wchar_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_EAnimate,
  &_swigt__p_ESex,
  &_swigt__p_EVOType,
  &_swigt__p_LLCharacter,
  &_swigt__p_LLColor3,
  &_swigt__p_LLColor4,
  &_swigt__p_LLColor4U,
  &_swigt__p_LLJoint,
  &_swigt__p_LLMatrix3,
  &_swigt__p_LLMatrix4,
  &_swigt__p_LLMotion,
  &_swigt__p_LLMotionConstructor,
  &_swigt__p_LLMotionController,
  &_swigt__p_LLParcel,
  &_swigt__p_LLPartSysData,
  &_swigt__p_LLPauseRequestHandle,
  &_swigt__p_LLPointerT_LLPauseRequestHandle_t,
  &_swigt__p_LLPolyMesh,
  &_swigt__p_LLQuaternion,
  &_swigt__p_LLSD,
  &_swigt__p_LLSafeHandleT_LLObjectSelection_t,
  &_swigt__p_LLUUID,
  &_swigt__p_LLVOAvatar,
  &_swigt__p_LLVector2,
  &_swigt__p_LLVector3,
  &_swigt__p_LLVector3d,
  &_swigt__p_LLVector4,
  &_swigt__p_LLViewerInventoryItem,
  &_swigt__p_LLViewerRegion,
  &_swigt__p_LLVisualParam,
  &_swigt__p_LLWearable,
  &_swigt__p_ParticleSystem,
  &_swigt__p_UI,
  &_swigt__p_WLSky,
  &_swigt__p_WLWater,
  &_swigt__p_child_list_t,
  &_swigt__p_const_child_list_t,
  &_swigt__p_double,
  &_swigt__p_eLayoutOrientation,
  &_swigt__p_eObjectPartitions,
  &_swigt__p_e_action_type,
  &_swigt__p_e_anim_request,
  &_swigt__p_e_camera_modes,
  &_swigt__p_e_camera_position,
  &_swigt__p_e_grid_mode,
  &_swigt__p_e_object_update_type,
  &_swigt__p_e_selection_type,
  &_swigt__p_e_send_type,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_iterator,
  &_swigt__p_list_t,
  &_swigt__p_long_long,
  &_swigt__p_root_iterator,
  &_swigt__p_root_object_iterator,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_skip_list_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_LLCharacter_p_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_valid_iterator,
  &_swigt__p_valid_root_iterator,
  &_swigt__p_vobj_list_t,
  &_swigt__p_void,
  &_swigt__p_wchar_t,
};

static swig_cast_info _swigc__p_EAnimate[] = {  {&_swigt__p_EAnimate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ESex[] = {  {&_swigt__p_ESex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EVOType[] = {  {&_swigt__p_EVOType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLCharacter[] = {  {&_swigt__p_LLCharacter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLColor3[] = {  {&_swigt__p_LLColor3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLColor4[] = {  {&_swigt__p_LLColor4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLColor4U[] = {  {&_swigt__p_LLColor4U, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLJoint[] = {  {&_swigt__p_LLJoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLMatrix3[] = {  {&_swigt__p_LLMatrix3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLMatrix4[] = {  {&_swigt__p_LLMatrix4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLMotion[] = {  {&_swigt__p_LLMotion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLMotionConstructor[] = {  {&_swigt__p_LLMotionConstructor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLMotionController[] = {  {&_swigt__p_LLMotionController, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLParcel[] = {  {&_swigt__p_LLParcel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLPartSysData[] = {  {&_swigt__p_LLPartSysData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLPauseRequestHandle[] = {  {&_swigt__p_LLPauseRequestHandle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLPointerT_LLPauseRequestHandle_t[] = {  {&_swigt__p_LLPointerT_LLPauseRequestHandle_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLPolyMesh[] = {  {&_swigt__p_LLPolyMesh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLQuaternion[] = {  {&_swigt__p_LLQuaternion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLSD[] = {  {&_swigt__p_LLSD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLSafeHandleT_LLObjectSelection_t[] = {  {&_swigt__p_LLSafeHandleT_LLObjectSelection_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLUUID[] = {  {&_swigt__p_LLUUID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLVOAvatar[] = {  {&_swigt__p_LLVOAvatar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLVector2[] = {  {&_swigt__p_LLVector2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLVector3[] = {  {&_swigt__p_LLVector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLVector3d[] = {  {&_swigt__p_LLVector3d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLVector4[] = {  {&_swigt__p_LLVector4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLViewerInventoryItem[] = {  {&_swigt__p_LLViewerInventoryItem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLViewerRegion[] = {  {&_swigt__p_LLViewerRegion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLVisualParam[] = {  {&_swigt__p_LLVisualParam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLWearable[] = {  {&_swigt__p_LLWearable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ParticleSystem[] = {  {&_swigt__p_ParticleSystem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_UI[] = {  {&_swigt__p_UI, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WLSky[] = {  {&_swigt__p_WLSky, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WLWater[] = {  {&_swigt__p_WLWater, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_child_list_t[] = {  {&_swigt__p_child_list_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_child_list_t[] = {  {&_swigt__p_const_child_list_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eLayoutOrientation[] = {  {&_swigt__p_eLayoutOrientation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eObjectPartitions[] = {  {&_swigt__p_eObjectPartitions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_e_action_type[] = {  {&_swigt__p_e_action_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_e_anim_request[] = {  {&_swigt__p_e_anim_request, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_e_camera_modes[] = {  {&_swigt__p_e_camera_modes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_e_camera_position[] = {  {&_swigt__p_e_camera_position, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_e_grid_mode[] = {  {&_swigt__p_e_grid_mode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_e_object_update_type[] = {  {&_swigt__p_e_object_update_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_e_selection_type[] = {  {&_swigt__p_e_selection_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_e_send_type[] = {  {&_swigt__p_e_send_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iterator[] = {  {&_swigt__p_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_list_t[] = {  {&_swigt__p_list_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_root_iterator[] = {  {&_swigt__p_root_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_root_object_iterator[] = {  {&_swigt__p_root_object_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_skip_list_t[] = {  {&_swigt__p_skip_list_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_LLCharacter_p_t[] = {  {&_swigt__p_std__vectorT_LLCharacter_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_valid_iterator[] = {  {&_swigt__p_valid_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_valid_root_iterator[] = {  {&_swigt__p_valid_root_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vobj_list_t[] = {  {&_swigt__p_vobj_list_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wchar_t[] = {  {&_swigt__p_wchar_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_EAnimate,
  _swigc__p_ESex,
  _swigc__p_EVOType,
  _swigc__p_LLCharacter,
  _swigc__p_LLColor3,
  _swigc__p_LLColor4,
  _swigc__p_LLColor4U,
  _swigc__p_LLJoint,
  _swigc__p_LLMatrix3,
  _swigc__p_LLMatrix4,
  _swigc__p_LLMotion,
  _swigc__p_LLMotionConstructor,
  _swigc__p_LLMotionController,
  _swigc__p_LLParcel,
  _swigc__p_LLPartSysData,
  _swigc__p_LLPauseRequestHandle,
  _swigc__p_LLPointerT_LLPauseRequestHandle_t,
  _swigc__p_LLPolyMesh,
  _swigc__p_LLQuaternion,
  _swigc__p_LLSD,
  _swigc__p_LLSafeHandleT_LLObjectSelection_t,
  _swigc__p_LLUUID,
  _swigc__p_LLVOAvatar,
  _swigc__p_LLVector2,
  _swigc__p_LLVector3,
  _swigc__p_LLVector3d,
  _swigc__p_LLVector4,
  _swigc__p_LLViewerInventoryItem,
  _swigc__p_LLViewerRegion,
  _swigc__p_LLVisualParam,
  _swigc__p_LLWearable,
  _swigc__p_ParticleSystem,
  _swigc__p_UI,
  _swigc__p_WLSky,
  _swigc__p_WLWater,
  _swigc__p_child_list_t,
  _swigc__p_const_child_list_t,
  _swigc__p_double,
  _swigc__p_eLayoutOrientation,
  _swigc__p_eObjectPartitions,
  _swigc__p_e_action_type,
  _swigc__p_e_anim_request,
  _swigc__p_e_camera_modes,
  _swigc__p_e_camera_position,
  _swigc__p_e_grid_mode,
  _swigc__p_e_object_update_type,
  _swigc__p_e_selection_type,
  _swigc__p_e_send_type,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_iterator,
  _swigc__p_list_t,
  _swigc__p_long_long,
  _swigc__p_root_iterator,
  _swigc__p_root_object_iterator,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_skip_list_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_LLCharacter_p_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_valid_iterator,
  _swigc__p_valid_root_iterator,
  _swigc__p_vobj_list_t,
  _swigc__p_void,
  _swigc__p_wchar_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an eariler #define will rename it
*/
SWIGEXPORT int SWIG_init(lua_State* L)
{
  int i;
  /* start with global table */
  lua_pushvalue(L,LUA_GLOBALSINDEX);
  /* SWIG's internal initalisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);
  /* begin the module (its a table with the same name as the module) */
  SWIG_Lua_module_begin(L,SWIG_name);
  /* add commands/functions */
  for (i = 0; swig_commands[i].name; i++){
    SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
  }
  /* add variables */
  for (i = 0; swig_variables[i].name; i++){
    SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
  }
  /* set up base class pointers (the hierachy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* additional registration structs & classes in lua */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* constants */
  SWIG_Lua_InstallConstants(L,swig_constants);
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  lua_pop(L,1);  /* tidy stack (remove module table)*/
  lua_pop(L,1);  /* tidy stack (remove global table)*/
  return 1;
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

