/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<typename T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic CAPI SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The swig conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old swig versions, you usually write code as:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit as:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   that seems to be the same, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   requires also to SWIG_ConvertPtr to return new result values, as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   swig errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()


 */
#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))


/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif




#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

typedef struct swig_lua_class {
  const char    *name;
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrappering all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within Swig, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { lua_pushstring(L, (char *) msg); goto fail; } else

/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {lua_pushfstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {lua_pushfstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
//#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a)))
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State* L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default value is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State* L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  lua_pushstring(L,"This variable is immutable");
  lua_error(L);
#endif
    return 0;   /* should not return anything */
}

/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  printf("SWIG_Lua_module_get %p(%s) '%s'\n",
   lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
   lua_tostring(L,2));
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get");  /* get the .get table */
  lua_remove(L,3);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .get table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,3);  /* remove .get */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_call(L,0,1);
      return 1;
    }
    lua_pop(L,1);  /* remove the top */
  }
  lua_pop(L,1);  /* remove the .get */
  lua_pushnil(L);  /* return a nil */
    return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".set");  /* get the .set table */
  lua_remove(L,4);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,4);  /* remove .set */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
  }
  lua_settop(L,3);  /* reset back to start */
  /* we now have the table, key & new value, so just set directly */
  lua_rawset(L,1);  /* add direct */
  return 0;
}

/* registering a module in lua */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushstring(L,name);
  lua_newtable(L);   /* the table */
  /* add meta table */
  lua_newtable(L);    /* the meta table */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
  lua_pushstring(L,".get");
  lua_newtable(L);    /* the .get table */
  lua_rawset(L,-3);  /* add .get into metatable */
  lua_pushstring(L,".set");
  lua_newtable(L);    /* the .set table */
  lua_rawset(L,-3);  /* add .set into metatable */
  lua_setmetatable(L,-2);  /* sets meta table in module */
  lua_rawset(L,-3);        /* add module into parent */
  SWIG_Lua_get_table(L,name);   /* get the table back out */
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
  lua_pop(L,1);       /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_getmetatable(L,-1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* should be a table: */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)  /* if there is a set fn */
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* should be a table: */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
  lua_pop(L,1);       /* tidy stack (remove meta) */
}

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
  SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;  /* sorry not known */
}

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
      lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
      lua_tostring(L,2),
      lua_topointer(L,3),lua_typename(L,lua_type(L,3)));*/

  assert(lua_isuserdata(L,1));  /* just in case */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,1);  /* userdata */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,2,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_pushvalue(L,3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  swig_lua_class* clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    lua_pushstring(L,"SWIG");
    lua_newtable(L);
    lua_rawset(L,LUA_REGISTRYINDEX);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
  int i;
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_details(L,clss->bases[i]);
  }
  /* add fns */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /*   add operator overloads
    these look ANY method which start with "__" and assume they
    are operator overloads & add them to the metatable
    (this might mess up is someone defines a method __gc (the destructor)*/
  for(i=0;clss->methods[i].name;i++){
    if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
      SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
    }
  }
}

/* set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State* L,swig_lua_class* clss)
{
  int i=0;
  swig_module_info* module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }	
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
    SWIG_Lua_add_function(L,clss->name,clss->constructor);

  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->name);  /* get the name */
  lua_newtable(L);    /* create the metatable */
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->name);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */

  SWIG_Lua_get_class_metatable(L,clss->name);
  SWIG_Lua_add_class_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
}

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void _SWIG_Lua_AddMetatable(lua_State* L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
  swig_lua_userdata* usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata* usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
       int argnum,const char* func_name){
  void* result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    lua_pushfstring(L,"Error in %s, expected a %s at argument number %d\n",
      func_name,(type && type->str)?type->str:"void*",argnum);
    lua_error(L);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State* L,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State* L,int index,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata* usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua a really simple way of calling lua from C
Unfortunately lua keeps changing its API's, so we need a conditional compile
In lua 5.0.X its lua_dostring()
In lua 5.1.X its luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char* str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_BOOL swig_types[0]
#define SWIGTYPE_p_EChangedFlags swig_types[1]
#define SWIGTYPE_p_EHavokJointType swig_types[2]
#define SWIGTYPE_p_EMsgVariableType swig_types[3]
#define SWIGTYPE_p_EVOType swig_types[4]
#define SWIGTYPE_p_F32 swig_types[5]
#define SWIGTYPE_p_F64 swig_types[6]
#define SWIGTYPE_p_InventoryObjectList swig_types[7]
#define SWIGTYPE_p_LLAgent swig_types[8]
#define SWIGTYPE_p_LLAlphaObject swig_types[9]
#define SWIGTYPE_p_LLAssetType__EType swig_types[10]
#define SWIGTYPE_p_LLAudioSource swig_types[11]
#define SWIGTYPE_p_LLBBox swig_types[12]
#define SWIGTYPE_p_LLColor3 swig_types[13]
#define SWIGTYPE_p_LLColor4 swig_types[14]
#define SWIGTYPE_p_LLDataPacker swig_types[15]
#define SWIGTYPE_p_LLDrawable swig_types[16]
#define SWIGTYPE_p_LLDynamicArrayT_LLViewerObject_p_t swig_types[17]
#define SWIGTYPE_p_LLFlexibleObjectData swig_types[18]
#define SWIGTYPE_p_LLHost swig_types[19]
#define SWIGTYPE_p_LLInventoryItem swig_types[20]
#define SWIGTYPE_p_LLInventoryObject swig_types[21]
#define SWIGTYPE_p_LLLightParams swig_types[22]
#define SWIGTYPE_p_LLMaterialExportInfo swig_types[23]
#define SWIGTYPE_p_LLMatrix4 swig_types[24]
#define SWIGTYPE_p_LLMessageSystem swig_types[25]
#define SWIGTYPE_p_LLNameValue swig_types[26]
#define SWIGTYPE_p_LLNetworkData swig_types[27]
#define SWIGTYPE_p_LLPCode swig_types[28]
#define SWIGTYPE_p_LLPartSysData swig_types[29]
#define SWIGTYPE_p_LLPipeline swig_types[30]
#define SWIGTYPE_p_LLPointerT_LLDrawable_t swig_types[31]
#define SWIGTYPE_p_LLPointerT_LLHUDIcon_t swig_types[32]
#define SWIGTYPE_p_LLPointerT_LLHUDText_t swig_types[33]
#define SWIGTYPE_p_LLPointerT_LLViewerImage_t swig_types[34]
#define SWIGTYPE_p_LLPointerT_LLViewerPartSourceScript_t swig_types[35]
#define SWIGTYPE_p_LLPrimitive swig_types[36]
#define SWIGTYPE_p_LLQuaternion swig_types[37]
#define SWIGTYPE_p_LLSD swig_types[38]
#define SWIGTYPE_p_LLSculptParams swig_types[39]
#define SWIGTYPE_p_LLStaticViewerObject swig_types[40]
#define SWIGTYPE_p_LLStriderT_LLColor4U_t swig_types[41]
#define SWIGTYPE_p_LLStriderT_LLVector2_t swig_types[42]
#define SWIGTYPE_p_LLStriderT_LLVector3_t swig_types[43]
#define SWIGTYPE_p_LLStriderT_U16_t swig_types[44]
#define SWIGTYPE_p_LLTextureEntry swig_types[45]
#define SWIGTYPE_p_LLUUID swig_types[46]
#define SWIGTYPE_p_LLVOInventoryListener swig_types[47]
#define SWIGTYPE_p_LLVOJointInfo swig_types[48]
#define SWIGTYPE_p_LLVector2 swig_types[49]
#define SWIGTYPE_p_LLVector3 swig_types[50]
#define SWIGTYPE_p_LLVector3d swig_types[51]
#define SWIGTYPE_p_LLViewerImage swig_types[52]
#define SWIGTYPE_p_LLViewerInventoryItem swig_types[53]
#define SWIGTYPE_p_LLViewerObject swig_types[54]
#define SWIGTYPE_p_LLViewerObjectMedia swig_types[55]
#define SWIGTYPE_p_LLViewerRegion swig_types[56]
#define SWIGTYPE_p_LLVolume swig_types[57]
#define SWIGTYPE_p_LLVolumeMgr swig_types[58]
#define SWIGTYPE_p_LLVolumeParams swig_types[59]
#define SWIGTYPE_p_LLWorld swig_types[60]
#define SWIGTYPE_p_LLXform swig_types[61]
#define SWIGTYPE_p_LLXformMatrix swig_types[62]
#define SWIGTYPE_p_S16 swig_types[63]
#define SWIGTYPE_p_S32 swig_types[64]
#define SWIGTYPE_p_U16 swig_types[65]
#define SWIGTYPE_p_U32 swig_types[66]
#define SWIGTYPE_p_U8 swig_types[67]
#define SWIGTYPE_p_child_list_t swig_types[68]
#define SWIGTYPE_p_const_child_list_t swig_types[69]
#define SWIGTYPE_p_e_object_update_type swig_types[70]
#define SWIGTYPE_p_p_void swig_types[71]
#define SWIGTYPE_p_std__listT_LLPointerT_LLViewerObject_t_t swig_types[72]
#define SWIGTYPE_p_std__string swig_types[73]
#define SWIGTYPE_p_std__vectorT_LLQuaternion_t swig_types[74]
#define SWIGTYPE_p_std__vectorT_LLVector3_t swig_types[75]
#define SWIGTYPE_p_vobj_list_t swig_types[76]
static swig_type_info *swig_types[78];
static swig_module_info swig_module = {swig_types, 77, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "Object"
#define SWIG_init      luaopen_Object
#define SWIG_init_user luaopen_Object_user

#define SWIG_LUACODE   luaopen_Object_luacode


namespace swig {
typedef struct{} LANGUAGE_OBJ;
}




#include "linden_common.h"
#include "material_codes.h"
#include "imageids.h"
#include "stdtypes.h"

#include "llassetstorage.h"
#include "llbbox.h"
#include "llcamera.h"
#include "llfile.h"
#include "lldarrayptr.h"
#include "llhudtext.h"
#include "llhudicon.h"
#include "llinventory.h"
#include "llmemory.h"
#include "llmemtype.h"
#include "llprimitive.h"
#include "lluuid.h"
#include "llvoinventorylistener.h"
#include "object_flags.h"
#include "llquaternion.h"
#include "v3dmath.h"
#include "v3math.h"
#include "llvertexbuffer.h"
#include "llpartdata.h"
#include "xform.h"
#include "lldrawable.h"
#include "llviewerpartsource.h"

#include "llviewerobject.h"
#include "llviewerobjectlist.h"

#include "swig/Object/Object.h"

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_MAX_OBJECT_Z_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("MAX_OBJECT_Z",0,0)
  result = (F32)MAX_OBJECT_Z;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MIN_OBJECT_Z_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("MIN_OBJECT_Z",0,0)
  result = (F32)MIN_OBJECT_Z;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DEFAULT_MAX_PRIM_SCALE_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("DEFAULT_MAX_PRIM_SCALE",0,0)
  result = (F32)DEFAULT_MAX_PRIM_SCALE;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DEFAULT_MAX_MEGAPRIM_SCALE_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("DEFAULT_MAX_MEGAPRIM_SCALE",0,0)
  result = (F32)DEFAULT_MAX_MEGAPRIM_SCALE;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MIN_PRIM_SCALE_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("MIN_PRIM_SCALE",0,0)
  result = (F32)MIN_PRIM_SCALE;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MAX_PRIM_SCALE_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("MAX_PRIM_SCALE",0,0)
  result = (F32)MAX_PRIM_SCALE;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLXform_init(lua_State* L) {
  int SWIG_arg = 0;
  LLXform *arg1 = (LLXform *) 0 ;
  
  SWIG_check_num_args("init",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("init",1,"LLXform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLXform,0))){
    SWIG_fail_ptr("LLXform_init",1,SWIGTYPE_p_LLXform);
  }
  
  (arg1)->init();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLXform(lua_State* L) {
  int SWIG_arg = 0;
  LLXform *result = 0 ;
  
  SWIG_check_num_args("LLXform",0,0)
  result = (LLXform *)new LLXform();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLXform,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLXform_getLocalMat4(lua_State* L) {
  int SWIG_arg = 0;
  LLXform *arg1 = (LLXform *) 0 ;
  LLMatrix4 *arg2 = 0 ;
  
  SWIG_check_num_args("getLocalMat4",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getLocalMat4",1,"LLXform const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getLocalMat4",2,"LLMatrix4 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLXform,0))){
    SWIG_fail_ptr("LLXform_getLocalMat4",1,SWIGTYPE_p_LLXform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLMatrix4,0))){
    SWIG_fail_ptr("LLXform_getLocalMat4",2,SWIGTYPE_p_LLMatrix4);
  }
  
  ((LLXform const *)arg1)->getLocalMat4(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLXform_setParent(lua_State* L) {
  int SWIG_arg = 0;
  LLXform *arg1 = (LLXform *) 0 ;
  LLXform *arg2 = (LLXform *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("setParent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setParent",1,"LLXform *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("setParent",2,"LLXform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLXform,0))){
    SWIG_fail_ptr("LLXform_setParent",1,SWIGTYPE_p_LLXform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLXform,0))){
    SWIG_fail_ptr("LLXform_setParent",2,SWIGTYPE_p_LLXform);
  }
  
  result = (arg1)->setParent(arg2);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLXform_setPosition__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLXform *arg1 = (LLXform *) 0 ;
  LLVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("setPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setPosition",1,"LLXform *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setPosition",2,"LLVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLXform,0))){
    SWIG_fail_ptr("LLXform_setPosition",1,SWIGTYPE_p_LLXform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLXform_setPosition",2,SWIGTYPE_p_LLVector3);
  }
  
  (arg1)->setPosition((LLVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLXform_setPosition__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLXform *arg1 = (LLXform *) 0 ;
  F32 arg2 ;
  F32 arg3 ;
  F32 arg4 ;
  F32 *argp2 ;
  F32 *argp3 ;
  F32 *argp4 ;
  
  SWIG_check_num_args("setPosition",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setPosition",1,"LLXform *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setPosition",2,"F32 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setPosition",3,"F32 const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("setPosition",4,"F32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLXform,0))){
    SWIG_fail_ptr("LLXform_setPosition",1,SWIGTYPE_p_LLXform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLXform_setPosition",2,SWIGTYPE_p_F32);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLXform_setPosition",3,SWIGTYPE_p_F32);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLXform_setPosition",4,SWIGTYPE_p_F32);
  }
  arg4 = *argp4;
  
  (arg1)->setPosition(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLXform_setPosition(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLXform, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLXform_setPosition__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLXform, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_F32, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_F32, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_F32, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_LLXform_setPosition__SWIG_1(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLXform_setPosition'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setPosition(LLXform *,LLVector3 const &)\n"
    "    setPosition(LLXform *,F32 const,F32 const,F32 const)\n");
  lua_error(L);return 0;
}


static int _wrap_LLXform_setPositionX(lua_State* L) {
  int SWIG_arg = 0;
  LLXform *arg1 = (LLXform *) 0 ;
  F32 arg2 ;
  F32 *argp2 ;
  
  SWIG_check_num_args("setPositionX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setPositionX",1,"LLXform *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setPositionX",2,"F32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLXform,0))){
    SWIG_fail_ptr("LLXform_setPositionX",1,SWIGTYPE_p_LLXform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLXform_setPositionX",2,SWIGTYPE_p_F32);
  }
  arg2 = *argp2;
  
  (arg1)->setPositionX(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLXform_setPositionY(lua_State* L) {
  int SWIG_arg = 0;
  LLXform *arg1 = (LLXform *) 0 ;
  F32 arg2 ;
  F32 *argp2 ;
  
  SWIG_check_num_args("setPositionY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setPositionY",1,"LLXform *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setPositionY",2,"F32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLXform,0))){
    SWIG_fail_ptr("LLXform_setPositionY",1,SWIGTYPE_p_LLXform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLXform_setPositionY",2,SWIGTYPE_p_F32);
  }
  arg2 = *argp2;
  
  (arg1)->setPositionY(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLXform_setPositionZ(lua_State* L) {
  int SWIG_arg = 0;
  LLXform *arg1 = (LLXform *) 0 ;
  F32 arg2 ;
  F32 *argp2 ;
  
  SWIG_check_num_args("setPositionZ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setPositionZ",1,"LLXform *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setPositionZ",2,"F32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLXform,0))){
    SWIG_fail_ptr("LLXform_setPositionZ",1,SWIGTYPE_p_LLXform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLXform_setPositionZ",2,SWIGTYPE_p_F32);
  }
  arg2 = *argp2;
  
  (arg1)->setPositionZ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLXform_addPosition(lua_State* L) {
  int SWIG_arg = 0;
  LLXform *arg1 = (LLXform *) 0 ;
  LLVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("addPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addPosition",1,"LLXform *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addPosition",2,"LLVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLXform,0))){
    SWIG_fail_ptr("LLXform_addPosition",1,SWIGTYPE_p_LLXform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLXform_addPosition",2,SWIGTYPE_p_LLVector3);
  }
  
  (arg1)->addPosition((LLVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLXform_setScale__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLXform *arg1 = (LLXform *) 0 ;
  LLVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("setScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setScale",1,"LLXform *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setScale",2,"LLVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLXform,0))){
    SWIG_fail_ptr("LLXform_setScale",1,SWIGTYPE_p_LLXform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLXform_setScale",2,SWIGTYPE_p_LLVector3);
  }
  
  (arg1)->setScale((LLVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLXform_setScale__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLXform *arg1 = (LLXform *) 0 ;
  F32 arg2 ;
  F32 arg3 ;
  F32 arg4 ;
  F32 *argp2 ;
  F32 *argp3 ;
  F32 *argp4 ;
  
  SWIG_check_num_args("setScale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setScale",1,"LLXform *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setScale",2,"F32 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setScale",3,"F32 const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("setScale",4,"F32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLXform,0))){
    SWIG_fail_ptr("LLXform_setScale",1,SWIGTYPE_p_LLXform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLXform_setScale",2,SWIGTYPE_p_F32);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLXform_setScale",3,SWIGTYPE_p_F32);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLXform_setScale",4,SWIGTYPE_p_F32);
  }
  arg4 = *argp4;
  
  (arg1)->setScale(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLXform_setScale(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLXform, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLXform_setScale__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLXform, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_F32, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_F32, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_F32, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_LLXform_setScale__SWIG_1(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLXform_setScale'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setScale(LLXform *,LLVector3 const &)\n"
    "    setScale(LLXform *,F32 const,F32 const,F32 const)\n");
  lua_error(L);return 0;
}


static int _wrap_LLXform_setRotation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLXform *arg1 = (LLXform *) 0 ;
  LLQuaternion *arg2 = 0 ;
  
  SWIG_check_num_args("setRotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setRotation",1,"LLXform *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setRotation",2,"LLQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLXform,0))){
    SWIG_fail_ptr("LLXform_setRotation",1,SWIGTYPE_p_LLXform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLQuaternion,0))){
    SWIG_fail_ptr("LLXform_setRotation",2,SWIGTYPE_p_LLQuaternion);
  }
  
  (arg1)->setRotation((LLQuaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLXform_setRotation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLXform *arg1 = (LLXform *) 0 ;
  F32 arg2 ;
  F32 arg3 ;
  F32 arg4 ;
  F32 *argp2 ;
  F32 *argp3 ;
  F32 *argp4 ;
  
  SWIG_check_num_args("setRotation",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setRotation",1,"LLXform *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setRotation",2,"F32 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setRotation",3,"F32 const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("setRotation",4,"F32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLXform,0))){
    SWIG_fail_ptr("LLXform_setRotation",1,SWIGTYPE_p_LLXform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLXform_setRotation",2,SWIGTYPE_p_F32);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLXform_setRotation",3,SWIGTYPE_p_F32);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLXform_setRotation",4,SWIGTYPE_p_F32);
  }
  arg4 = *argp4;
  
  (arg1)->setRotation(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLXform_setRotation__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  LLXform *arg1 = (LLXform *) 0 ;
  F32 arg2 ;
  F32 arg3 ;
  F32 arg4 ;
  F32 arg5 ;
  F32 *argp2 ;
  F32 *argp3 ;
  F32 *argp4 ;
  F32 *argp5 ;
  
  SWIG_check_num_args("setRotation",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setRotation",1,"LLXform *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setRotation",2,"F32 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setRotation",3,"F32 const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("setRotation",4,"F32 const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("setRotation",5,"F32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLXform,0))){
    SWIG_fail_ptr("LLXform_setRotation",1,SWIGTYPE_p_LLXform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLXform_setRotation",2,SWIGTYPE_p_F32);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLXform_setRotation",3,SWIGTYPE_p_F32);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLXform_setRotation",4,SWIGTYPE_p_F32);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLXform_setRotation",5,SWIGTYPE_p_F32);
  }
  arg5 = *argp5;
  
  (arg1)->setRotation(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLXform_setRotation(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLXform, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLQuaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLXform_setRotation__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLXform, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_F32, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_F32, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_F32, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_LLXform_setRotation__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLXform, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_F32, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_F32, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_F32, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_F32, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_LLXform_setRotation__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLXform_setRotation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setRotation(LLXform *,LLQuaternion const &)\n"
    "    setRotation(LLXform *,F32 const,F32 const,F32 const)\n"
    "    setRotation(LLXform *,F32 const,F32 const,F32 const,F32 const)\n");
  lua_error(L);return 0;
}


static int _wrap_LLXform_setChanged(lua_State* L) {
  int SWIG_arg = 0;
  LLXform *arg1 = (LLXform *) 0 ;
  U32 arg2 ;
  U32 *argp2 ;
  
  SWIG_check_num_args("setChanged",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setChanged",1,"LLXform *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setChanged",2,"U32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLXform,0))){
    SWIG_fail_ptr("LLXform_setChanged",1,SWIGTYPE_p_LLXform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U32,0))){
    SWIG_fail_ptr("LLXform_setChanged",2,SWIGTYPE_p_U32);
  }
  arg2 = *argp2;
  
  (arg1)->setChanged(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLXform_isChanged__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLXform *arg1 = (LLXform *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("isChanged",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isChanged",1,"LLXform const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLXform,0))){
    SWIG_fail_ptr("LLXform_isChanged",1,SWIGTYPE_p_LLXform);
  }
  
  result = ((LLXform const *)arg1)->isChanged();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLXform_isChanged__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLXform *arg1 = (LLXform *) 0 ;
  U32 arg2 ;
  U32 *argp2 ;
  BOOL result;
  
  SWIG_check_num_args("isChanged",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isChanged",1,"LLXform const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("isChanged",2,"U32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLXform,0))){
    SWIG_fail_ptr("LLXform_isChanged",1,SWIGTYPE_p_LLXform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U32,0))){
    SWIG_fail_ptr("LLXform_isChanged",2,SWIGTYPE_p_U32);
  }
  arg2 = *argp2;
  
  result = ((LLXform const *)arg1)->isChanged(arg2);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLXform_isChanged(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLXform, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_LLXform_isChanged__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLXform, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_U32, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLXform_isChanged__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLXform_isChanged'\n"
    "  Possible C/C++ prototypes are:\n"
    "    isChanged(LLXform const *)\n"
    "    isChanged(LLXform const *,U32 const)\n");
  lua_error(L);return 0;
}


static int _wrap_LLXform_clearChanged__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLXform *arg1 = (LLXform *) 0 ;
  
  SWIG_check_num_args("clearChanged",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clearChanged",1,"LLXform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLXform,0))){
    SWIG_fail_ptr("LLXform_clearChanged",1,SWIGTYPE_p_LLXform);
  }
  
  (arg1)->clearChanged();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLXform_clearChanged__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLXform *arg1 = (LLXform *) 0 ;
  U32 arg2 ;
  U32 *argp2 ;
  
  SWIG_check_num_args("clearChanged",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clearChanged",1,"LLXform *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("clearChanged",2,"U32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLXform,0))){
    SWIG_fail_ptr("LLXform_clearChanged",1,SWIGTYPE_p_LLXform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U32,0))){
    SWIG_fail_ptr("LLXform_clearChanged",2,SWIGTYPE_p_U32);
  }
  arg2 = *argp2;
  
  (arg1)->clearChanged(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLXform_clearChanged(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLXform, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_LLXform_clearChanged__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLXform, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_U32, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLXform_clearChanged__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLXform_clearChanged'\n"
    "  Possible C/C++ prototypes are:\n"
    "    clearChanged(LLXform *)\n"
    "    clearChanged(LLXform *,U32)\n");
  lua_error(L);return 0;
}


static int _wrap_LLXform_setScaleChildOffset(lua_State* L) {
  int SWIG_arg = 0;
  LLXform *arg1 = (LLXform *) 0 ;
  BOOL arg2 ;
  BOOL *argp2 ;
  
  SWIG_check_num_args("setScaleChildOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setScaleChildOffset",1,"LLXform *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setScaleChildOffset",2,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLXform,0))){
    SWIG_fail_ptr("LLXform_setScaleChildOffset",1,SWIGTYPE_p_LLXform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("LLXform_setScaleChildOffset",2,SWIGTYPE_p_BOOL);
  }
  arg2 = *argp2;
  
  (arg1)->setScaleChildOffset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLXform_getScaleChildOffset(lua_State* L) {
  int SWIG_arg = 0;
  LLXform *arg1 = (LLXform *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("getScaleChildOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getScaleChildOffset",1,"LLXform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLXform,0))){
    SWIG_fail_ptr("LLXform_getScaleChildOffset",1,SWIGTYPE_p_LLXform);
  }
  
  result = (arg1)->getScaleChildOffset();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLXform_getParent(lua_State* L) {
  int SWIG_arg = 0;
  LLXform *arg1 = (LLXform *) 0 ;
  LLXform *result = 0 ;
  
  SWIG_check_num_args("getParent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getParent",1,"LLXform const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLXform,0))){
    SWIG_fail_ptr("LLXform_getParent",1,SWIGTYPE_p_LLXform);
  }
  
  result = (LLXform *)((LLXform const *)arg1)->getParent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLXform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLXform_getRoot(lua_State* L) {
  int SWIG_arg = 0;
  LLXform *arg1 = (LLXform *) 0 ;
  LLXform *result = 0 ;
  
  SWIG_check_num_args("getRoot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRoot",1,"LLXform const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLXform,0))){
    SWIG_fail_ptr("LLXform_getRoot",1,SWIGTYPE_p_LLXform);
  }
  
  result = (LLXform *)((LLXform const *)arg1)->getRoot();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLXform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLXform_isRoot(lua_State* L) {
  int SWIG_arg = 0;
  LLXform *arg1 = (LLXform *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("isRoot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isRoot",1,"LLXform const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLXform,0))){
    SWIG_fail_ptr("LLXform_isRoot",1,SWIGTYPE_p_LLXform);
  }
  
  result = ((LLXform const *)arg1)->isRoot();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLXform_isRootEdit(lua_State* L) {
  int SWIG_arg = 0;
  LLXform *arg1 = (LLXform *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("isRootEdit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isRootEdit",1,"LLXform const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLXform,0))){
    SWIG_fail_ptr("LLXform_isRootEdit",1,SWIGTYPE_p_LLXform);
  }
  
  result = ((LLXform const *)arg1)->isRootEdit();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLXform_getPosition(lua_State* L) {
  int SWIG_arg = 0;
  LLXform *arg1 = (LLXform *) 0 ;
  LLVector3 *result = 0 ;
  
  SWIG_check_num_args("getPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPosition",1,"LLXform const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLXform,0))){
    SWIG_fail_ptr("LLXform_getPosition",1,SWIGTYPE_p_LLXform);
  }
  
  {
    LLVector3 const &_result_ref = ((LLXform const *)arg1)->getPosition();
    result = (LLVector3 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLXform_getScale(lua_State* L) {
  int SWIG_arg = 0;
  LLXform *arg1 = (LLXform *) 0 ;
  LLVector3 *result = 0 ;
  
  SWIG_check_num_args("getScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getScale",1,"LLXform const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLXform,0))){
    SWIG_fail_ptr("LLXform_getScale",1,SWIGTYPE_p_LLXform);
  }
  
  {
    LLVector3 const &_result_ref = ((LLXform const *)arg1)->getScale();
    result = (LLVector3 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLXform_getRotation(lua_State* L) {
  int SWIG_arg = 0;
  LLXform *arg1 = (LLXform *) 0 ;
  LLQuaternion *result = 0 ;
  
  SWIG_check_num_args("getRotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRotation",1,"LLXform const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLXform,0))){
    SWIG_fail_ptr("LLXform_getRotation",1,SWIGTYPE_p_LLXform);
  }
  
  {
    LLQuaternion const &_result_ref = ((LLXform const *)arg1)->getRotation();
    result = (LLQuaternion *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLQuaternion,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLXform_getPositionW(lua_State* L) {
  int SWIG_arg = 0;
  LLXform *arg1 = (LLXform *) 0 ;
  LLVector3 *result = 0 ;
  
  SWIG_check_num_args("getPositionW",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPositionW",1,"LLXform const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLXform,0))){
    SWIG_fail_ptr("LLXform_getPositionW",1,SWIGTYPE_p_LLXform);
  }
  
  {
    LLVector3 const &_result_ref = ((LLXform const *)arg1)->getPositionW();
    result = (LLVector3 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLXform_getWorldRotation(lua_State* L) {
  int SWIG_arg = 0;
  LLXform *arg1 = (LLXform *) 0 ;
  LLQuaternion *result = 0 ;
  
  SWIG_check_num_args("getWorldRotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getWorldRotation",1,"LLXform const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLXform,0))){
    SWIG_fail_ptr("LLXform_getWorldRotation",1,SWIGTYPE_p_LLXform);
  }
  
  {
    LLQuaternion const &_result_ref = ((LLXform const *)arg1)->getWorldRotation();
    result = (LLQuaternion *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLQuaternion,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLXform_getWorldPosition(lua_State* L) {
  int SWIG_arg = 0;
  LLXform *arg1 = (LLXform *) 0 ;
  LLVector3 *result = 0 ;
  
  SWIG_check_num_args("getWorldPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getWorldPosition",1,"LLXform const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLXform,0))){
    SWIG_fail_ptr("LLXform_getWorldPosition",1,SWIGTYPE_p_LLXform);
  }
  
  {
    LLVector3 const &_result_ref = ((LLXform const *)arg1)->getWorldPosition();
    result = (LLVector3 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LLXform(void *obj) {
LLXform *arg1 = (LLXform *) obj;
delete arg1;
}
static swig_lua_method swig_LLXform_methods[] = {
    {"init", _wrap_LLXform_init}, 
    {"getLocalMat4", _wrap_LLXform_getLocalMat4}, 
    {"setParent", _wrap_LLXform_setParent}, 
    {"setPosition", _wrap_LLXform_setPosition}, 
    {"setPositionX", _wrap_LLXform_setPositionX}, 
    {"setPositionY", _wrap_LLXform_setPositionY}, 
    {"setPositionZ", _wrap_LLXform_setPositionZ}, 
    {"addPosition", _wrap_LLXform_addPosition}, 
    {"setScale", _wrap_LLXform_setScale}, 
    {"setRotation", _wrap_LLXform_setRotation}, 
    {"setChanged", _wrap_LLXform_setChanged}, 
    {"isChanged", _wrap_LLXform_isChanged}, 
    {"clearChanged", _wrap_LLXform_clearChanged}, 
    {"setScaleChildOffset", _wrap_LLXform_setScaleChildOffset}, 
    {"getScaleChildOffset", _wrap_LLXform_getScaleChildOffset}, 
    {"getParent", _wrap_LLXform_getParent}, 
    {"getRoot", _wrap_LLXform_getRoot}, 
    {"isRoot", _wrap_LLXform_isRoot}, 
    {"isRootEdit", _wrap_LLXform_isRootEdit}, 
    {"getPosition", _wrap_LLXform_getPosition}, 
    {"getScale", _wrap_LLXform_getScale}, 
    {"getRotation", _wrap_LLXform_getRotation}, 
    {"getPositionW", _wrap_LLXform_getPositionW}, 
    {"getWorldRotation", _wrap_LLXform_getWorldRotation}, 
    {"getWorldPosition", _wrap_LLXform_getWorldPosition}, 
    {0,0}
};
static swig_lua_attribute swig_LLXform_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_LLXform_bases[] = {0};
static const char *swig_LLXform_base_names[] = {0};
static swig_lua_class _wrap_class_LLXform = { "LLXform", &SWIGTYPE_p_LLXform,_wrap_new_LLXform, swig_delete_LLXform, swig_LLXform_methods, swig_LLXform_attributes, swig_LLXform_bases, swig_LLXform_base_names };

static int _wrap_new_LLXformMatrix(lua_State* L) {
  int SWIG_arg = 0;
  LLXformMatrix *result = 0 ;
  
  SWIG_check_num_args("LLXformMatrix",0,0)
  result = (LLXformMatrix *)new LLXformMatrix();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLXformMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLXformMatrix_getWorldMatrix(lua_State* L) {
  int SWIG_arg = 0;
  LLXformMatrix *arg1 = (LLXformMatrix *) 0 ;
  LLMatrix4 *result = 0 ;
  
  SWIG_check_num_args("getWorldMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getWorldMatrix",1,"LLXformMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLXformMatrix,0))){
    SWIG_fail_ptr("LLXformMatrix_getWorldMatrix",1,SWIGTYPE_p_LLXformMatrix);
  }
  
  {
    LLMatrix4 const &_result_ref = ((LLXformMatrix const *)arg1)->getWorldMatrix();
    result = (LLMatrix4 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLMatrix4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLXformMatrix_setWorldMatrix(lua_State* L) {
  int SWIG_arg = 0;
  LLXformMatrix *arg1 = (LLXformMatrix *) 0 ;
  LLMatrix4 *arg2 = 0 ;
  
  SWIG_check_num_args("setWorldMatrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setWorldMatrix",1,"LLXformMatrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setWorldMatrix",2,"LLMatrix4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLXformMatrix,0))){
    SWIG_fail_ptr("LLXformMatrix_setWorldMatrix",1,SWIGTYPE_p_LLXformMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLMatrix4,0))){
    SWIG_fail_ptr("LLXformMatrix_setWorldMatrix",2,SWIGTYPE_p_LLMatrix4);
  }
  
  (arg1)->setWorldMatrix((LLMatrix4 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLXformMatrix_init(lua_State* L) {
  int SWIG_arg = 0;
  LLXformMatrix *arg1 = (LLXformMatrix *) 0 ;
  
  SWIG_check_num_args("init",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("init",1,"LLXformMatrix *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLXformMatrix,0))){
    SWIG_fail_ptr("LLXformMatrix_init",1,SWIGTYPE_p_LLXformMatrix);
  }
  
  (arg1)->init();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLXformMatrix_update(lua_State* L) {
  int SWIG_arg = 0;
  LLXformMatrix *arg1 = (LLXformMatrix *) 0 ;
  
  SWIG_check_num_args("update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("update",1,"LLXformMatrix *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLXformMatrix,0))){
    SWIG_fail_ptr("LLXformMatrix_update",1,SWIGTYPE_p_LLXformMatrix);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLXformMatrix_updateMatrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLXformMatrix *arg1 = (LLXformMatrix *) 0 ;
  BOOL arg2 ;
  BOOL *argp2 ;
  
  SWIG_check_num_args("updateMatrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateMatrix",1,"LLXformMatrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("updateMatrix",2,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLXformMatrix,0))){
    SWIG_fail_ptr("LLXformMatrix_updateMatrix",1,SWIGTYPE_p_LLXformMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("LLXformMatrix_updateMatrix",2,SWIGTYPE_p_BOOL);
  }
  arg2 = *argp2;
  
  (arg1)->updateMatrix(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLXformMatrix_updateMatrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLXformMatrix *arg1 = (LLXformMatrix *) 0 ;
  
  SWIG_check_num_args("updateMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateMatrix",1,"LLXformMatrix *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLXformMatrix,0))){
    SWIG_fail_ptr("LLXformMatrix_updateMatrix",1,SWIGTYPE_p_LLXformMatrix);
  }
  
  (arg1)->updateMatrix();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLXformMatrix_updateMatrix(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLXformMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_LLXformMatrix_updateMatrix__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLXformMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_BOOL, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLXformMatrix_updateMatrix__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLXformMatrix_updateMatrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    updateMatrix(LLXformMatrix *,BOOL)\n"
    "    updateMatrix(LLXformMatrix *)\n");
  lua_error(L);return 0;
}


static int _wrap_LLXformMatrix_getMinMax(lua_State* L) {
  int SWIG_arg = 0;
  LLXformMatrix *arg1 = (LLXformMatrix *) 0 ;
  LLVector3 *arg2 = 0 ;
  LLVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("getMinMax",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getMinMax",1,"LLXformMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getMinMax",2,"LLVector3 &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getMinMax",3,"LLVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLXformMatrix,0))){
    SWIG_fail_ptr("LLXformMatrix_getMinMax",1,SWIGTYPE_p_LLXformMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLXformMatrix_getMinMax",2,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLXformMatrix_getMinMax",3,SWIGTYPE_p_LLVector3);
  }
  
  ((LLXformMatrix const *)arg1)->getMinMax(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LLXformMatrix(void *obj) {
LLXformMatrix *arg1 = (LLXformMatrix *) obj;
delete arg1;
}
static swig_lua_method swig_LLXformMatrix_methods[] = {
    {"getWorldMatrix", _wrap_LLXformMatrix_getWorldMatrix}, 
    {"setWorldMatrix", _wrap_LLXformMatrix_setWorldMatrix}, 
    {"init", _wrap_LLXformMatrix_init}, 
    {"update", _wrap_LLXformMatrix_update}, 
    {"updateMatrix", _wrap_LLXformMatrix_updateMatrix}, 
    {"getMinMax", _wrap_LLXformMatrix_getMinMax}, 
    {0,0}
};
static swig_lua_attribute swig_LLXformMatrix_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_LLXformMatrix_bases[] = {0,0};
static const char *swig_LLXformMatrix_base_names[] = {"LLXform *",0};
static swig_lua_class _wrap_class_LLXformMatrix = { "LLXformMatrix", &SWIGTYPE_p_LLXformMatrix,_wrap_new_LLXformMatrix, swig_delete_LLXformMatrix, swig_LLXformMatrix_methods, swig_LLXformMatrix_attributes, swig_LLXformMatrix_bases, swig_LLXformMatrix_base_names };

static int _wrap_OBJECT_CUT_MIN_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("OBJECT_CUT_MIN",0,0)
  result = (F32)OBJECT_CUT_MIN;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBJECT_CUT_MAX_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("OBJECT_CUT_MAX",0,0)
  result = (F32)OBJECT_CUT_MAX;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBJECT_CUT_INC_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("OBJECT_CUT_INC",0,0)
  result = (F32)OBJECT_CUT_INC;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBJECT_MIN_CUT_INC_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("OBJECT_MIN_CUT_INC",0,0)
  result = (F32)OBJECT_MIN_CUT_INC;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBJECT_ROTATION_PRECISION_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("OBJECT_ROTATION_PRECISION",0,0)
  result = (F32)OBJECT_ROTATION_PRECISION;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBJECT_TWIST_MIN_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("OBJECT_TWIST_MIN",0,0)
  result = (F32)OBJECT_TWIST_MIN;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBJECT_TWIST_MAX_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("OBJECT_TWIST_MAX",0,0)
  result = (F32)OBJECT_TWIST_MAX;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBJECT_TWIST_INC_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("OBJECT_TWIST_INC",0,0)
  result = (F32)OBJECT_TWIST_INC;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBJECT_TWIST_LINEAR_MIN_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("OBJECT_TWIST_LINEAR_MIN",0,0)
  result = (F32)OBJECT_TWIST_LINEAR_MIN;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBJECT_TWIST_LINEAR_MAX_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("OBJECT_TWIST_LINEAR_MAX",0,0)
  result = (F32)OBJECT_TWIST_LINEAR_MAX;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBJECT_TWIST_LINEAR_INC_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("OBJECT_TWIST_LINEAR_INC",0,0)
  result = (F32)OBJECT_TWIST_LINEAR_INC;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBJECT_MIN_HOLE_SIZE_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("OBJECT_MIN_HOLE_SIZE",0,0)
  result = (F32)OBJECT_MIN_HOLE_SIZE;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBJECT_MAX_HOLE_SIZE_X_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("OBJECT_MAX_HOLE_SIZE_X",0,0)
  result = (F32)OBJECT_MAX_HOLE_SIZE_X;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBJECT_MAX_HOLE_SIZE_Y_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("OBJECT_MAX_HOLE_SIZE_Y",0,0)
  result = (F32)OBJECT_MAX_HOLE_SIZE_Y;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBJECT_REV_MIN_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("OBJECT_REV_MIN",0,0)
  result = (F32)OBJECT_REV_MIN;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBJECT_REV_MAX_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("OBJECT_REV_MAX",0,0)
  result = (F32)OBJECT_REV_MAX;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBJECT_REV_INC_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("OBJECT_REV_INC",0,0)
  result = (F32)OBJECT_REV_INC;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SCULPT_DEFAULT_TEXTURE_set(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("SCULPT_DEFAULT_TEXTURE",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("SCULPT_DEFAULT_TEXTURE",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  {
    if (arg1) {
      SCULPT_DEFAULT_TEXTURE = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)SCULPT_DEFAULT_TEXTURE, (const char *)arg1);
    } else {
      SCULPT_DEFAULT_TEXTURE = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SCULPT_DEFAULT_TEXTURE_get(lua_State* L) {
  int SWIG_arg = 0;
  char *result = 0 ;
  
  SWIG_check_num_args("SCULPT_DEFAULT_TEXTURE",0,0)
  result = (char *)SCULPT_DEFAULT_TEXTURE;
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLNetworkData_mType_set(lua_State* L) {
  int SWIG_arg = 0;
  LLNetworkData *arg1 = (LLNetworkData *) 0 ;
  U16 arg2 ;
  U16 *argp2 ;
  
  SWIG_check_num_args("mType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mType",1,"LLNetworkData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mType",2,"U16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLNetworkData,0))){
    SWIG_fail_ptr("LLNetworkData_mType_set",1,SWIGTYPE_p_LLNetworkData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U16,0))){
    SWIG_fail_ptr("LLNetworkData_mType_set",2,SWIGTYPE_p_U16);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->mType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLNetworkData_mType_get(lua_State* L) {
  int SWIG_arg = 0;
  LLNetworkData *arg1 = (LLNetworkData *) 0 ;
  U16 result;
  
  SWIG_check_num_args("mType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mType",1,"LLNetworkData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLNetworkData,0))){
    SWIG_fail_ptr("LLNetworkData_mType_get",1,SWIGTYPE_p_LLNetworkData);
  }
  
  result =  ((arg1)->mType);
  {
    U16 * resultptr = new U16((const U16 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_U16,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLNetworkData_pack(lua_State* L) {
  int SWIG_arg = 0;
  LLNetworkData *arg1 = (LLNetworkData *) 0 ;
  LLDataPacker *arg2 = 0 ;
  BOOL result;
  
  SWIG_check_num_args("pack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pack",1,"LLNetworkData const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pack",2,"LLDataPacker &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLNetworkData,0))){
    SWIG_fail_ptr("LLNetworkData_pack",1,SWIGTYPE_p_LLNetworkData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLDataPacker,0))){
    SWIG_fail_ptr("LLNetworkData_pack",2,SWIGTYPE_p_LLDataPacker);
  }
  
  result = ((LLNetworkData const *)arg1)->pack(*arg2);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLNetworkData_unpack(lua_State* L) {
  int SWIG_arg = 0;
  LLNetworkData *arg1 = (LLNetworkData *) 0 ;
  LLDataPacker *arg2 = 0 ;
  BOOL result;
  
  SWIG_check_num_args("unpack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("unpack",1,"LLNetworkData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("unpack",2,"LLDataPacker &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLNetworkData,0))){
    SWIG_fail_ptr("LLNetworkData_unpack",1,SWIGTYPE_p_LLNetworkData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLDataPacker,0))){
    SWIG_fail_ptr("LLNetworkData_unpack",2,SWIGTYPE_p_LLDataPacker);
  }
  
  result = (arg1)->unpack(*arg2);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLNetworkData___eq(lua_State* L) {
  int SWIG_arg = 0;
  LLNetworkData *arg1 = (LLNetworkData *) 0 ;
  LLNetworkData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ==",1,"LLNetworkData const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator ==",2,"LLNetworkData const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLNetworkData,0))){
    SWIG_fail_ptr("LLNetworkData___eq",1,SWIGTYPE_p_LLNetworkData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLNetworkData,0))){
    SWIG_fail_ptr("LLNetworkData___eq",2,SWIGTYPE_p_LLNetworkData);
  }
  
  result = (bool)((LLNetworkData const *)arg1)->operator ==((LLNetworkData const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLNetworkData_copy(lua_State* L) {
  int SWIG_arg = 0;
  LLNetworkData *arg1 = (LLNetworkData *) 0 ;
  LLNetworkData *arg2 = 0 ;
  
  SWIG_check_num_args("copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("copy",1,"LLNetworkData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("copy",2,"LLNetworkData const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLNetworkData,0))){
    SWIG_fail_ptr("LLNetworkData_copy",1,SWIGTYPE_p_LLNetworkData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLNetworkData,0))){
    SWIG_fail_ptr("LLNetworkData_copy",2,SWIGTYPE_p_LLNetworkData);
  }
  
  (arg1)->copy((LLNetworkData const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLNetworkData_isValid(lua_State* L) {
  int SWIG_arg = 0;
  U16 arg1 ;
  U32 arg2 ;
  U16 *argp1 ;
  U32 *argp2 ;
  BOOL result;
  
  SWIG_check_num_args("LLNetworkData::isValid",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LLNetworkData::isValid",1,"U16");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LLNetworkData::isValid",2,"U32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_U16,0))){
    SWIG_fail_ptr("LLNetworkData_isValid",1,SWIGTYPE_p_U16);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U32,0))){
    SWIG_fail_ptr("LLNetworkData_isValid",2,SWIGTYPE_p_U32);
  }
  arg2 = *argp2;
  
  result = LLNetworkData::isValid(arg1,arg2);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LLNetworkData(void *obj) {
LLNetworkData *arg1 = (LLNetworkData *) obj;
delete arg1;
}
static swig_lua_method swig_LLNetworkData_methods[] = {
    {"pack", _wrap_LLNetworkData_pack}, 
    {"unpack", _wrap_LLNetworkData_unpack}, 
    {"__eq", _wrap_LLNetworkData___eq}, 
    {"copy", _wrap_LLNetworkData_copy}, 
    {0,0}
};
static swig_lua_attribute swig_LLNetworkData_attributes[] = {
    { "mType", _wrap_LLNetworkData_mType_get, _wrap_LLNetworkData_mType_set},
    {0,0,0}
};
static swig_lua_class *swig_LLNetworkData_bases[] = {0};
static const char *swig_LLNetworkData_base_names[] = {0};
static swig_lua_class _wrap_class_LLNetworkData = { "LLNetworkData", &SWIGTYPE_p_LLNetworkData,0, swig_delete_LLNetworkData, swig_LLNetworkData_methods, swig_LLNetworkData_attributes, swig_LLNetworkData_bases, swig_LLNetworkData_base_names };

static int _wrap_LIGHT_MIN_RADIUS_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("LIGHT_MIN_RADIUS",0,0)
  result = (F32)LIGHT_MIN_RADIUS;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LIGHT_DEFAULT_RADIUS_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("LIGHT_DEFAULT_RADIUS",0,0)
  result = (F32)LIGHT_DEFAULT_RADIUS;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LIGHT_MAX_RADIUS_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("LIGHT_MAX_RADIUS",0,0)
  result = (F32)LIGHT_MAX_RADIUS;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LIGHT_MIN_FALLOFF_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("LIGHT_MIN_FALLOFF",0,0)
  result = (F32)LIGHT_MIN_FALLOFF;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LIGHT_DEFAULT_FALLOFF_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("LIGHT_DEFAULT_FALLOFF",0,0)
  result = (F32)LIGHT_DEFAULT_FALLOFF;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LIGHT_MAX_FALLOFF_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("LIGHT_MAX_FALLOFF",0,0)
  result = (F32)LIGHT_MAX_FALLOFF;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LIGHT_MIN_CUTOFF_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("LIGHT_MIN_CUTOFF",0,0)
  result = (F32)LIGHT_MIN_CUTOFF;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LIGHT_DEFAULT_CUTOFF_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("LIGHT_DEFAULT_CUTOFF",0,0)
  result = (F32)LIGHT_DEFAULT_CUTOFF;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LIGHT_MAX_CUTOFF_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("LIGHT_MAX_CUTOFF",0,0)
  result = (F32)LIGHT_MAX_CUTOFF;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLLightParams(lua_State* L) {
  int SWIG_arg = 0;
  LLLightParams *result = 0 ;
  
  SWIG_check_num_args("LLLightParams",0,0)
  result = (LLLightParams *)new LLLightParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLLightParams,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLLightParams_pack(lua_State* L) {
  int SWIG_arg = 0;
  LLLightParams *arg1 = (LLLightParams *) 0 ;
  LLDataPacker *arg2 = 0 ;
  BOOL result;
  
  SWIG_check_num_args("pack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pack",1,"LLLightParams const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pack",2,"LLDataPacker &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLLightParams,0))){
    SWIG_fail_ptr("LLLightParams_pack",1,SWIGTYPE_p_LLLightParams);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLDataPacker,0))){
    SWIG_fail_ptr("LLLightParams_pack",2,SWIGTYPE_p_LLDataPacker);
  }
  
  result = ((LLLightParams const *)arg1)->pack(*arg2);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLLightParams_unpack(lua_State* L) {
  int SWIG_arg = 0;
  LLLightParams *arg1 = (LLLightParams *) 0 ;
  LLDataPacker *arg2 = 0 ;
  BOOL result;
  
  SWIG_check_num_args("unpack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("unpack",1,"LLLightParams *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("unpack",2,"LLDataPacker &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLLightParams,0))){
    SWIG_fail_ptr("LLLightParams_unpack",1,SWIGTYPE_p_LLLightParams);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLDataPacker,0))){
    SWIG_fail_ptr("LLLightParams_unpack",2,SWIGTYPE_p_LLDataPacker);
  }
  
  result = (arg1)->unpack(*arg2);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLLightParams___eq(lua_State* L) {
  int SWIG_arg = 0;
  LLLightParams *arg1 = (LLLightParams *) 0 ;
  LLNetworkData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ==",1,"LLLightParams const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator ==",2,"LLNetworkData const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLLightParams,0))){
    SWIG_fail_ptr("LLLightParams___eq",1,SWIGTYPE_p_LLLightParams);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLNetworkData,0))){
    SWIG_fail_ptr("LLLightParams___eq",2,SWIGTYPE_p_LLNetworkData);
  }
  
  result = (bool)((LLLightParams const *)arg1)->operator ==((LLNetworkData const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLLightParams_copy(lua_State* L) {
  int SWIG_arg = 0;
  LLLightParams *arg1 = (LLLightParams *) 0 ;
  LLNetworkData *arg2 = 0 ;
  
  SWIG_check_num_args("copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("copy",1,"LLLightParams *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("copy",2,"LLNetworkData const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLLightParams,0))){
    SWIG_fail_ptr("LLLightParams_copy",1,SWIGTYPE_p_LLLightParams);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLNetworkData,0))){
    SWIG_fail_ptr("LLLightParams_copy",2,SWIGTYPE_p_LLNetworkData);
  }
  
  (arg1)->copy((LLNetworkData const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLLightParams_asLLSD(lua_State* L) {
  int SWIG_arg = 0;
  LLLightParams *arg1 = (LLLightParams *) 0 ;
  LLSD result;
  
  SWIG_check_num_args("asLLSD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("asLLSD",1,"LLLightParams const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLLightParams,0))){
    SWIG_fail_ptr("LLLightParams_asLLSD",1,SWIGTYPE_p_LLLightParams);
  }
  
  result = ((LLLightParams const *)arg1)->asLLSD();
  {
    LLSD * resultptr = new LLSD((const LLSD &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLSD,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLLightParams_fromLLSD(lua_State* L) {
  int SWIG_arg = 0;
  LLLightParams *arg1 = (LLLightParams *) 0 ;
  LLSD *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("fromLLSD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fromLLSD",1,"LLLightParams *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("fromLLSD",2,"LLSD &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLLightParams,0))){
    SWIG_fail_ptr("LLLightParams_fromLLSD",1,SWIGTYPE_p_LLLightParams);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLSD,0))){
    SWIG_fail_ptr("LLLightParams_fromLLSD",2,SWIGTYPE_p_LLSD);
  }
  
  result = (bool)(arg1)->fromLLSD(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLLightParams_setColor(lua_State* L) {
  int SWIG_arg = 0;
  LLLightParams *arg1 = (LLLightParams *) 0 ;
  LLColor4 *arg2 = 0 ;
  
  SWIG_check_num_args("setColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setColor",1,"LLLightParams *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setColor",2,"LLColor4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLLightParams,0))){
    SWIG_fail_ptr("LLLightParams_setColor",1,SWIGTYPE_p_LLLightParams);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLLightParams_setColor",2,SWIGTYPE_p_LLColor4);
  }
  
  (arg1)->setColor((LLColor4 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLLightParams_setRadius(lua_State* L) {
  int SWIG_arg = 0;
  LLLightParams *arg1 = (LLLightParams *) 0 ;
  F32 arg2 ;
  F32 *argp2 ;
  
  SWIG_check_num_args("setRadius",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setRadius",1,"LLLightParams *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setRadius",2,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLLightParams,0))){
    SWIG_fail_ptr("LLLightParams_setRadius",1,SWIGTYPE_p_LLLightParams);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLLightParams_setRadius",2,SWIGTYPE_p_F32);
  }
  arg2 = *argp2;
  
  (arg1)->setRadius(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLLightParams_setFalloff(lua_State* L) {
  int SWIG_arg = 0;
  LLLightParams *arg1 = (LLLightParams *) 0 ;
  F32 arg2 ;
  F32 *argp2 ;
  
  SWIG_check_num_args("setFalloff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setFalloff",1,"LLLightParams *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setFalloff",2,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLLightParams,0))){
    SWIG_fail_ptr("LLLightParams_setFalloff",1,SWIGTYPE_p_LLLightParams);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLLightParams_setFalloff",2,SWIGTYPE_p_F32);
  }
  arg2 = *argp2;
  
  (arg1)->setFalloff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLLightParams_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  LLLightParams *arg1 = (LLLightParams *) 0 ;
  F32 arg2 ;
  F32 *argp2 ;
  
  SWIG_check_num_args("setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setCutoff",1,"LLLightParams *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setCutoff",2,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLLightParams,0))){
    SWIG_fail_ptr("LLLightParams_setCutoff",1,SWIGTYPE_p_LLLightParams);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLLightParams_setCutoff",2,SWIGTYPE_p_F32);
  }
  arg2 = *argp2;
  
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLLightParams_getColor(lua_State* L) {
  int SWIG_arg = 0;
  LLLightParams *arg1 = (LLLightParams *) 0 ;
  LLColor4 result;
  
  SWIG_check_num_args("getColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getColor",1,"LLLightParams const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLLightParams,0))){
    SWIG_fail_ptr("LLLightParams_getColor",1,SWIGTYPE_p_LLLightParams);
  }
  
  result = ((LLLightParams const *)arg1)->getColor();
  {
    LLColor4 * resultptr = new LLColor4((const LLColor4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLColor4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLLightParams_getRadius(lua_State* L) {
  int SWIG_arg = 0;
  LLLightParams *arg1 = (LLLightParams *) 0 ;
  F32 result;
  
  SWIG_check_num_args("getRadius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRadius",1,"LLLightParams const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLLightParams,0))){
    SWIG_fail_ptr("LLLightParams_getRadius",1,SWIGTYPE_p_LLLightParams);
  }
  
  result = ((LLLightParams const *)arg1)->getRadius();
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLLightParams_getFalloff(lua_State* L) {
  int SWIG_arg = 0;
  LLLightParams *arg1 = (LLLightParams *) 0 ;
  F32 result;
  
  SWIG_check_num_args("getFalloff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFalloff",1,"LLLightParams const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLLightParams,0))){
    SWIG_fail_ptr("LLLightParams_getFalloff",1,SWIGTYPE_p_LLLightParams);
  }
  
  result = ((LLLightParams const *)arg1)->getFalloff();
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLLightParams_getCutoff(lua_State* L) {
  int SWIG_arg = 0;
  LLLightParams *arg1 = (LLLightParams *) 0 ;
  F32 result;
  
  SWIG_check_num_args("getCutoff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getCutoff",1,"LLLightParams const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLLightParams,0))){
    SWIG_fail_ptr("LLLightParams_getCutoff",1,SWIGTYPE_p_LLLightParams);
  }
  
  result = ((LLLightParams const *)arg1)->getCutoff();
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LLLightParams(void *obj) {
LLLightParams *arg1 = (LLLightParams *) obj;
delete arg1;
}
static swig_lua_method swig_LLLightParams_methods[] = {
    {"pack", _wrap_LLLightParams_pack}, 
    {"unpack", _wrap_LLLightParams_unpack}, 
    {"__eq", _wrap_LLLightParams___eq}, 
    {"copy", _wrap_LLLightParams_copy}, 
    {"asLLSD", _wrap_LLLightParams_asLLSD}, 
    {"fromLLSD", _wrap_LLLightParams_fromLLSD}, 
    {"setColor", _wrap_LLLightParams_setColor}, 
    {"setRadius", _wrap_LLLightParams_setRadius}, 
    {"setFalloff", _wrap_LLLightParams_setFalloff}, 
    {"setCutoff", _wrap_LLLightParams_setCutoff}, 
    {"getColor", _wrap_LLLightParams_getColor}, 
    {"getRadius", _wrap_LLLightParams_getRadius}, 
    {"getFalloff", _wrap_LLLightParams_getFalloff}, 
    {"getCutoff", _wrap_LLLightParams_getCutoff}, 
    {0,0}
};
static swig_lua_attribute swig_LLLightParams_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_LLLightParams_bases[] = {0,0};
static const char *swig_LLLightParams_base_names[] = {"LLNetworkData *",0};
static swig_lua_class _wrap_class_LLLightParams = { "LLLightParams", &SWIGTYPE_p_LLLightParams,_wrap_new_LLLightParams, swig_delete_LLLightParams, swig_LLLightParams_methods, swig_LLLightParams_attributes, swig_LLLightParams_bases, swig_LLLightParams_base_names };

static int _wrap_FLEXIBLE_OBJECT_MIN_TENSION_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("FLEXIBLE_OBJECT_MIN_TENSION",0,0)
  result = (F32)FLEXIBLE_OBJECT_MIN_TENSION;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FLEXIBLE_OBJECT_DEFAULT_TENSION_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("FLEXIBLE_OBJECT_DEFAULT_TENSION",0,0)
  result = (F32)FLEXIBLE_OBJECT_DEFAULT_TENSION;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FLEXIBLE_OBJECT_MAX_TENSION_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("FLEXIBLE_OBJECT_MAX_TENSION",0,0)
  result = (F32)FLEXIBLE_OBJECT_MAX_TENSION;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FLEXIBLE_OBJECT_MIN_AIR_FRICTION_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("FLEXIBLE_OBJECT_MIN_AIR_FRICTION",0,0)
  result = (F32)FLEXIBLE_OBJECT_MIN_AIR_FRICTION;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FLEXIBLE_OBJECT_DEFAULT_AIR_FRICTION_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("FLEXIBLE_OBJECT_DEFAULT_AIR_FRICTION",0,0)
  result = (F32)FLEXIBLE_OBJECT_DEFAULT_AIR_FRICTION;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FLEXIBLE_OBJECT_MAX_AIR_FRICTION_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("FLEXIBLE_OBJECT_MAX_AIR_FRICTION",0,0)
  result = (F32)FLEXIBLE_OBJECT_MAX_AIR_FRICTION;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FLEXIBLE_OBJECT_MIN_GRAVITY_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("FLEXIBLE_OBJECT_MIN_GRAVITY",0,0)
  result = (F32)FLEXIBLE_OBJECT_MIN_GRAVITY;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FLEXIBLE_OBJECT_DEFAULT_GRAVITY_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("FLEXIBLE_OBJECT_DEFAULT_GRAVITY",0,0)
  result = (F32)FLEXIBLE_OBJECT_DEFAULT_GRAVITY;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FLEXIBLE_OBJECT_MAX_GRAVITY_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("FLEXIBLE_OBJECT_MAX_GRAVITY",0,0)
  result = (F32)FLEXIBLE_OBJECT_MAX_GRAVITY;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FLEXIBLE_OBJECT_MIN_WIND_SENSITIVITY_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("FLEXIBLE_OBJECT_MIN_WIND_SENSITIVITY",0,0)
  result = (F32)FLEXIBLE_OBJECT_MIN_WIND_SENSITIVITY;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FLEXIBLE_OBJECT_DEFAULT_WIND_SENSITIVITY_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("FLEXIBLE_OBJECT_DEFAULT_WIND_SENSITIVITY",0,0)
  result = (F32)FLEXIBLE_OBJECT_DEFAULT_WIND_SENSITIVITY;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FLEXIBLE_OBJECT_MAX_WIND_SENSITIVITY_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("FLEXIBLE_OBJECT_MAX_WIND_SENSITIVITY",0,0)
  result = (F32)FLEXIBLE_OBJECT_MAX_WIND_SENSITIVITY;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FLEXIBLE_OBJECT_MAX_INTERNAL_TENSION_FORCE_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("FLEXIBLE_OBJECT_MAX_INTERNAL_TENSION_FORCE",0,0)
  result = (F32)FLEXIBLE_OBJECT_MAX_INTERNAL_TENSION_FORCE;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FLEXIBLE_OBJECT_DEFAULT_LENGTH_get(lua_State* L) {
  int SWIG_arg = 0;
  F32 result;
  
  SWIG_check_num_args("FLEXIBLE_OBJECT_DEFAULT_LENGTH",0,0)
  result = (F32)FLEXIBLE_OBJECT_DEFAULT_LENGTH;
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FLEXIBLE_OBJECT_DEFAULT_USING_COLLISION_SPHERE_get(lua_State* L) {
  int SWIG_arg = 0;
  BOOL result;
  
  SWIG_check_num_args("FLEXIBLE_OBJECT_DEFAULT_USING_COLLISION_SPHERE",0,0)
  result = (BOOL)FLEXIBLE_OBJECT_DEFAULT_USING_COLLISION_SPHERE;
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FLEXIBLE_OBJECT_DEFAULT_RENDERING_COLLISION_SPHERE_get(lua_State* L) {
  int SWIG_arg = 0;
  BOOL result;
  
  SWIG_check_num_args("FLEXIBLE_OBJECT_DEFAULT_RENDERING_COLLISION_SPHERE",0,0)
  result = (BOOL)FLEXIBLE_OBJECT_DEFAULT_RENDERING_COLLISION_SPHERE;
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLFlexibleObjectData_setSimulateLOD(lua_State* L) {
  int SWIG_arg = 0;
  LLFlexibleObjectData *arg1 = (LLFlexibleObjectData *) 0 ;
  S32 arg2 ;
  S32 *argp2 ;
  
  SWIG_check_num_args("setSimulateLOD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setSimulateLOD",1,"LLFlexibleObjectData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setSimulateLOD",2,"S32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLFlexibleObjectData,0))){
    SWIG_fail_ptr("LLFlexibleObjectData_setSimulateLOD",1,SWIGTYPE_p_LLFlexibleObjectData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_S32,0))){
    SWIG_fail_ptr("LLFlexibleObjectData_setSimulateLOD",2,SWIGTYPE_p_S32);
  }
  arg2 = *argp2;
  
  (arg1)->setSimulateLOD(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLFlexibleObjectData_setGravity(lua_State* L) {
  int SWIG_arg = 0;
  LLFlexibleObjectData *arg1 = (LLFlexibleObjectData *) 0 ;
  F32 arg2 ;
  F32 *argp2 ;
  
  SWIG_check_num_args("setGravity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setGravity",1,"LLFlexibleObjectData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setGravity",2,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLFlexibleObjectData,0))){
    SWIG_fail_ptr("LLFlexibleObjectData_setGravity",1,SWIGTYPE_p_LLFlexibleObjectData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLFlexibleObjectData_setGravity",2,SWIGTYPE_p_F32);
  }
  arg2 = *argp2;
  
  (arg1)->setGravity(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLFlexibleObjectData_setAirFriction(lua_State* L) {
  int SWIG_arg = 0;
  LLFlexibleObjectData *arg1 = (LLFlexibleObjectData *) 0 ;
  F32 arg2 ;
  F32 *argp2 ;
  
  SWIG_check_num_args("setAirFriction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAirFriction",1,"LLFlexibleObjectData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setAirFriction",2,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLFlexibleObjectData,0))){
    SWIG_fail_ptr("LLFlexibleObjectData_setAirFriction",1,SWIGTYPE_p_LLFlexibleObjectData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLFlexibleObjectData_setAirFriction",2,SWIGTYPE_p_F32);
  }
  arg2 = *argp2;
  
  (arg1)->setAirFriction(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLFlexibleObjectData_setWindSensitivity(lua_State* L) {
  int SWIG_arg = 0;
  LLFlexibleObjectData *arg1 = (LLFlexibleObjectData *) 0 ;
  F32 arg2 ;
  F32 *argp2 ;
  
  SWIG_check_num_args("setWindSensitivity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setWindSensitivity",1,"LLFlexibleObjectData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setWindSensitivity",2,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLFlexibleObjectData,0))){
    SWIG_fail_ptr("LLFlexibleObjectData_setWindSensitivity",1,SWIGTYPE_p_LLFlexibleObjectData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLFlexibleObjectData_setWindSensitivity",2,SWIGTYPE_p_F32);
  }
  arg2 = *argp2;
  
  (arg1)->setWindSensitivity(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLFlexibleObjectData_setTension(lua_State* L) {
  int SWIG_arg = 0;
  LLFlexibleObjectData *arg1 = (LLFlexibleObjectData *) 0 ;
  F32 arg2 ;
  F32 *argp2 ;
  
  SWIG_check_num_args("setTension",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTension",1,"LLFlexibleObjectData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTension",2,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLFlexibleObjectData,0))){
    SWIG_fail_ptr("LLFlexibleObjectData_setTension",1,SWIGTYPE_p_LLFlexibleObjectData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLFlexibleObjectData_setTension",2,SWIGTYPE_p_F32);
  }
  arg2 = *argp2;
  
  (arg1)->setTension(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLFlexibleObjectData_setUserForce(lua_State* L) {
  int SWIG_arg = 0;
  LLFlexibleObjectData *arg1 = (LLFlexibleObjectData *) 0 ;
  LLVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("setUserForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setUserForce",1,"LLFlexibleObjectData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setUserForce",2,"LLVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLFlexibleObjectData,0))){
    SWIG_fail_ptr("LLFlexibleObjectData_setUserForce",1,SWIGTYPE_p_LLFlexibleObjectData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLFlexibleObjectData_setUserForce",2,SWIGTYPE_p_LLVector3);
  }
  
  (arg1)->setUserForce(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLFlexibleObjectData_getSimulateLOD(lua_State* L) {
  int SWIG_arg = 0;
  LLFlexibleObjectData *arg1 = (LLFlexibleObjectData *) 0 ;
  S32 result;
  
  SWIG_check_num_args("getSimulateLOD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSimulateLOD",1,"LLFlexibleObjectData const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLFlexibleObjectData,0))){
    SWIG_fail_ptr("LLFlexibleObjectData_getSimulateLOD",1,SWIGTYPE_p_LLFlexibleObjectData);
  }
  
  result = ((LLFlexibleObjectData const *)arg1)->getSimulateLOD();
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLFlexibleObjectData_getGravity(lua_State* L) {
  int SWIG_arg = 0;
  LLFlexibleObjectData *arg1 = (LLFlexibleObjectData *) 0 ;
  F32 result;
  
  SWIG_check_num_args("getGravity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGravity",1,"LLFlexibleObjectData const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLFlexibleObjectData,0))){
    SWIG_fail_ptr("LLFlexibleObjectData_getGravity",1,SWIGTYPE_p_LLFlexibleObjectData);
  }
  
  result = ((LLFlexibleObjectData const *)arg1)->getGravity();
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLFlexibleObjectData_getAirFriction(lua_State* L) {
  int SWIG_arg = 0;
  LLFlexibleObjectData *arg1 = (LLFlexibleObjectData *) 0 ;
  F32 result;
  
  SWIG_check_num_args("getAirFriction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAirFriction",1,"LLFlexibleObjectData const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLFlexibleObjectData,0))){
    SWIG_fail_ptr("LLFlexibleObjectData_getAirFriction",1,SWIGTYPE_p_LLFlexibleObjectData);
  }
  
  result = ((LLFlexibleObjectData const *)arg1)->getAirFriction();
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLFlexibleObjectData_getWindSensitivity(lua_State* L) {
  int SWIG_arg = 0;
  LLFlexibleObjectData *arg1 = (LLFlexibleObjectData *) 0 ;
  F32 result;
  
  SWIG_check_num_args("getWindSensitivity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getWindSensitivity",1,"LLFlexibleObjectData const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLFlexibleObjectData,0))){
    SWIG_fail_ptr("LLFlexibleObjectData_getWindSensitivity",1,SWIGTYPE_p_LLFlexibleObjectData);
  }
  
  result = ((LLFlexibleObjectData const *)arg1)->getWindSensitivity();
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLFlexibleObjectData_getTension(lua_State* L) {
  int SWIG_arg = 0;
  LLFlexibleObjectData *arg1 = (LLFlexibleObjectData *) 0 ;
  F32 result;
  
  SWIG_check_num_args("getTension",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTension",1,"LLFlexibleObjectData const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLFlexibleObjectData,0))){
    SWIG_fail_ptr("LLFlexibleObjectData_getTension",1,SWIGTYPE_p_LLFlexibleObjectData);
  }
  
  result = ((LLFlexibleObjectData const *)arg1)->getTension();
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLFlexibleObjectData_getUserForce(lua_State* L) {
  int SWIG_arg = 0;
  LLFlexibleObjectData *arg1 = (LLFlexibleObjectData *) 0 ;
  LLVector3 result;
  
  SWIG_check_num_args("getUserForce",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getUserForce",1,"LLFlexibleObjectData const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLFlexibleObjectData,0))){
    SWIG_fail_ptr("LLFlexibleObjectData_getUserForce",1,SWIGTYPE_p_LLFlexibleObjectData);
  }
  
  result = ((LLFlexibleObjectData const *)arg1)->getUserForce();
  {
    LLVector3 * resultptr = new LLVector3((const LLVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLFlexibleObjectData(lua_State* L) {
  int SWIG_arg = 0;
  LLFlexibleObjectData *result = 0 ;
  
  SWIG_check_num_args("LLFlexibleObjectData",0,0)
  result = (LLFlexibleObjectData *)new LLFlexibleObjectData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLFlexibleObjectData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLFlexibleObjectData_pack(lua_State* L) {
  int SWIG_arg = 0;
  LLFlexibleObjectData *arg1 = (LLFlexibleObjectData *) 0 ;
  LLDataPacker *arg2 = 0 ;
  BOOL result;
  
  SWIG_check_num_args("pack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pack",1,"LLFlexibleObjectData const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pack",2,"LLDataPacker &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLFlexibleObjectData,0))){
    SWIG_fail_ptr("LLFlexibleObjectData_pack",1,SWIGTYPE_p_LLFlexibleObjectData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLDataPacker,0))){
    SWIG_fail_ptr("LLFlexibleObjectData_pack",2,SWIGTYPE_p_LLDataPacker);
  }
  
  result = ((LLFlexibleObjectData const *)arg1)->pack(*arg2);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLFlexibleObjectData_unpack(lua_State* L) {
  int SWIG_arg = 0;
  LLFlexibleObjectData *arg1 = (LLFlexibleObjectData *) 0 ;
  LLDataPacker *arg2 = 0 ;
  BOOL result;
  
  SWIG_check_num_args("unpack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("unpack",1,"LLFlexibleObjectData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("unpack",2,"LLDataPacker &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLFlexibleObjectData,0))){
    SWIG_fail_ptr("LLFlexibleObjectData_unpack",1,SWIGTYPE_p_LLFlexibleObjectData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLDataPacker,0))){
    SWIG_fail_ptr("LLFlexibleObjectData_unpack",2,SWIGTYPE_p_LLDataPacker);
  }
  
  result = (arg1)->unpack(*arg2);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLFlexibleObjectData___eq(lua_State* L) {
  int SWIG_arg = 0;
  LLFlexibleObjectData *arg1 = (LLFlexibleObjectData *) 0 ;
  LLNetworkData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ==",1,"LLFlexibleObjectData const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator ==",2,"LLNetworkData const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLFlexibleObjectData,0))){
    SWIG_fail_ptr("LLFlexibleObjectData___eq",1,SWIGTYPE_p_LLFlexibleObjectData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLNetworkData,0))){
    SWIG_fail_ptr("LLFlexibleObjectData___eq",2,SWIGTYPE_p_LLNetworkData);
  }
  
  result = (bool)((LLFlexibleObjectData const *)arg1)->operator ==((LLNetworkData const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLFlexibleObjectData_copy(lua_State* L) {
  int SWIG_arg = 0;
  LLFlexibleObjectData *arg1 = (LLFlexibleObjectData *) 0 ;
  LLNetworkData *arg2 = 0 ;
  
  SWIG_check_num_args("copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("copy",1,"LLFlexibleObjectData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("copy",2,"LLNetworkData const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLFlexibleObjectData,0))){
    SWIG_fail_ptr("LLFlexibleObjectData_copy",1,SWIGTYPE_p_LLFlexibleObjectData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLNetworkData,0))){
    SWIG_fail_ptr("LLFlexibleObjectData_copy",2,SWIGTYPE_p_LLNetworkData);
  }
  
  (arg1)->copy((LLNetworkData const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLFlexibleObjectData_asLLSD(lua_State* L) {
  int SWIG_arg = 0;
  LLFlexibleObjectData *arg1 = (LLFlexibleObjectData *) 0 ;
  LLSD result;
  
  SWIG_check_num_args("asLLSD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("asLLSD",1,"LLFlexibleObjectData const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLFlexibleObjectData,0))){
    SWIG_fail_ptr("LLFlexibleObjectData_asLLSD",1,SWIGTYPE_p_LLFlexibleObjectData);
  }
  
  result = ((LLFlexibleObjectData const *)arg1)->asLLSD();
  {
    LLSD * resultptr = new LLSD((const LLSD &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLSD,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLFlexibleObjectData_fromLLSD(lua_State* L) {
  int SWIG_arg = 0;
  LLFlexibleObjectData *arg1 = (LLFlexibleObjectData *) 0 ;
  LLSD *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("fromLLSD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fromLLSD",1,"LLFlexibleObjectData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("fromLLSD",2,"LLSD &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLFlexibleObjectData,0))){
    SWIG_fail_ptr("LLFlexibleObjectData_fromLLSD",1,SWIGTYPE_p_LLFlexibleObjectData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLSD,0))){
    SWIG_fail_ptr("LLFlexibleObjectData_fromLLSD",2,SWIGTYPE_p_LLSD);
  }
  
  result = (bool)(arg1)->fromLLSD(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LLFlexibleObjectData(void *obj) {
LLFlexibleObjectData *arg1 = (LLFlexibleObjectData *) obj;
delete arg1;
}
static swig_lua_method swig_LLFlexibleObjectData_methods[] = {
    {"setSimulateLOD", _wrap_LLFlexibleObjectData_setSimulateLOD}, 
    {"setGravity", _wrap_LLFlexibleObjectData_setGravity}, 
    {"setAirFriction", _wrap_LLFlexibleObjectData_setAirFriction}, 
    {"setWindSensitivity", _wrap_LLFlexibleObjectData_setWindSensitivity}, 
    {"setTension", _wrap_LLFlexibleObjectData_setTension}, 
    {"setUserForce", _wrap_LLFlexibleObjectData_setUserForce}, 
    {"getSimulateLOD", _wrap_LLFlexibleObjectData_getSimulateLOD}, 
    {"getGravity", _wrap_LLFlexibleObjectData_getGravity}, 
    {"getAirFriction", _wrap_LLFlexibleObjectData_getAirFriction}, 
    {"getWindSensitivity", _wrap_LLFlexibleObjectData_getWindSensitivity}, 
    {"getTension", _wrap_LLFlexibleObjectData_getTension}, 
    {"getUserForce", _wrap_LLFlexibleObjectData_getUserForce}, 
    {"pack", _wrap_LLFlexibleObjectData_pack}, 
    {"unpack", _wrap_LLFlexibleObjectData_unpack}, 
    {"__eq", _wrap_LLFlexibleObjectData___eq}, 
    {"copy", _wrap_LLFlexibleObjectData_copy}, 
    {"asLLSD", _wrap_LLFlexibleObjectData_asLLSD}, 
    {"fromLLSD", _wrap_LLFlexibleObjectData_fromLLSD}, 
    {0,0}
};
static swig_lua_attribute swig_LLFlexibleObjectData_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_LLFlexibleObjectData_bases[] = {0,0};
static const char *swig_LLFlexibleObjectData_base_names[] = {"LLNetworkData *",0};
static swig_lua_class _wrap_class_LLFlexibleObjectData = { "LLFlexibleObjectData", &SWIGTYPE_p_LLFlexibleObjectData,_wrap_new_LLFlexibleObjectData, swig_delete_LLFlexibleObjectData, swig_LLFlexibleObjectData_methods, swig_LLFlexibleObjectData_attributes, swig_LLFlexibleObjectData_bases, swig_LLFlexibleObjectData_base_names };

static int _wrap_new_LLSculptParams(lua_State* L) {
  int SWIG_arg = 0;
  LLSculptParams *result = 0 ;
  
  SWIG_check_num_args("LLSculptParams",0,0)
  result = (LLSculptParams *)new LLSculptParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLSculptParams,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLSculptParams_pack(lua_State* L) {
  int SWIG_arg = 0;
  LLSculptParams *arg1 = (LLSculptParams *) 0 ;
  LLDataPacker *arg2 = 0 ;
  BOOL result;
  
  SWIG_check_num_args("pack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pack",1,"LLSculptParams const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pack",2,"LLDataPacker &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLSculptParams,0))){
    SWIG_fail_ptr("LLSculptParams_pack",1,SWIGTYPE_p_LLSculptParams);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLDataPacker,0))){
    SWIG_fail_ptr("LLSculptParams_pack",2,SWIGTYPE_p_LLDataPacker);
  }
  
  result = ((LLSculptParams const *)arg1)->pack(*arg2);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLSculptParams_unpack(lua_State* L) {
  int SWIG_arg = 0;
  LLSculptParams *arg1 = (LLSculptParams *) 0 ;
  LLDataPacker *arg2 = 0 ;
  BOOL result;
  
  SWIG_check_num_args("unpack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("unpack",1,"LLSculptParams *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("unpack",2,"LLDataPacker &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLSculptParams,0))){
    SWIG_fail_ptr("LLSculptParams_unpack",1,SWIGTYPE_p_LLSculptParams);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLDataPacker,0))){
    SWIG_fail_ptr("LLSculptParams_unpack",2,SWIGTYPE_p_LLDataPacker);
  }
  
  result = (arg1)->unpack(*arg2);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLSculptParams___eq(lua_State* L) {
  int SWIG_arg = 0;
  LLSculptParams *arg1 = (LLSculptParams *) 0 ;
  LLNetworkData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ==",1,"LLSculptParams const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator ==",2,"LLNetworkData const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLSculptParams,0))){
    SWIG_fail_ptr("LLSculptParams___eq",1,SWIGTYPE_p_LLSculptParams);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLNetworkData,0))){
    SWIG_fail_ptr("LLSculptParams___eq",2,SWIGTYPE_p_LLNetworkData);
  }
  
  result = (bool)((LLSculptParams const *)arg1)->operator ==((LLNetworkData const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLSculptParams_copy(lua_State* L) {
  int SWIG_arg = 0;
  LLSculptParams *arg1 = (LLSculptParams *) 0 ;
  LLNetworkData *arg2 = 0 ;
  
  SWIG_check_num_args("copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("copy",1,"LLSculptParams *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("copy",2,"LLNetworkData const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLSculptParams,0))){
    SWIG_fail_ptr("LLSculptParams_copy",1,SWIGTYPE_p_LLSculptParams);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLNetworkData,0))){
    SWIG_fail_ptr("LLSculptParams_copy",2,SWIGTYPE_p_LLNetworkData);
  }
  
  (arg1)->copy((LLNetworkData const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLSculptParams_asLLSD(lua_State* L) {
  int SWIG_arg = 0;
  LLSculptParams *arg1 = (LLSculptParams *) 0 ;
  LLSD result;
  
  SWIG_check_num_args("asLLSD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("asLLSD",1,"LLSculptParams const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLSculptParams,0))){
    SWIG_fail_ptr("LLSculptParams_asLLSD",1,SWIGTYPE_p_LLSculptParams);
  }
  
  result = ((LLSculptParams const *)arg1)->asLLSD();
  {
    LLSD * resultptr = new LLSD((const LLSD &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLSD,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLSculptParams_fromLLSD(lua_State* L) {
  int SWIG_arg = 0;
  LLSculptParams *arg1 = (LLSculptParams *) 0 ;
  LLSD *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("fromLLSD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fromLLSD",1,"LLSculptParams *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("fromLLSD",2,"LLSD &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLSculptParams,0))){
    SWIG_fail_ptr("LLSculptParams_fromLLSD",1,SWIGTYPE_p_LLSculptParams);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLSD,0))){
    SWIG_fail_ptr("LLSculptParams_fromLLSD",2,SWIGTYPE_p_LLSD);
  }
  
  result = (bool)(arg1)->fromLLSD(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLSculptParams_setSculptTexture(lua_State* L) {
  int SWIG_arg = 0;
  LLSculptParams *arg1 = (LLSculptParams *) 0 ;
  LLUUID *arg2 = 0 ;
  
  SWIG_check_num_args("setSculptTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setSculptTexture",1,"LLSculptParams *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setSculptTexture",2,"LLUUID const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLSculptParams,0))){
    SWIG_fail_ptr("LLSculptParams_setSculptTexture",1,SWIGTYPE_p_LLSculptParams);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLUUID,0))){
    SWIG_fail_ptr("LLSculptParams_setSculptTexture",2,SWIGTYPE_p_LLUUID);
  }
  
  (arg1)->setSculptTexture((LLUUID const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLSculptParams_getSculptTexture(lua_State* L) {
  int SWIG_arg = 0;
  LLSculptParams *arg1 = (LLSculptParams *) 0 ;
  LLUUID result;
  
  SWIG_check_num_args("getSculptTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSculptTexture",1,"LLSculptParams *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLSculptParams,0))){
    SWIG_fail_ptr("LLSculptParams_getSculptTexture",1,SWIGTYPE_p_LLSculptParams);
  }
  
  result = (arg1)->getSculptTexture();
  {
    LLUUID * resultptr = new LLUUID((const LLUUID &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLUUID,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLSculptParams_setSculptType(lua_State* L) {
  int SWIG_arg = 0;
  LLSculptParams *arg1 = (LLSculptParams *) 0 ;
  U8 arg2 ;
  U8 *argp2 ;
  
  SWIG_check_num_args("setSculptType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setSculptType",1,"LLSculptParams *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setSculptType",2,"U8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLSculptParams,0))){
    SWIG_fail_ptr("LLSculptParams_setSculptType",1,SWIGTYPE_p_LLSculptParams);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLSculptParams_setSculptType",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  (arg1)->setSculptType(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLSculptParams_getSculptType(lua_State* L) {
  int SWIG_arg = 0;
  LLSculptParams *arg1 = (LLSculptParams *) 0 ;
  U8 result;
  
  SWIG_check_num_args("getSculptType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSculptType",1,"LLSculptParams *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLSculptParams,0))){
    SWIG_fail_ptr("LLSculptParams_getSculptType",1,SWIGTYPE_p_LLSculptParams);
  }
  
  result = (arg1)->getSculptType();
  {
    U8 * resultptr = new U8((const U8 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_U8,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LLSculptParams(void *obj) {
LLSculptParams *arg1 = (LLSculptParams *) obj;
delete arg1;
}
static swig_lua_method swig_LLSculptParams_methods[] = {
    {"pack", _wrap_LLSculptParams_pack}, 
    {"unpack", _wrap_LLSculptParams_unpack}, 
    {"__eq", _wrap_LLSculptParams___eq}, 
    {"copy", _wrap_LLSculptParams_copy}, 
    {"asLLSD", _wrap_LLSculptParams_asLLSD}, 
    {"fromLLSD", _wrap_LLSculptParams_fromLLSD}, 
    {"setSculptTexture", _wrap_LLSculptParams_setSculptTexture}, 
    {"getSculptTexture", _wrap_LLSculptParams_getSculptTexture}, 
    {"setSculptType", _wrap_LLSculptParams_setSculptType}, 
    {"getSculptType", _wrap_LLSculptParams_getSculptType}, 
    {0,0}
};
static swig_lua_attribute swig_LLSculptParams_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_LLSculptParams_bases[] = {0,0};
static const char *swig_LLSculptParams_base_names[] = {"LLNetworkData *",0};
static swig_lua_class _wrap_class_LLSculptParams = { "LLSculptParams", &SWIGTYPE_p_LLSculptParams,_wrap_new_LLSculptParams, swig_delete_LLSculptParams, swig_LLSculptParams_methods, swig_LLSculptParams_attributes, swig_LLSculptParams_bases, swig_LLSculptParams_base_names };

static int _wrap_LLPrimitive_getVolumeManager(lua_State* L) {
  int SWIG_arg = 0;
  LLVolumeMgr *result = 0 ;
  
  SWIG_check_num_args("LLPrimitive::getVolumeManager",0,0)
  result = (LLVolumeMgr *)LLPrimitive::getVolumeManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVolumeMgr,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setVolumeManager(lua_State* L) {
  int SWIG_arg = 0;
  LLVolumeMgr *arg1 = (LLVolumeMgr *) 0 ;
  
  SWIG_check_num_args("LLPrimitive::setVolumeManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLPrimitive::setVolumeManager",1,"LLVolumeMgr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVolumeMgr,0))){
    SWIG_fail_ptr("LLPrimitive_setVolumeManager",1,SWIGTYPE_p_LLVolumeMgr);
  }
  
  LLPrimitive::setVolumeManager(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_cleanupVolumeManager(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("LLPrimitive::cleanupVolumeManager",0,0)
  result = (bool)LLPrimitive::cleanupVolumeManager();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLPrimitive(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *result = 0 ;
  
  SWIG_check_num_args("LLPrimitive",0,0)
  result = (LLPrimitive *)new LLPrimitive();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLPrimitive,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_createPrimitive(lua_State* L) {
  int SWIG_arg = 0;
  LLPCode arg1 ;
  LLPCode *argp1 ;
  LLPrimitive *result = 0 ;
  
  SWIG_check_num_args("LLPrimitive::createPrimitive",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LLPrimitive::createPrimitive",1,"LLPCode");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_LLPCode,0))){
    SWIG_fail_ptr("LLPrimitive_createPrimitive",1,SWIGTYPE_p_LLPCode);
  }
  arg1 = *argp1;
  
  result = (LLPrimitive *)LLPrimitive::createPrimitive(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLPrimitive,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_init_primitive(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  LLPCode arg2 ;
  LLPCode *argp2 ;
  
  SWIG_check_num_args("init_primitive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("init_primitive",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("init_primitive",2,"LLPCode");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_init_primitive",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_LLPCode,0))){
    SWIG_fail_ptr("LLPrimitive_init_primitive",2,SWIGTYPE_p_LLPCode);
  }
  arg2 = *argp2;
  
  (arg1)->init_primitive(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setPCode(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  LLPCode arg2 ;
  LLPCode *argp2 ;
  
  SWIG_check_num_args("setPCode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setPCode",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setPCode",2,"LLPCode const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_setPCode",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_LLPCode,0))){
    SWIG_fail_ptr("LLPrimitive_setPCode",2,SWIGTYPE_p_LLPCode);
  }
  arg2 = *argp2;
  
  (arg1)->setPCode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_getVolumeConst(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  LLVolume *result = 0 ;
  
  SWIG_check_num_args("getVolumeConst",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getVolumeConst",1,"LLPrimitive const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_getVolumeConst",1,SWIGTYPE_p_LLPrimitive);
  }
  
  result = (LLVolume *)((LLPrimitive const *)arg1)->getVolumeConst();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVolume,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_getVolume(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  LLVolume *result = 0 ;
  
  SWIG_check_num_args("getVolume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getVolume",1,"LLPrimitive const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_getVolume",1,SWIGTYPE_p_LLPrimitive);
  }
  
  result = (LLVolume *)((LLPrimitive const *)arg1)->getVolume();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVolume,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setVolume__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  LLVolumeParams *arg2 = 0 ;
  S32 arg3 ;
  bool arg4 ;
  S32 *argp3 ;
  BOOL result;
  
  SWIG_check_num_args("setVolume",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVolume",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setVolume",2,"LLVolumeParams const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setVolume",3,"S32 const");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("setVolume",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_setVolume",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVolumeParams,0))){
    SWIG_fail_ptr("LLPrimitive_setVolume",2,SWIGTYPE_p_LLVolumeParams);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_S32,0))){
    SWIG_fail_ptr("LLPrimitive_setVolume",3,SWIGTYPE_p_S32);
  }
  arg3 = *argp3;
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (arg1)->setVolume((LLVolumeParams const &)*arg2,arg3,arg4);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setVolume__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  LLVolumeParams *arg2 = 0 ;
  S32 arg3 ;
  S32 *argp3 ;
  BOOL result;
  
  SWIG_check_num_args("setVolume",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVolume",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setVolume",2,"LLVolumeParams const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setVolume",3,"S32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_setVolume",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVolumeParams,0))){
    SWIG_fail_ptr("LLPrimitive_setVolume",2,SWIGTYPE_p_LLVolumeParams);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_S32,0))){
    SWIG_fail_ptr("LLPrimitive_setVolume",3,SWIGTYPE_p_S32);
  }
  arg3 = *argp3;
  
  result = (arg1)->setVolume((LLVolumeParams const &)*arg2,arg3);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setVolume(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLPrimitive, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVolumeParams, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_S32, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_LLPrimitive_setVolume__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLPrimitive, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVolumeParams, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_S32, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_LLPrimitive_setVolume__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLPrimitive_setVolume'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setVolume(LLPrimitive *,LLVolumeParams const &,S32 const,bool)\n"
    "    setVolume(LLPrimitive *,LLVolumeParams const &,S32 const)\n");
  lua_error(L);return 0;
}


static int _wrap_LLPrimitive_validTE(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  U8 arg2 ;
  U8 *argp2 ;
  BOOL result;
  
  SWIG_check_num_args("validTE",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("validTE",1,"LLPrimitive const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("validTE",2,"U8 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_validTE",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_validTE",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  result = ((LLPrimitive const *)arg1)->validTE(arg2);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_getTE(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  U8 arg2 ;
  U8 *argp2 ;
  LLTextureEntry *result = 0 ;
  
  SWIG_check_num_args("getTE",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTE",1,"LLPrimitive const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getTE",2,"U8 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_getTE",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_getTE",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  result = (LLTextureEntry *)((LLPrimitive const *)arg1)->getTE(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLTextureEntry,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setNumTEs(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  U8 arg2 ;
  U8 *argp2 ;
  
  SWIG_check_num_args("setNumTEs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setNumTEs",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setNumTEs",2,"U8 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_setNumTEs",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_setNumTEs",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  (arg1)->setNumTEs(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setAllTETextures(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  LLUUID *arg2 = 0 ;
  
  SWIG_check_num_args("setAllTETextures",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAllTETextures",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setAllTETextures",2,"LLUUID const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_setAllTETextures",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLUUID,0))){
    SWIG_fail_ptr("LLPrimitive_setAllTETextures",2,SWIGTYPE_p_LLUUID);
  }
  
  (arg1)->setAllTETextures((LLUUID const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setTE(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  U8 arg2 ;
  LLTextureEntry *arg3 = 0 ;
  U8 *argp2 ;
  
  SWIG_check_num_args("setTE",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTE",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTE",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTE",3,"LLTextureEntry const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_setTE",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_setTE",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLTextureEntry,0))){
    SWIG_fail_ptr("LLPrimitive_setTE",3,SWIGTYPE_p_LLTextureEntry);
  }
  
  (arg1)->setTE(arg2,(LLTextureEntry const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setTEColor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  U8 arg2 ;
  LLColor4 *arg3 = 0 ;
  U8 *argp2 ;
  S32 result;
  
  SWIG_check_num_args("setTEColor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTEColor",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTEColor",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTEColor",3,"LLColor4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_setTEColor",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_setTEColor",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLPrimitive_setTEColor",3,SWIGTYPE_p_LLColor4);
  }
  
  result = (arg1)->setTEColor(arg2,(LLColor4 const &)*arg3);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setTEColor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  U8 arg2 ;
  LLColor3 *arg3 = 0 ;
  U8 *argp2 ;
  S32 result;
  
  SWIG_check_num_args("setTEColor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTEColor",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTEColor",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTEColor",3,"LLColor3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_setTEColor",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_setTEColor",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLColor3,0))){
    SWIG_fail_ptr("LLPrimitive_setTEColor",3,SWIGTYPE_p_LLColor3);
  }
  
  result = (arg1)->setTEColor(arg2,(LLColor3 const &)*arg3);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setTEColor(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLPrimitive, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_U8, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_LLColor4, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_LLPrimitive_setTEColor__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLPrimitive, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_U8, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_LLColor3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_LLPrimitive_setTEColor__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLPrimitive_setTEColor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setTEColor(LLPrimitive *,U8 const,LLColor4 const &)\n"
    "    setTEColor(LLPrimitive *,U8 const,LLColor3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LLPrimitive_setTEAlpha(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  U8 arg2 ;
  F32 arg3 ;
  U8 *argp2 ;
  F32 *argp3 ;
  S32 result;
  
  SWIG_check_num_args("setTEAlpha",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTEAlpha",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTEAlpha",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTEAlpha",3,"F32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_setTEAlpha",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_setTEAlpha",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLPrimitive_setTEAlpha",3,SWIGTYPE_p_F32);
  }
  arg3 = *argp3;
  
  result = (arg1)->setTEAlpha(arg2,arg3);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setTETexture(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  U8 arg2 ;
  LLUUID *arg3 = 0 ;
  U8 *argp2 ;
  S32 result;
  
  SWIG_check_num_args("setTETexture",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTETexture",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTETexture",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTETexture",3,"LLUUID const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_setTETexture",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_setTETexture",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLUUID,0))){
    SWIG_fail_ptr("LLPrimitive_setTETexture",3,SWIGTYPE_p_LLUUID);
  }
  
  result = (arg1)->setTETexture(arg2,(LLUUID const &)*arg3);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setTEScale(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  U8 arg2 ;
  F32 arg3 ;
  F32 arg4 ;
  U8 *argp2 ;
  F32 *argp3 ;
  F32 *argp4 ;
  S32 result;
  
  SWIG_check_num_args("setTEScale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTEScale",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTEScale",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTEScale",3,"F32 const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("setTEScale",4,"F32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_setTEScale",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_setTEScale",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLPrimitive_setTEScale",3,SWIGTYPE_p_F32);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLPrimitive_setTEScale",4,SWIGTYPE_p_F32);
  }
  arg4 = *argp4;
  
  result = (arg1)->setTEScale(arg2,arg3,arg4);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setTEScaleS(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  U8 arg2 ;
  F32 arg3 ;
  U8 *argp2 ;
  F32 *argp3 ;
  S32 result;
  
  SWIG_check_num_args("setTEScaleS",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTEScaleS",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTEScaleS",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTEScaleS",3,"F32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_setTEScaleS",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_setTEScaleS",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLPrimitive_setTEScaleS",3,SWIGTYPE_p_F32);
  }
  arg3 = *argp3;
  
  result = (arg1)->setTEScaleS(arg2,arg3);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setTEScaleT(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  U8 arg2 ;
  F32 arg3 ;
  U8 *argp2 ;
  F32 *argp3 ;
  S32 result;
  
  SWIG_check_num_args("setTEScaleT",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTEScaleT",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTEScaleT",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTEScaleT",3,"F32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_setTEScaleT",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_setTEScaleT",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLPrimitive_setTEScaleT",3,SWIGTYPE_p_F32);
  }
  arg3 = *argp3;
  
  result = (arg1)->setTEScaleT(arg2,arg3);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setTEOffset(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  U8 arg2 ;
  F32 arg3 ;
  F32 arg4 ;
  U8 *argp2 ;
  F32 *argp3 ;
  F32 *argp4 ;
  S32 result;
  
  SWIG_check_num_args("setTEOffset",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTEOffset",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTEOffset",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTEOffset",3,"F32 const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("setTEOffset",4,"F32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_setTEOffset",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_setTEOffset",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLPrimitive_setTEOffset",3,SWIGTYPE_p_F32);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLPrimitive_setTEOffset",4,SWIGTYPE_p_F32);
  }
  arg4 = *argp4;
  
  result = (arg1)->setTEOffset(arg2,arg3,arg4);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setTEOffsetS(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  U8 arg2 ;
  F32 arg3 ;
  U8 *argp2 ;
  F32 *argp3 ;
  S32 result;
  
  SWIG_check_num_args("setTEOffsetS",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTEOffsetS",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTEOffsetS",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTEOffsetS",3,"F32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_setTEOffsetS",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_setTEOffsetS",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLPrimitive_setTEOffsetS",3,SWIGTYPE_p_F32);
  }
  arg3 = *argp3;
  
  result = (arg1)->setTEOffsetS(arg2,arg3);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setTEOffsetT(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  U8 arg2 ;
  F32 arg3 ;
  U8 *argp2 ;
  F32 *argp3 ;
  S32 result;
  
  SWIG_check_num_args("setTEOffsetT",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTEOffsetT",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTEOffsetT",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTEOffsetT",3,"F32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_setTEOffsetT",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_setTEOffsetT",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLPrimitive_setTEOffsetT",3,SWIGTYPE_p_F32);
  }
  arg3 = *argp3;
  
  result = (arg1)->setTEOffsetT(arg2,arg3);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setTERotation(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  U8 arg2 ;
  F32 arg3 ;
  U8 *argp2 ;
  F32 *argp3 ;
  S32 result;
  
  SWIG_check_num_args("setTERotation",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTERotation",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTERotation",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTERotation",3,"F32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_setTERotation",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_setTERotation",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLPrimitive_setTERotation",3,SWIGTYPE_p_F32);
  }
  arg3 = *argp3;
  
  result = (arg1)->setTERotation(arg2,arg3);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setTEBumpShinyFullbright(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  U8 arg2 ;
  U8 arg3 ;
  U8 *argp2 ;
  U8 *argp3 ;
  S32 result;
  
  SWIG_check_num_args("setTEBumpShinyFullbright",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTEBumpShinyFullbright",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTEBumpShinyFullbright",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTEBumpShinyFullbright",3,"U8 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_setTEBumpShinyFullbright",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_setTEBumpShinyFullbright",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_setTEBumpShinyFullbright",3,SWIGTYPE_p_U8);
  }
  arg3 = *argp3;
  
  result = (arg1)->setTEBumpShinyFullbright(arg2,arg3);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setTEBumpShiny(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  U8 arg2 ;
  U8 arg3 ;
  U8 *argp2 ;
  U8 *argp3 ;
  S32 result;
  
  SWIG_check_num_args("setTEBumpShiny",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTEBumpShiny",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTEBumpShiny",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTEBumpShiny",3,"U8 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_setTEBumpShiny",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_setTEBumpShiny",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_setTEBumpShiny",3,SWIGTYPE_p_U8);
  }
  arg3 = *argp3;
  
  result = (arg1)->setTEBumpShiny(arg2,arg3);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setTEMediaTexGen(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  U8 arg2 ;
  U8 arg3 ;
  U8 *argp2 ;
  U8 *argp3 ;
  S32 result;
  
  SWIG_check_num_args("setTEMediaTexGen",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTEMediaTexGen",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTEMediaTexGen",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTEMediaTexGen",3,"U8 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_setTEMediaTexGen",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_setTEMediaTexGen",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_setTEMediaTexGen",3,SWIGTYPE_p_U8);
  }
  arg3 = *argp3;
  
  result = (arg1)->setTEMediaTexGen(arg2,arg3);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setTEBumpmap(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  U8 arg2 ;
  U8 arg3 ;
  U8 *argp2 ;
  U8 *argp3 ;
  S32 result;
  
  SWIG_check_num_args("setTEBumpmap",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTEBumpmap",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTEBumpmap",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTEBumpmap",3,"U8 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_setTEBumpmap",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_setTEBumpmap",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_setTEBumpmap",3,SWIGTYPE_p_U8);
  }
  arg3 = *argp3;
  
  result = (arg1)->setTEBumpmap(arg2,arg3);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setTETexGen(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  U8 arg2 ;
  U8 arg3 ;
  U8 *argp2 ;
  U8 *argp3 ;
  S32 result;
  
  SWIG_check_num_args("setTETexGen",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTETexGen",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTETexGen",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTETexGen",3,"U8 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_setTETexGen",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_setTETexGen",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_setTETexGen",3,SWIGTYPE_p_U8);
  }
  arg3 = *argp3;
  
  result = (arg1)->setTETexGen(arg2,arg3);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setTEShiny(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  U8 arg2 ;
  U8 arg3 ;
  U8 *argp2 ;
  U8 *argp3 ;
  S32 result;
  
  SWIG_check_num_args("setTEShiny",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTEShiny",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTEShiny",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTEShiny",3,"U8 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_setTEShiny",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_setTEShiny",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_setTEShiny",3,SWIGTYPE_p_U8);
  }
  arg3 = *argp3;
  
  result = (arg1)->setTEShiny(arg2,arg3);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setTEFullbright(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  U8 arg2 ;
  U8 arg3 ;
  U8 *argp2 ;
  U8 *argp3 ;
  S32 result;
  
  SWIG_check_num_args("setTEFullbright",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTEFullbright",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTEFullbright",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTEFullbright",3,"U8 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_setTEFullbright",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_setTEFullbright",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_setTEFullbright",3,SWIGTYPE_p_U8);
  }
  arg3 = *argp3;
  
  result = (arg1)->setTEFullbright(arg2,arg3);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setTEMediaFlags(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  U8 arg2 ;
  U8 arg3 ;
  U8 *argp2 ;
  U8 *argp3 ;
  S32 result;
  
  SWIG_check_num_args("setTEMediaFlags",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTEMediaFlags",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTEMediaFlags",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTEMediaFlags",3,"U8 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_setTEMediaFlags",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_setTEMediaFlags",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_setTEMediaFlags",3,SWIGTYPE_p_U8);
  }
  arg3 = *argp3;
  
  result = (arg1)->setTEMediaFlags(arg2,arg3);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setTEGlow(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  U8 arg2 ;
  F32 arg3 ;
  U8 *argp2 ;
  F32 *argp3 ;
  S32 result;
  
  SWIG_check_num_args("setTEGlow",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTEGlow",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTEGlow",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTEGlow",3,"F32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_setTEGlow",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_setTEGlow",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLPrimitive_setTEGlow",3,SWIGTYPE_p_F32);
  }
  arg3 = *argp3;
  
  result = (arg1)->setTEGlow(arg2,arg3);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setMaterial(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  U8 arg2 ;
  U8 *argp2 ;
  BOOL result;
  
  SWIG_check_num_args("setMaterial",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setMaterial",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setMaterial",2,"U8 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_setMaterial",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_setMaterial",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  result = (arg1)->setMaterial(arg2);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setTEArrays(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  U8 arg2 ;
  LLUUID *arg3 = (LLUUID *) 0 ;
  F32 *arg4 = (F32 *) 0 ;
  F32 *arg5 = (F32 *) 0 ;
  U8 *argp2 ;
  
  SWIG_check_num_args("setTEArrays",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTEArrays",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTEArrays",2,"U8 const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("setTEArrays",3,"LLUUID const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("setTEArrays",4,"F32 const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("setTEArrays",5,"F32 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_setTEArrays",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_setTEArrays",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLUUID,0))){
    SWIG_fail_ptr("LLPrimitive_setTEArrays",3,SWIGTYPE_p_LLUUID);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLPrimitive_setTEArrays",4,SWIGTYPE_p_F32);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLPrimitive_setTEArrays",5,SWIGTYPE_p_F32);
  }
  
  (arg1)->setTEArrays(arg2,(LLUUID const *)arg3,(F32 const *)arg4,(F32 const *)arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_copyTEs(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  LLPrimitive *arg2 = (LLPrimitive *) 0 ;
  
  SWIG_check_num_args("copyTEs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("copyTEs",1,"LLPrimitive *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("copyTEs",2,"LLPrimitive const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_copyTEs",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_copyTEs",2,SWIGTYPE_p_LLPrimitive);
  }
  
  (arg1)->copyTEs((LLPrimitive const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_packTEField(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  U8 *arg2 = (U8 *) 0 ;
  U8 *arg3 = (U8 *) 0 ;
  U8 arg4 ;
  U8 arg5 ;
  EMsgVariableType arg6 ;
  U8 *argp4 ;
  U8 *argp5 ;
  EMsgVariableType *argp6 ;
  S32 result;
  
  SWIG_check_num_args("packTEField",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("packTEField",1,"LLPrimitive const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("packTEField",2,"U8 *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("packTEField",3,"U8 *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("packTEField",4,"U8");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("packTEField",5,"U8");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("packTEField",6,"EMsgVariableType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_packTEField",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_packTEField",2,SWIGTYPE_p_U8);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_packTEField",3,SWIGTYPE_p_U8);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_packTEField",4,SWIGTYPE_p_U8);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_packTEField",5,SWIGTYPE_p_U8);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_EMsgVariableType,0))){
    SWIG_fail_ptr("LLPrimitive_packTEField",6,SWIGTYPE_p_EMsgVariableType);
  }
  arg6 = *argp6;
  
  result = ((LLPrimitive const *)arg1)->packTEField(arg2,arg3,arg4,arg5,arg6);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_unpackTEField(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  U8 *arg2 = (U8 *) 0 ;
  U8 *arg3 = (U8 *) 0 ;
  U8 *arg4 = (U8 *) 0 ;
  U8 arg5 ;
  U8 arg6 ;
  EMsgVariableType arg7 ;
  U8 *argp5 ;
  U8 *argp6 ;
  EMsgVariableType *argp7 ;
  S32 result;
  
  SWIG_check_num_args("unpackTEField",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("unpackTEField",1,"LLPrimitive *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("unpackTEField",2,"U8 *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("unpackTEField",3,"U8 *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("unpackTEField",4,"U8 *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("unpackTEField",5,"U8");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("unpackTEField",6,"U8");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("unpackTEField",7,"EMsgVariableType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_unpackTEField",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_unpackTEField",2,SWIGTYPE_p_U8);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_unpackTEField",3,SWIGTYPE_p_U8);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_unpackTEField",4,SWIGTYPE_p_U8);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_unpackTEField",5,SWIGTYPE_p_U8);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_unpackTEField",6,SWIGTYPE_p_U8);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_EMsgVariableType,0))){
    SWIG_fail_ptr("LLPrimitive_unpackTEField",7,SWIGTYPE_p_EMsgVariableType);
  }
  arg7 = *argp7;
  
  result = (arg1)->unpackTEField(arg2,arg3,arg4,arg5,arg6,arg7);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_packTEMessage__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  LLMessageSystem *arg2 = (LLMessageSystem *) 0 ;
  bool arg3 ;
  BOOL result;
  
  SWIG_check_num_args("packTEMessage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("packTEMessage",1,"LLPrimitive const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("packTEMessage",2,"LLMessageSystem *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("packTEMessage",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_packTEMessage",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLMessageSystem,0))){
    SWIG_fail_ptr("LLPrimitive_packTEMessage",2,SWIGTYPE_p_LLMessageSystem);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = ((LLPrimitive const *)arg1)->packTEMessage(arg2,arg3);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_packTEMessage__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  LLMessageSystem *arg2 = (LLMessageSystem *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("packTEMessage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("packTEMessage",1,"LLPrimitive const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("packTEMessage",2,"LLMessageSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_packTEMessage",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLMessageSystem,0))){
    SWIG_fail_ptr("LLPrimitive_packTEMessage",2,SWIGTYPE_p_LLMessageSystem);
  }
  
  result = ((LLPrimitive const *)arg1)->packTEMessage(arg2);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_packTEMessage__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  LLDataPacker *arg2 = 0 ;
  BOOL result;
  
  SWIG_check_num_args("packTEMessage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("packTEMessage",1,"LLPrimitive const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("packTEMessage",2,"LLDataPacker &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_packTEMessage",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLDataPacker,0))){
    SWIG_fail_ptr("LLPrimitive_packTEMessage",2,SWIGTYPE_p_LLDataPacker);
  }
  
  result = ((LLPrimitive const *)arg1)->packTEMessage(*arg2);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_packTEMessage(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLPrimitive, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLMessageSystem, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLPrimitive_packTEMessage__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLPrimitive, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLDataPacker, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLPrimitive_packTEMessage__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLPrimitive, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLMessageSystem, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_LLPrimitive_packTEMessage__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLPrimitive_packTEMessage'\n"
    "  Possible C/C++ prototypes are:\n"
    "    packTEMessage(LLPrimitive const *,LLMessageSystem *,bool)\n"
    "    packTEMessage(LLPrimitive const *,LLMessageSystem *)\n"
    "    packTEMessage(LLPrimitive const *,LLDataPacker &)\n");
  lua_error(L);return 0;
}


static int _wrap_LLPrimitive_unpackTEMessage__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  LLMessageSystem *arg2 = (LLMessageSystem *) 0 ;
  char *arg3 = (char *) 0 ;
  S32 result;
  
  SWIG_check_num_args("unpackTEMessage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("unpackTEMessage",1,"LLPrimitive *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("unpackTEMessage",2,"LLMessageSystem *");
  if(!lua_isstring(L,3)) SWIG_fail_arg("unpackTEMessage",3,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_unpackTEMessage",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLMessageSystem,0))){
    SWIG_fail_ptr("LLPrimitive_unpackTEMessage",2,SWIGTYPE_p_LLMessageSystem);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (arg1)->unpackTEMessage(arg2,arg3);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_unpackTEMessage__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  LLMessageSystem *arg2 = (LLMessageSystem *) 0 ;
  char *arg3 = (char *) 0 ;
  S32 arg4 ;
  S32 *argp4 ;
  S32 result;
  
  SWIG_check_num_args("unpackTEMessage",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("unpackTEMessage",1,"LLPrimitive *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("unpackTEMessage",2,"LLMessageSystem *");
  if(!lua_isstring(L,3)) SWIG_fail_arg("unpackTEMessage",3,"char *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("unpackTEMessage",4,"S32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_unpackTEMessage",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLMessageSystem,0))){
    SWIG_fail_ptr("LLPrimitive_unpackTEMessage",2,SWIGTYPE_p_LLMessageSystem);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_S32,0))){
    SWIG_fail_ptr("LLPrimitive_unpackTEMessage",4,SWIGTYPE_p_S32);
  }
  arg4 = *argp4;
  
  result = (arg1)->unpackTEMessage(arg2,arg3,arg4);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_unpackTEMessage__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  LLDataPacker *arg2 = 0 ;
  BOOL result;
  
  SWIG_check_num_args("unpackTEMessage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("unpackTEMessage",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("unpackTEMessage",2,"LLDataPacker &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_unpackTEMessage",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLDataPacker,0))){
    SWIG_fail_ptr("LLPrimitive_unpackTEMessage",2,SWIGTYPE_p_LLDataPacker);
  }
  
  result = (arg1)->unpackTEMessage(*arg2);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_unpackTEMessage(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLPrimitive, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLDataPacker, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLPrimitive_unpackTEMessage__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLPrimitive, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLMessageSystem, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_LLPrimitive_unpackTEMessage__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLPrimitive, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLMessageSystem, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_S32, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_LLPrimitive_unpackTEMessage__SWIG_1(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLPrimitive_unpackTEMessage'\n"
    "  Possible C/C++ prototypes are:\n"
    "    unpackTEMessage(LLPrimitive *,LLMessageSystem *,char *)\n"
    "    unpackTEMessage(LLPrimitive *,LLMessageSystem *,char *,S32 const)\n"
    "    unpackTEMessage(LLPrimitive *,LLDataPacker &)\n");
  lua_error(L);return 0;
}


static int _wrap_LLPrimitive_setAngularVelocity__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  LLVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("setAngularVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAngularVelocity",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setAngularVelocity",2,"LLVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_setAngularVelocity",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLPrimitive_setAngularVelocity",2,SWIGTYPE_p_LLVector3);
  }
  
  (arg1)->setAngularVelocity((LLVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setAngularVelocity__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  F32 arg2 ;
  F32 arg3 ;
  F32 arg4 ;
  F32 *argp2 ;
  F32 *argp3 ;
  F32 *argp4 ;
  
  SWIG_check_num_args("setAngularVelocity",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAngularVelocity",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setAngularVelocity",2,"F32 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setAngularVelocity",3,"F32 const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("setAngularVelocity",4,"F32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_setAngularVelocity",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLPrimitive_setAngularVelocity",2,SWIGTYPE_p_F32);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLPrimitive_setAngularVelocity",3,SWIGTYPE_p_F32);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLPrimitive_setAngularVelocity",4,SWIGTYPE_p_F32);
  }
  arg4 = *argp4;
  
  (arg1)->setAngularVelocity(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setAngularVelocity(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLPrimitive, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLPrimitive_setAngularVelocity__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLPrimitive, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_F32, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_F32, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_F32, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_LLPrimitive_setAngularVelocity__SWIG_1(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLPrimitive_setAngularVelocity'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setAngularVelocity(LLPrimitive *,LLVector3 const &)\n"
    "    setAngularVelocity(LLPrimitive *,F32 const,F32 const,F32 const)\n");
  lua_error(L);return 0;
}


static int _wrap_LLPrimitive_setVelocity__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  LLVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("setVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVelocity",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setVelocity",2,"LLVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_setVelocity",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLPrimitive_setVelocity",2,SWIGTYPE_p_LLVector3);
  }
  
  (arg1)->setVelocity((LLVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setVelocity__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  F32 arg2 ;
  F32 arg3 ;
  F32 arg4 ;
  F32 *argp2 ;
  F32 *argp3 ;
  F32 *argp4 ;
  
  SWIG_check_num_args("setVelocity",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVelocity",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setVelocity",2,"F32 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setVelocity",3,"F32 const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("setVelocity",4,"F32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_setVelocity",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLPrimitive_setVelocity",2,SWIGTYPE_p_F32);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLPrimitive_setVelocity",3,SWIGTYPE_p_F32);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLPrimitive_setVelocity",4,SWIGTYPE_p_F32);
  }
  arg4 = *argp4;
  
  (arg1)->setVelocity(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setVelocity(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLPrimitive, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLPrimitive_setVelocity__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLPrimitive, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_F32, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_F32, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_F32, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_LLPrimitive_setVelocity__SWIG_1(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLPrimitive_setVelocity'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setVelocity(LLPrimitive *,LLVector3 const &)\n"
    "    setVelocity(LLPrimitive *,F32 const,F32 const,F32 const)\n");
  lua_error(L);return 0;
}


static int _wrap_LLPrimitive_setVelocityX(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  F32 arg2 ;
  F32 *argp2 ;
  
  SWIG_check_num_args("setVelocityX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVelocityX",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setVelocityX",2,"F32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_setVelocityX",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLPrimitive_setVelocityX",2,SWIGTYPE_p_F32);
  }
  arg2 = *argp2;
  
  (arg1)->setVelocityX(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setVelocityY(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  F32 arg2 ;
  F32 *argp2 ;
  
  SWIG_check_num_args("setVelocityY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVelocityY",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setVelocityY",2,"F32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_setVelocityY",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLPrimitive_setVelocityY",2,SWIGTYPE_p_F32);
  }
  arg2 = *argp2;
  
  (arg1)->setVelocityY(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setVelocityZ(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  F32 arg2 ;
  F32 *argp2 ;
  
  SWIG_check_num_args("setVelocityZ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVelocityZ",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setVelocityZ",2,"F32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_setVelocityZ",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLPrimitive_setVelocityZ",2,SWIGTYPE_p_F32);
  }
  arg2 = *argp2;
  
  (arg1)->setVelocityZ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_addVelocity(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  LLVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("addVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addVelocity",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addVelocity",2,"LLVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_addVelocity",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLPrimitive_addVelocity",2,SWIGTYPE_p_LLVector3);
  }
  
  (arg1)->addVelocity((LLVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setAcceleration__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  LLVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("setAcceleration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAcceleration",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setAcceleration",2,"LLVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_setAcceleration",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLPrimitive_setAcceleration",2,SWIGTYPE_p_LLVector3);
  }
  
  (arg1)->setAcceleration((LLVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setAcceleration__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  F32 arg2 ;
  F32 arg3 ;
  F32 arg4 ;
  F32 *argp2 ;
  F32 *argp3 ;
  F32 *argp4 ;
  
  SWIG_check_num_args("setAcceleration",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAcceleration",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setAcceleration",2,"F32 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setAcceleration",3,"F32 const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("setAcceleration",4,"F32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_setAcceleration",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLPrimitive_setAcceleration",2,SWIGTYPE_p_F32);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLPrimitive_setAcceleration",3,SWIGTYPE_p_F32);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLPrimitive_setAcceleration",4,SWIGTYPE_p_F32);
  }
  arg4 = *argp4;
  
  (arg1)->setAcceleration(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setAcceleration(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLPrimitive, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLPrimitive_setAcceleration__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLPrimitive, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_F32, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_F32, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_F32, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_LLPrimitive_setAcceleration__SWIG_1(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLPrimitive_setAcceleration'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setAcceleration(LLPrimitive *,LLVector3 const &)\n"
    "    setAcceleration(LLPrimitive *,F32 const,F32 const,F32 const)\n");
  lua_error(L);return 0;
}


static int _wrap_LLPrimitive_getPCode(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  LLPCode result;
  
  SWIG_check_num_args("getPCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPCode",1,"LLPrimitive const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_getPCode",1,SWIGTYPE_p_LLPrimitive);
  }
  
  result = ((LLPrimitive const *)arg1)->getPCode();
  {
    LLPCode * resultptr = new LLPCode((const LLPCode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLPCode,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_getPCodeString(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  std::string result;
  
  SWIG_check_num_args("getPCodeString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPCodeString",1,"LLPrimitive const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_getPCodeString",1,SWIGTYPE_p_LLPrimitive);
  }
  
  result = ((LLPrimitive const *)arg1)->getPCodeString();
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_getAngularVelocity(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  LLVector3 *result = 0 ;
  
  SWIG_check_num_args("getAngularVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAngularVelocity",1,"LLPrimitive const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_getAngularVelocity",1,SWIGTYPE_p_LLPrimitive);
  }
  
  {
    LLVector3 const &_result_ref = ((LLPrimitive const *)arg1)->getAngularVelocity();
    result = (LLVector3 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_getVelocity(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  LLVector3 *result = 0 ;
  
  SWIG_check_num_args("getVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getVelocity",1,"LLPrimitive const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_getVelocity",1,SWIGTYPE_p_LLPrimitive);
  }
  
  {
    LLVector3 const &_result_ref = ((LLPrimitive const *)arg1)->getVelocity();
    result = (LLVector3 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_getAcceleration(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  LLVector3 *result = 0 ;
  
  SWIG_check_num_args("getAcceleration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAcceleration",1,"LLPrimitive const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_getAcceleration",1,SWIGTYPE_p_LLPrimitive);
  }
  
  {
    LLVector3 const &_result_ref = ((LLPrimitive const *)arg1)->getAcceleration();
    result = (LLVector3 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_getNumTEs(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  U8 result;
  
  SWIG_check_num_args("getNumTEs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumTEs",1,"LLPrimitive const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_getNumTEs",1,SWIGTYPE_p_LLPrimitive);
  }
  
  result = ((LLPrimitive const *)arg1)->getNumTEs();
  {
    U8 * resultptr = new U8((const U8 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_U8,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_getMaterial(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  U8 result;
  
  SWIG_check_num_args("getMaterial",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getMaterial",1,"LLPrimitive const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_getMaterial",1,SWIGTYPE_p_LLPrimitive);
  }
  
  result = ((LLPrimitive const *)arg1)->getMaterial();
  {
    U8 * resultptr = new U8((const U8 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_U8,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setTextureList(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  LLTextureEntry *arg2 = (LLTextureEntry *) 0 ;
  
  SWIG_check_num_args("setTextureList",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTextureList",1,"LLPrimitive *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("setTextureList",2,"LLTextureEntry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_setTextureList",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLTextureEntry,0))){
    SWIG_fail_ptr("LLPrimitive_setTextureList",2,SWIGTYPE_p_LLTextureEntry);
  }
  
  (arg1)->setTextureList(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_isAvatar(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("isAvatar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isAvatar",1,"LLPrimitive const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_isAvatar",1,SWIGTYPE_p_LLPrimitive);
  }
  
  result = ((LLPrimitive const *)arg1)->isAvatar();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_isSittingAvatar(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("isSittingAvatar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isSittingAvatar",1,"LLPrimitive const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_isSittingAvatar",1,SWIGTYPE_p_LLPrimitive);
  }
  
  result = ((LLPrimitive const *)arg1)->isSittingAvatar();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_isSittingAvatarOnGround(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("isSittingAvatarOnGround",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isSittingAvatarOnGround",1,"LLPrimitive const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_isSittingAvatarOnGround",1,SWIGTYPE_p_LLPrimitive);
  }
  
  result = ((LLPrimitive const *)arg1)->isSittingAvatarOnGround();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_setFlags(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  U32 arg2 ;
  U32 *argp2 ;
  
  SWIG_check_num_args("setFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setFlags",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setFlags",2,"U32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_setFlags",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U32,0))){
    SWIG_fail_ptr("LLPrimitive_setFlags",2,SWIGTYPE_p_U32);
  }
  arg2 = *argp2;
  
  (arg1)->setFlags(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_addFlags(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  U32 arg2 ;
  U32 *argp2 ;
  
  SWIG_check_num_args("addFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addFlags",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addFlags",2,"U32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_addFlags",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U32,0))){
    SWIG_fail_ptr("LLPrimitive_addFlags",2,SWIGTYPE_p_U32);
  }
  arg2 = *argp2;
  
  (arg1)->addFlags(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_removeFlags(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  U32 arg2 ;
  U32 *argp2 ;
  
  SWIG_check_num_args("removeFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("removeFlags",1,"LLPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("removeFlags",2,"U32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_removeFlags",1,SWIGTYPE_p_LLPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U32,0))){
    SWIG_fail_ptr("LLPrimitive_removeFlags",2,SWIGTYPE_p_U32);
  }
  arg2 = *argp2;
  
  (arg1)->removeFlags(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_getFlags(lua_State* L) {
  int SWIG_arg = 0;
  LLPrimitive *arg1 = (LLPrimitive *) 0 ;
  U32 result;
  
  SWIG_check_num_args("getFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFlags",1,"LLPrimitive const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLPrimitive,0))){
    SWIG_fail_ptr("LLPrimitive_getFlags",1,SWIGTYPE_p_LLPrimitive);
  }
  
  result = ((LLPrimitive const *)arg1)->getFlags();
  {
    U32 * resultptr = new U32((const U32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_U32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_pCodeToString(lua_State* L) {
  int SWIG_arg = 0;
  LLPCode arg1 ;
  LLPCode *argp1 ;
  std::string result;
  
  SWIG_check_num_args("LLPrimitive::pCodeToString",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LLPrimitive::pCodeToString",1,"LLPCode const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_LLPCode,0))){
    SWIG_fail_ptr("LLPrimitive_pCodeToString",1,SWIGTYPE_p_LLPCode);
  }
  arg1 = *argp1;
  
  result = LLPrimitive::pCodeToString(arg1);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_legacyToPCode(lua_State* L) {
  int SWIG_arg = 0;
  U8 arg1 ;
  U8 *argp1 ;
  LLPCode result;
  
  SWIG_check_num_args("LLPrimitive::legacyToPCode",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LLPrimitive::legacyToPCode",1,"U8 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_legacyToPCode",1,SWIGTYPE_p_U8);
  }
  arg1 = *argp1;
  
  result = LLPrimitive::legacyToPCode(arg1);
  {
    LLPCode * resultptr = new LLPCode((const LLPCode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLPCode,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_pCodeToLegacy(lua_State* L) {
  int SWIG_arg = 0;
  LLPCode arg1 ;
  LLPCode *argp1 ;
  U8 result;
  
  SWIG_check_num_args("LLPrimitive::pCodeToLegacy",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LLPrimitive::pCodeToLegacy",1,"LLPCode const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_LLPCode,0))){
    SWIG_fail_ptr("LLPrimitive_pCodeToLegacy",1,SWIGTYPE_p_LLPCode);
  }
  arg1 = *argp1;
  
  result = LLPrimitive::pCodeToLegacy(arg1);
  {
    U8 * resultptr = new U8((const U8 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_U8,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_getTESTAxes(lua_State* L) {
  int SWIG_arg = 0;
  U8 arg1 ;
  U32 *arg2 = (U32 *) 0 ;
  U32 *arg3 = (U32 *) 0 ;
  U8 *argp1 ;
  bool result;
  
  SWIG_check_num_args("LLPrimitive::getTESTAxes",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LLPrimitive::getTESTAxes",1,"U8 const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LLPrimitive::getTESTAxes",2,"U32 *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("LLPrimitive::getTESTAxes",3,"U32 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLPrimitive_getTESTAxes",1,SWIGTYPE_p_U8);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_U32,0))){
    SWIG_fail_ptr("LLPrimitive_getTESTAxes",2,SWIGTYPE_p_U32);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_U32,0))){
    SWIG_fail_ptr("LLPrimitive_getTESTAxes",3,SWIGTYPE_p_U32);
  }
  
  result = (bool)LLPrimitive::getTESTAxes(arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_isPrimitive(lua_State* L) {
  int SWIG_arg = 0;
  LLPCode arg1 ;
  LLPCode *argp1 ;
  BOOL result;
  
  SWIG_check_num_args("LLPrimitive::isPrimitive",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LLPrimitive::isPrimitive",1,"LLPCode const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_LLPCode,0))){
    SWIG_fail_ptr("LLPrimitive_isPrimitive",1,SWIGTYPE_p_LLPCode);
  }
  arg1 = *argp1;
  
  result = LLPrimitive::isPrimitive(arg1);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLPrimitive_isApp(lua_State* L) {
  int SWIG_arg = 0;
  LLPCode arg1 ;
  LLPCode *argp1 ;
  BOOL result;
  
  SWIG_check_num_args("LLPrimitive::isApp",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LLPrimitive::isApp",1,"LLPCode const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_LLPCode,0))){
    SWIG_fail_ptr("LLPrimitive_isApp",1,SWIGTYPE_p_LLPCode);
  }
  arg1 = *argp1;
  
  result = LLPrimitive::isApp(arg1);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LLPrimitive(void *obj) {
LLPrimitive *arg1 = (LLPrimitive *) obj;
delete arg1;
}
static swig_lua_method swig_LLPrimitive_methods[] = {
    {"init_primitive", _wrap_LLPrimitive_init_primitive}, 
    {"setPCode", _wrap_LLPrimitive_setPCode}, 
    {"getVolumeConst", _wrap_LLPrimitive_getVolumeConst}, 
    {"getVolume", _wrap_LLPrimitive_getVolume}, 
    {"setVolume", _wrap_LLPrimitive_setVolume}, 
    {"validTE", _wrap_LLPrimitive_validTE}, 
    {"getTE", _wrap_LLPrimitive_getTE}, 
    {"setNumTEs", _wrap_LLPrimitive_setNumTEs}, 
    {"setAllTETextures", _wrap_LLPrimitive_setAllTETextures}, 
    {"setTE", _wrap_LLPrimitive_setTE}, 
    {"setTEColor", _wrap_LLPrimitive_setTEColor}, 
    {"setTEAlpha", _wrap_LLPrimitive_setTEAlpha}, 
    {"setTETexture", _wrap_LLPrimitive_setTETexture}, 
    {"setTEScale", _wrap_LLPrimitive_setTEScale}, 
    {"setTEScaleS", _wrap_LLPrimitive_setTEScaleS}, 
    {"setTEScaleT", _wrap_LLPrimitive_setTEScaleT}, 
    {"setTEOffset", _wrap_LLPrimitive_setTEOffset}, 
    {"setTEOffsetS", _wrap_LLPrimitive_setTEOffsetS}, 
    {"setTEOffsetT", _wrap_LLPrimitive_setTEOffsetT}, 
    {"setTERotation", _wrap_LLPrimitive_setTERotation}, 
    {"setTEBumpShinyFullbright", _wrap_LLPrimitive_setTEBumpShinyFullbright}, 
    {"setTEBumpShiny", _wrap_LLPrimitive_setTEBumpShiny}, 
    {"setTEMediaTexGen", _wrap_LLPrimitive_setTEMediaTexGen}, 
    {"setTEBumpmap", _wrap_LLPrimitive_setTEBumpmap}, 
    {"setTETexGen", _wrap_LLPrimitive_setTETexGen}, 
    {"setTEShiny", _wrap_LLPrimitive_setTEShiny}, 
    {"setTEFullbright", _wrap_LLPrimitive_setTEFullbright}, 
    {"setTEMediaFlags", _wrap_LLPrimitive_setTEMediaFlags}, 
    {"setTEGlow", _wrap_LLPrimitive_setTEGlow}, 
    {"setMaterial", _wrap_LLPrimitive_setMaterial}, 
    {"setTEArrays", _wrap_LLPrimitive_setTEArrays}, 
    {"copyTEs", _wrap_LLPrimitive_copyTEs}, 
    {"packTEField", _wrap_LLPrimitive_packTEField}, 
    {"unpackTEField", _wrap_LLPrimitive_unpackTEField}, 
    {"packTEMessage", _wrap_LLPrimitive_packTEMessage}, 
    {"unpackTEMessage", _wrap_LLPrimitive_unpackTEMessage}, 
    {"setAngularVelocity", _wrap_LLPrimitive_setAngularVelocity}, 
    {"setVelocity", _wrap_LLPrimitive_setVelocity}, 
    {"setVelocityX", _wrap_LLPrimitive_setVelocityX}, 
    {"setVelocityY", _wrap_LLPrimitive_setVelocityY}, 
    {"setVelocityZ", _wrap_LLPrimitive_setVelocityZ}, 
    {"addVelocity", _wrap_LLPrimitive_addVelocity}, 
    {"setAcceleration", _wrap_LLPrimitive_setAcceleration}, 
    {"getPCode", _wrap_LLPrimitive_getPCode}, 
    {"getPCodeString", _wrap_LLPrimitive_getPCodeString}, 
    {"getAngularVelocity", _wrap_LLPrimitive_getAngularVelocity}, 
    {"getVelocity", _wrap_LLPrimitive_getVelocity}, 
    {"getAcceleration", _wrap_LLPrimitive_getAcceleration}, 
    {"getNumTEs", _wrap_LLPrimitive_getNumTEs}, 
    {"getMaterial", _wrap_LLPrimitive_getMaterial}, 
    {"setTextureList", _wrap_LLPrimitive_setTextureList}, 
    {"isAvatar", _wrap_LLPrimitive_isAvatar}, 
    {"isSittingAvatar", _wrap_LLPrimitive_isSittingAvatar}, 
    {"isSittingAvatarOnGround", _wrap_LLPrimitive_isSittingAvatarOnGround}, 
    {"setFlags", _wrap_LLPrimitive_setFlags}, 
    {"addFlags", _wrap_LLPrimitive_addFlags}, 
    {"removeFlags", _wrap_LLPrimitive_removeFlags}, 
    {"getFlags", _wrap_LLPrimitive_getFlags}, 
    {0,0}
};
static swig_lua_attribute swig_LLPrimitive_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_LLPrimitive_bases[] = {0,0};
static const char *swig_LLPrimitive_base_names[] = {"LLXform *",0};
static swig_lua_class _wrap_class_LLPrimitive = { "LLPrimitive", &SWIGTYPE_p_LLPrimitive,_wrap_new_LLPrimitive, swig_delete_LLPrimitive, swig_LLPrimitive_methods, swig_LLPrimitive_attributes, swig_LLPrimitive_bases, swig_LLPrimitive_base_names };

static int _wrap_LLVOJointInfo_mJointType_set(lua_State* L) {
  int SWIG_arg = 0;
  LLVOJointInfo *arg1 = (LLVOJointInfo *) 0 ;
  EHavokJointType arg2 ;
  EHavokJointType *argp2 ;
  
  SWIG_check_num_args("mJointType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mJointType",1,"LLVOJointInfo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mJointType",2,"EHavokJointType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVOJointInfo,0))){
    SWIG_fail_ptr("LLVOJointInfo_mJointType_set",1,SWIGTYPE_p_LLVOJointInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_EHavokJointType,0))){
    SWIG_fail_ptr("LLVOJointInfo_mJointType_set",2,SWIGTYPE_p_EHavokJointType);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->mJointType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVOJointInfo_mJointType_get(lua_State* L) {
  int SWIG_arg = 0;
  LLVOJointInfo *arg1 = (LLVOJointInfo *) 0 ;
  EHavokJointType result;
  
  SWIG_check_num_args("mJointType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mJointType",1,"LLVOJointInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVOJointInfo,0))){
    SWIG_fail_ptr("LLVOJointInfo_mJointType_get",1,SWIGTYPE_p_LLVOJointInfo);
  }
  
  result =  ((arg1)->mJointType);
  {
    EHavokJointType * resultptr = new EHavokJointType((const EHavokJointType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_EHavokJointType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVOJointInfo_mPivot_set(lua_State* L) {
  int SWIG_arg = 0;
  LLVOJointInfo *arg1 = (LLVOJointInfo *) 0 ;
  LLVector3 arg2 ;
  LLVector3 *argp2 ;
  
  SWIG_check_num_args("mPivot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mPivot",1,"LLVOJointInfo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mPivot",2,"LLVector3");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVOJointInfo,0))){
    SWIG_fail_ptr("LLVOJointInfo_mPivot_set",1,SWIGTYPE_p_LLVOJointInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVOJointInfo_mPivot_set",2,SWIGTYPE_p_LLVector3);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->mPivot = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVOJointInfo_mPivot_get(lua_State* L) {
  int SWIG_arg = 0;
  LLVOJointInfo *arg1 = (LLVOJointInfo *) 0 ;
  LLVector3 result;
  
  SWIG_check_num_args("mPivot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mPivot",1,"LLVOJointInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVOJointInfo,0))){
    SWIG_fail_ptr("LLVOJointInfo_mPivot_get",1,SWIGTYPE_p_LLVOJointInfo);
  }
  
  result =  ((arg1)->mPivot);
  {
    LLVector3 * resultptr = new LLVector3((const LLVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVOJointInfo_mAxisOrAnchor_set(lua_State* L) {
  int SWIG_arg = 0;
  LLVOJointInfo *arg1 = (LLVOJointInfo *) 0 ;
  LLVector3 arg2 ;
  LLVector3 *argp2 ;
  
  SWIG_check_num_args("mAxisOrAnchor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mAxisOrAnchor",1,"LLVOJointInfo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mAxisOrAnchor",2,"LLVector3");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVOJointInfo,0))){
    SWIG_fail_ptr("LLVOJointInfo_mAxisOrAnchor_set",1,SWIGTYPE_p_LLVOJointInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLVOJointInfo_mAxisOrAnchor_set",2,SWIGTYPE_p_LLVector3);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->mAxisOrAnchor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLVOJointInfo_mAxisOrAnchor_get(lua_State* L) {
  int SWIG_arg = 0;
  LLVOJointInfo *arg1 = (LLVOJointInfo *) 0 ;
  LLVector3 result;
  
  SWIG_check_num_args("mAxisOrAnchor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mAxisOrAnchor",1,"LLVOJointInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLVOJointInfo,0))){
    SWIG_fail_ptr("LLVOJointInfo_mAxisOrAnchor_get",1,SWIGTYPE_p_LLVOJointInfo);
  }
  
  result =  ((arg1)->mAxisOrAnchor);
  {
    LLVector3 * resultptr = new LLVector3((const LLVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLVOJointInfo(lua_State* L) {
  int SWIG_arg = 0;
  LLVOJointInfo *result = 0 ;
  
  SWIG_check_num_args("LLVOJointInfo::LLVOJointInfo",0,0)
  result = (LLVOJointInfo *)new LLVOJointInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVOJointInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LLVOJointInfo(void *obj) {
LLVOJointInfo *arg1 = (LLVOJointInfo *) obj;
delete arg1;
}
static swig_lua_method swig_LLVOJointInfo_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_LLVOJointInfo_attributes[] = {
    { "mJointType", _wrap_LLVOJointInfo_mJointType_get, _wrap_LLVOJointInfo_mJointType_set},
    { "mPivot", _wrap_LLVOJointInfo_mPivot_get, _wrap_LLVOJointInfo_mPivot_set},
    { "mAxisOrAnchor", _wrap_LLVOJointInfo_mAxisOrAnchor_get, _wrap_LLVOJointInfo_mAxisOrAnchor_set},
    {0,0,0}
};
static swig_lua_class *swig_LLVOJointInfo_bases[] = {0};
static const char *swig_LLVOJointInfo_base_names[] = {0};
static swig_lua_class _wrap_class_LLVOJointInfo = { "LLVOJointInfo", &SWIGTYPE_p_LLVOJointInfo,_wrap_new_LLVOJointInfo, swig_delete_LLVOJointInfo, swig_LLVOJointInfo_methods, swig_LLVOJointInfo_attributes, swig_LLVOJointInfo_bases, swig_LLVOJointInfo_base_names };

static int _wrap_new_LLMaterialExportInfo(lua_State* L) {
  int SWIG_arg = 0;
  S32 arg1 ;
  S32 arg2 ;
  LLColor4 arg3 ;
  S32 *argp1 ;
  S32 *argp2 ;
  LLColor4 *argp3 ;
  LLMaterialExportInfo *result = 0 ;
  
  SWIG_check_num_args("LLMaterialExportInfo",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LLMaterialExportInfo",1,"S32");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LLMaterialExportInfo",2,"S32");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("LLMaterialExportInfo",3,"LLColor4");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_S32,0))){
    SWIG_fail_ptr("new_LLMaterialExportInfo",1,SWIGTYPE_p_S32);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_S32,0))){
    SWIG_fail_ptr("new_LLMaterialExportInfo",2,SWIGTYPE_p_S32);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("new_LLMaterialExportInfo",3,SWIGTYPE_p_LLColor4);
  }
  arg3 = *argp3;
  
  result = (LLMaterialExportInfo *)new LLMaterialExportInfo(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLMaterialExportInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLMaterialExportInfo_mMaterialIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  LLMaterialExportInfo *arg1 = (LLMaterialExportInfo *) 0 ;
  S32 arg2 ;
  S32 *argp2 ;
  
  SWIG_check_num_args("mMaterialIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mMaterialIndex",1,"LLMaterialExportInfo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mMaterialIndex",2,"S32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLMaterialExportInfo,0))){
    SWIG_fail_ptr("LLMaterialExportInfo_mMaterialIndex_set",1,SWIGTYPE_p_LLMaterialExportInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_S32,0))){
    SWIG_fail_ptr("LLMaterialExportInfo_mMaterialIndex_set",2,SWIGTYPE_p_S32);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->mMaterialIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLMaterialExportInfo_mMaterialIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  LLMaterialExportInfo *arg1 = (LLMaterialExportInfo *) 0 ;
  S32 result;
  
  SWIG_check_num_args("mMaterialIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mMaterialIndex",1,"LLMaterialExportInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLMaterialExportInfo,0))){
    SWIG_fail_ptr("LLMaterialExportInfo_mMaterialIndex_get",1,SWIGTYPE_p_LLMaterialExportInfo);
  }
  
  result =  ((arg1)->mMaterialIndex);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLMaterialExportInfo_mTextureIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  LLMaterialExportInfo *arg1 = (LLMaterialExportInfo *) 0 ;
  S32 arg2 ;
  S32 *argp2 ;
  
  SWIG_check_num_args("mTextureIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mTextureIndex",1,"LLMaterialExportInfo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mTextureIndex",2,"S32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLMaterialExportInfo,0))){
    SWIG_fail_ptr("LLMaterialExportInfo_mTextureIndex_set",1,SWIGTYPE_p_LLMaterialExportInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_S32,0))){
    SWIG_fail_ptr("LLMaterialExportInfo_mTextureIndex_set",2,SWIGTYPE_p_S32);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->mTextureIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLMaterialExportInfo_mTextureIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  LLMaterialExportInfo *arg1 = (LLMaterialExportInfo *) 0 ;
  S32 result;
  
  SWIG_check_num_args("mTextureIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mTextureIndex",1,"LLMaterialExportInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLMaterialExportInfo,0))){
    SWIG_fail_ptr("LLMaterialExportInfo_mTextureIndex_get",1,SWIGTYPE_p_LLMaterialExportInfo);
  }
  
  result =  ((arg1)->mTextureIndex);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLMaterialExportInfo_mColor_set(lua_State* L) {
  int SWIG_arg = 0;
  LLMaterialExportInfo *arg1 = (LLMaterialExportInfo *) 0 ;
  LLColor4 *arg2 = (LLColor4 *) 0 ;
  
  SWIG_check_num_args("mColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mColor",1,"LLMaterialExportInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mColor",2,"LLColor4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLMaterialExportInfo,0))){
    SWIG_fail_ptr("LLMaterialExportInfo_mColor_set",1,SWIGTYPE_p_LLMaterialExportInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLMaterialExportInfo_mColor_set",2,SWIGTYPE_p_LLColor4);
  }
  
  if (arg1) (arg1)->mColor = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLMaterialExportInfo_mColor_get(lua_State* L) {
  int SWIG_arg = 0;
  LLMaterialExportInfo *arg1 = (LLMaterialExportInfo *) 0 ;
  LLColor4 *result = 0 ;
  
  SWIG_check_num_args("mColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mColor",1,"LLMaterialExportInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLMaterialExportInfo,0))){
    SWIG_fail_ptr("LLMaterialExportInfo_mColor_get",1,SWIGTYPE_p_LLMaterialExportInfo);
  }
  
  result = (LLColor4 *)& ((arg1)->mColor);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLColor4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LLMaterialExportInfo(void *obj) {
LLMaterialExportInfo *arg1 = (LLMaterialExportInfo *) obj;
delete arg1;
}
static swig_lua_method swig_LLMaterialExportInfo_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_LLMaterialExportInfo_attributes[] = {
    { "mMaterialIndex", _wrap_LLMaterialExportInfo_mMaterialIndex_get, _wrap_LLMaterialExportInfo_mMaterialIndex_set},
    { "mTextureIndex", _wrap_LLMaterialExportInfo_mTextureIndex_get, _wrap_LLMaterialExportInfo_mTextureIndex_set},
    { "mColor", _wrap_LLMaterialExportInfo_mColor_get, _wrap_LLMaterialExportInfo_mColor_set},
    {0,0,0}
};
static swig_lua_class *swig_LLMaterialExportInfo_bases[] = {0};
static const char *swig_LLMaterialExportInfo_base_names[] = {0};
static swig_lua_class _wrap_class_LLMaterialExportInfo = { "LLMaterialExportInfo", &SWIGTYPE_p_LLMaterialExportInfo,_wrap_new_LLMaterialExportInfo, swig_delete_LLMaterialExportInfo, swig_LLMaterialExportInfo_methods, swig_LLMaterialExportInfo_attributes, swig_LLMaterialExportInfo_bases, swig_LLMaterialExportInfo_base_names };

static int _wrap_new_LLViewerObject__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLUUID *arg1 = 0 ;
  LLPCode arg2 ;
  LLViewerRegion *arg3 = (LLViewerRegion *) 0 ;
  BOOL arg4 ;
  LLPCode *argp2 ;
  BOOL *argp4 ;
  LLViewerObject *result = 0 ;
  
  SWIG_check_num_args("LLViewerObject",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LLViewerObject",1,"LLUUID const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LLViewerObject",2,"LLPCode const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("LLViewerObject",3,"LLViewerRegion *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("LLViewerObject",4,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLUUID,0))){
    SWIG_fail_ptr("new_LLViewerObject",1,SWIGTYPE_p_LLUUID);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_LLPCode,0))){
    SWIG_fail_ptr("new_LLViewerObject",2,SWIGTYPE_p_LLPCode);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLViewerRegion,0))){
    SWIG_fail_ptr("new_LLViewerObject",3,SWIGTYPE_p_LLViewerRegion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("new_LLViewerObject",4,SWIGTYPE_p_BOOL);
  }
  arg4 = *argp4;
  
  result = (LLViewerObject *)new LLViewerObject((LLUUID const &)*arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLViewerObject,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLViewerObject__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLUUID *arg1 = 0 ;
  LLPCode arg2 ;
  LLViewerRegion *arg3 = (LLViewerRegion *) 0 ;
  LLPCode *argp2 ;
  LLViewerObject *result = 0 ;
  
  SWIG_check_num_args("LLViewerObject",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LLViewerObject",1,"LLUUID const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LLViewerObject",2,"LLPCode const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("LLViewerObject",3,"LLViewerRegion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLUUID,0))){
    SWIG_fail_ptr("new_LLViewerObject",1,SWIGTYPE_p_LLUUID);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_LLPCode,0))){
    SWIG_fail_ptr("new_LLViewerObject",2,SWIGTYPE_p_LLPCode);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLViewerRegion,0))){
    SWIG_fail_ptr("new_LLViewerObject",3,SWIGTYPE_p_LLViewerRegion);
  }
  
  result = (LLViewerObject *)new LLViewerObject((LLUUID const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLViewerObject,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLViewerObject(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLUUID, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLPCode, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_LLViewerRegion, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_LLViewerObject__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLUUID, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLPCode, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_LLViewerRegion, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_BOOL, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_LLViewerObject__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_LLViewerObject'\n"
    "  Possible C/C++ prototypes are:\n"
    "    LLViewerObject(LLUUID const &,LLPCode const,LLViewerRegion *,BOOL)\n"
    "    LLViewerObject(LLUUID const &,LLPCode const,LLViewerRegion *)\n");
  lua_error(L);return 0;
}


static int _wrap_LLViewerObject_markDead(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  
  SWIG_check_num_args("markDead",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("markDead",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_markDead",1,SWIGTYPE_p_LLViewerObject);
  }
  
  (arg1)->markDead();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_isDead(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("isDead",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isDead",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_isDead",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->isDead();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_isOrphaned(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("isOrphaned",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isOrphaned",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_isOrphaned",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->isOrphaned();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_isParticleSource(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("isParticleSource",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isParticleSource",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_isParticleSource",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->isParticleSource();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_initVOClasses(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("LLViewerObject::initVOClasses",0,0)
  LLViewerObject::initVOClasses();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_cleanupVOClasses(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("LLViewerObject::cleanupVOClasses",0,0)
  LLViewerObject::cleanupVOClasses();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_addNVPair(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  std::string *arg2 = 0 ;
  
  SWIG_check_num_args("addNVPair",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addNVPair",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addNVPair",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_addNVPair",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("LLViewerObject_addNVPair",2,SWIGTYPE_p_std__string);
  }
  
  (arg1)->addNVPair((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_removeNVPair(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  std::string *arg2 = 0 ;
  BOOL result;
  
  SWIG_check_num_args("removeNVPair",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("removeNVPair",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("removeNVPair",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_removeNVPair",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("LLViewerObject_removeNVPair",2,SWIGTYPE_p_std__string);
  }
  
  result = (arg1)->removeNVPair((std::string const &)*arg2);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getNVPair(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  std::string *arg2 = 0 ;
  LLNameValue *result = 0 ;
  
  SWIG_check_num_args("getNVPair",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNVPair",1,"LLViewerObject const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getNVPair",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getNVPair",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("LLViewerObject_getNVPair",2,SWIGTYPE_p_std__string);
  }
  
  result = (LLNameValue *)((LLViewerObject const *)arg1)->getNVPair((std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLNameValue,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_idleUpdate(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLAgent *arg2 = 0 ;
  LLWorld *arg3 = 0 ;
  F64 *arg4 = 0 ;
  BOOL result;
  
  SWIG_check_num_args("idleUpdate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("idleUpdate",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("idleUpdate",2,"LLAgent &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("idleUpdate",3,"LLWorld &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("idleUpdate",4,"F64 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_idleUpdate",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLAgent,0))){
    SWIG_fail_ptr("LLViewerObject_idleUpdate",2,SWIGTYPE_p_LLAgent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLWorld,0))){
    SWIG_fail_ptr("LLViewerObject_idleUpdate",3,SWIGTYPE_p_LLWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_F64,0))){
    SWIG_fail_ptr("LLViewerObject_idleUpdate",4,SWIGTYPE_p_F64);
  }
  
  result = (arg1)->idleUpdate(*arg2,*arg3,(F64 const &)*arg4);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_processUpdateMessage(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLMessageSystem *arg2 = (LLMessageSystem *) 0 ;
  void **arg3 = (void **) 0 ;
  U32 arg4 ;
  EObjectUpdateType arg5 ;
  LLDataPacker *arg6 = (LLDataPacker *) 0 ;
  U32 *argp4 ;
  U32 result;
  
  SWIG_check_num_args("processUpdateMessage",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("processUpdateMessage",1,"LLViewerObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("processUpdateMessage",2,"LLMessageSystem *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("processUpdateMessage",3,"void **");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("processUpdateMessage",4,"U32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("processUpdateMessage",5,"EObjectUpdateType const");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("processUpdateMessage",6,"LLDataPacker *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_processUpdateMessage",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLMessageSystem,0))){
    SWIG_fail_ptr("LLViewerObject_processUpdateMessage",2,SWIGTYPE_p_LLMessageSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_void,0))){
    SWIG_fail_ptr("LLViewerObject_processUpdateMessage",3,SWIGTYPE_p_p_void);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_U32,0))){
    SWIG_fail_ptr("LLViewerObject_processUpdateMessage",4,SWIGTYPE_p_U32);
  }
  arg4 = *argp4;
  
  arg5 = (EObjectUpdateType const)(int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_LLDataPacker,0))){
    SWIG_fail_ptr("LLViewerObject_processUpdateMessage",6,SWIGTYPE_p_LLDataPacker);
  }
  
  result = (arg1)->processUpdateMessage(arg2,arg3,arg4,arg5,arg6);
  {
    U32 * resultptr = new U32((const U32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_U32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_isActive(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("isActive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isActive",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_isActive",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->isActive();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_onActiveList(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("onActiveList",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("onActiveList",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_onActiveList",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->onActiveList();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setOnActiveList(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL arg2 ;
  BOOL *argp2 ;
  
  SWIG_check_num_args("setOnActiveList",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setOnActiveList",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setOnActiveList",2,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setOnActiveList",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("LLViewerObject_setOnActiveList",2,SWIGTYPE_p_BOOL);
  }
  arg2 = *argp2;
  
  (arg1)->setOnActiveList(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_isAttachment(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("isAttachment",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isAttachment",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_isAttachment",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->isAttachment();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_isHUDAttachment(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("isHUDAttachment",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isHUDAttachment",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_isHUDAttachment",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->isHUDAttachment();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_updateRadius(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  
  SWIG_check_num_args("updateRadius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateRadius",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_updateRadius",1,SWIGTYPE_p_LLViewerObject);
  }
  
  (arg1)->updateRadius();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getVObjRadius(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  F32 result;
  
  SWIG_check_num_args("getVObjRadius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getVObjRadius",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getVObjRadius",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->getVObjRadius();
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_isJointChild(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("isJointChild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isJointChild",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_isJointChild",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->isJointChild();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getJointType(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  EHavokJointType result;
  
  SWIG_check_num_args("getJointType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getJointType",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getJointType",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->getJointType();
  {
    EHavokJointType * resultptr = new EHavokJointType((const EHavokJointType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_EHavokJointType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getSubParent__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLViewerObject *result = 0 ;
  
  SWIG_check_num_args("getSubParent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSubParent",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getSubParent",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = (LLViewerObject *)(arg1)->getSubParent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLViewerObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getSubParent__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLViewerObject *result = 0 ;
  
  SWIG_check_num_args("getSubParent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSubParent",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getSubParent",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = (LLViewerObject *)((LLViewerObject const *)arg1)->getSubParent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLViewerObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getSubParent(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_LLViewerObject_getSubParent__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_LLViewerObject_getSubParent__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLViewerObject_getSubParent'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getSubParent(LLViewerObject *)\n"
    "    getSubParent(LLViewerObject const *)\n");
  lua_error(L);return 0;
}


static int _wrap_LLViewerObject_setPixelAreaAndAngle(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLAgent *arg2 = 0 ;
  
  SWIG_check_num_args("setPixelAreaAndAngle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setPixelAreaAndAngle",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setPixelAreaAndAngle",2,"LLAgent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setPixelAreaAndAngle",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLAgent,0))){
    SWIG_fail_ptr("LLViewerObject_setPixelAreaAndAngle",2,SWIGTYPE_p_LLAgent);
  }
  
  (arg1)->setPixelAreaAndAngle(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getNumVertices(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U32 result;
  
  SWIG_check_num_args("getNumVertices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumVertices",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getNumVertices",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->getNumVertices();
  {
    U32 * resultptr = new U32((const U32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_U32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getNumIndices(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U32 result;
  
  SWIG_check_num_args("getNumIndices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumIndices",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getNumIndices",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->getNumIndices();
  {
    U32 * resultptr = new U32((const U32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_U32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getNumFaces(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  S32 result;
  
  SWIG_check_num_args("getNumFaces",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumFaces",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getNumFaces",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->getNumFaces();
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_updateTextures(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLAgent *arg2 = 0 ;
  
  SWIG_check_num_args("updateTextures",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateTextures",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("updateTextures",2,"LLAgent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_updateTextures",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLAgent,0))){
    SWIG_fail_ptr("LLViewerObject_updateTextures",2,SWIGTYPE_p_LLAgent);
  }
  
  (arg1)->updateTextures(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_boostTexturePriority__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL arg2 ;
  BOOL *argp2 ;
  
  SWIG_check_num_args("boostTexturePriority",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("boostTexturePriority",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("boostTexturePriority",2,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_boostTexturePriority",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("LLViewerObject_boostTexturePriority",2,SWIGTYPE_p_BOOL);
  }
  arg2 = *argp2;
  
  (arg1)->boostTexturePriority(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_boostTexturePriority__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  
  SWIG_check_num_args("boostTexturePriority",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("boostTexturePriority",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_boostTexturePriority",1,SWIGTYPE_p_LLViewerObject);
  }
  
  (arg1)->boostTexturePriority();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_boostTexturePriority(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_LLViewerObject_boostTexturePriority__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_BOOL, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLViewerObject_boostTexturePriority__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLViewerObject_boostTexturePriority'\n"
    "  Possible C/C++ prototypes are:\n"
    "    boostTexturePriority(LLViewerObject *,BOOL)\n"
    "    boostTexturePriority(LLViewerObject *)\n");
  lua_error(L);return 0;
}


static int _wrap_LLViewerObject_createDrawable(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLPipeline *arg2 = (LLPipeline *) 0 ;
  LLDrawable *result = 0 ;
  
  SWIG_check_num_args("createDrawable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("createDrawable",1,"LLViewerObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("createDrawable",2,"LLPipeline *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_createDrawable",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLPipeline,0))){
    SWIG_fail_ptr("LLViewerObject_createDrawable",2,SWIGTYPE_p_LLPipeline);
  }
  
  result = (LLDrawable *)(arg1)->createDrawable(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLDrawable,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_updateGeometry(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLDrawable *arg2 = (LLDrawable *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("updateGeometry",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateGeometry",1,"LLViewerObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("updateGeometry",2,"LLDrawable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_updateGeometry",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLDrawable,0))){
    SWIG_fail_ptr("LLViewerObject_updateGeometry",2,SWIGTYPE_p_LLDrawable);
  }
  
  result = (arg1)->updateGeometry(arg2);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_updateFaceSize(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  S32 arg2 ;
  S32 *argp2 ;
  
  SWIG_check_num_args("updateFaceSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateFaceSize",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("updateFaceSize",2,"S32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_updateFaceSize",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_S32,0))){
    SWIG_fail_ptr("LLViewerObject_updateFaceSize",2,SWIGTYPE_p_S32);
  }
  arg2 = *argp2;
  
  (arg1)->updateFaceSize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_updateLOD(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("updateLOD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateLOD",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_updateLOD",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = (arg1)->updateLOD();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setDrawableParent(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLDrawable *arg2 = (LLDrawable *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("setDrawableParent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setDrawableParent",1,"LLViewerObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("setDrawableParent",2,"LLDrawable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setDrawableParent",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLDrawable,0))){
    SWIG_fail_ptr("LLViewerObject_setDrawableParent",2,SWIGTYPE_p_LLDrawable);
  }
  
  result = (arg1)->setDrawableParent(arg2);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getRotTime(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  F32 result;
  
  SWIG_check_num_args("getRotTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRotTime",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getRotTime",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = (arg1)->getRotTime();
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_resetRot(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  
  SWIG_check_num_args("resetRot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("resetRot",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_resetRot",1,SWIGTYPE_p_LLViewerObject);
  }
  
  (arg1)->resetRot();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_applyAngularVelocity(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  F32 arg2 ;
  F32 *argp2 ;
  
  SWIG_check_num_args("applyAngularVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("applyAngularVelocity",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("applyAngularVelocity",2,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_applyAngularVelocity",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLViewerObject_applyAngularVelocity",2,SWIGTYPE_p_F32);
  }
  arg2 = *argp2;
  
  (arg1)->applyAngularVelocity(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setLineWidthForWindowSize(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  S32 arg2 ;
  S32 *argp2 ;
  
  SWIG_check_num_args("setLineWidthForWindowSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setLineWidthForWindowSize",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setLineWidthForWindowSize",2,"S32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setLineWidthForWindowSize",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_S32,0))){
    SWIG_fail_ptr("LLViewerObject_setLineWidthForWindowSize",2,SWIGTYPE_p_S32);
  }
  arg2 = *argp2;
  
  (arg1)->setLineWidthForWindowSize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_increaseArrowLength(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("LLViewerObject::increaseArrowLength",0,0)
  LLViewerObject::increaseArrowLength();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_decreaseArrowLength(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("LLViewerObject::decreaseArrowLength",0,0)
  LLViewerObject::decreaseArrowLength();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getRegion(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLViewerRegion *result = 0 ;
  
  SWIG_check_num_args("getRegion",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRegion",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getRegion",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = (LLViewerRegion *)((LLViewerObject const *)arg1)->getRegion();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLViewerRegion,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_isSelected(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("isSelected",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isSelected",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_isSelected",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->isSelected();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setSelected(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL arg2 ;
  BOOL *argp2 ;
  
  SWIG_check_num_args("setSelected",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setSelected",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setSelected",2,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setSelected",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("LLViewerObject_setSelected",2,SWIGTYPE_p_BOOL);
  }
  arg2 = *argp2;
  
  (arg1)->setSelected(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getID(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLUUID *result = 0 ;
  
  SWIG_check_num_args("getID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getID",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getID",1,SWIGTYPE_p_LLViewerObject);
  }
  
  {
    LLUUID const &_result_ref = ((LLViewerObject const *)arg1)->getID();
    result = (LLUUID *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLUUID,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getLocalID(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U32 result;
  
  SWIG_check_num_args("getLocalID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getLocalID",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getLocalID",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->getLocalID();
  {
    U32 * resultptr = new U32((const U32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_U32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getCRC(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U32 result;
  
  SWIG_check_num_args("getCRC",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getCRC",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getCRC",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->getCRC();
  {
    U32 * resultptr = new U32((const U32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_U32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_isFlexible(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("isFlexible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isFlexible",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_isFlexible",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->isFlexible();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_isSculpted(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("isSculpted",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isSculpted",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_isSculpted",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->isSculpted();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_isOverAgentOwnedLand(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("isOverAgentOwnedLand",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isOverAgentOwnedLand",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_isOverAgentOwnedLand",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->isOverAgentOwnedLand();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_isOverGroupOwnedLand(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("isOverGroupOwnedLand",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isOverGroupOwnedLand",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_isOverGroupOwnedLand",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->isOverGroupOwnedLand();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setParent(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLViewerObject *arg2 = (LLViewerObject *) 0 ;
  
  SWIG_check_num_args("setParent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setParent",1,"LLViewerObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("setParent",2,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setParent",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setParent",2,SWIGTYPE_p_LLViewerObject);
  }
  
  (arg1)->setParent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_addChild(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLViewerObject *arg2 = (LLViewerObject *) 0 ;
  
  SWIG_check_num_args("addChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addChild",1,"LLViewerObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("addChild",2,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_addChild",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_addChild",2,SWIGTYPE_p_LLViewerObject);
  }
  
  (arg1)->addChild(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_removeChild(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLViewerObject *arg2 = (LLViewerObject *) 0 ;
  
  SWIG_check_num_args("removeChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("removeChild",1,"LLViewerObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("removeChild",2,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_removeChild",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_removeChild",2,SWIGTYPE_p_LLViewerObject);
  }
  
  (arg1)->removeChild(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getChildren(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLViewerObject::const_child_list_t *result = 0 ;
  
  SWIG_check_num_args("getChildren",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getChildren",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getChildren",1,SWIGTYPE_p_LLViewerObject);
  }
  
  {
    LLViewerObject::const_child_list_t &_result_ref = ((LLViewerObject const *)arg1)->getChildren();
    result = (LLViewerObject::const_child_list_t *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__listT_LLPointerT_LLViewerObject_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_numChildren(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  S32 result;
  
  SWIG_check_num_args("numChildren",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("numChildren",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_numChildren",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->numChildren();
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_addThisAndAllChildren(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLDynamicArray< LLViewerObject * > *arg2 = 0 ;
  
  SWIG_check_num_args("addThisAndAllChildren",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addThisAndAllChildren",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addThisAndAllChildren",2,"LLDynamicArray< LLViewerObject * > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_addThisAndAllChildren",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLDynamicArrayT_LLViewerObject_p_t,0))){
    SWIG_fail_ptr("LLViewerObject_addThisAndAllChildren",2,SWIGTYPE_p_LLDynamicArrayT_LLViewerObject_p_t);
  }
  
  (arg1)->addThisAndAllChildren(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_addThisAndNonJointChildren(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLDynamicArray< LLViewerObject * > *arg2 = 0 ;
  
  SWIG_check_num_args("addThisAndNonJointChildren",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addThisAndNonJointChildren",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addThisAndNonJointChildren",2,"LLDynamicArray< LLViewerObject * > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_addThisAndNonJointChildren",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLDynamicArrayT_LLViewerObject_p_t,0))){
    SWIG_fail_ptr("LLViewerObject_addThisAndNonJointChildren",2,SWIGTYPE_p_LLDynamicArrayT_LLViewerObject_p_t);
  }
  
  (arg1)->addThisAndNonJointChildren(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_isChild(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLViewerObject *arg2 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("isChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isChild",1,"LLViewerObject const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("isChild",2,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_isChild",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_isChild",2,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->isChild(arg2);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_isSeat(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("isSeat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isSeat",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_isSeat",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->isSeat();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_lineSegmentIntersect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLVector3 *arg2 = 0 ;
  LLVector3 *arg3 = 0 ;
  S32 arg4 ;
  BOOL arg5 ;
  S32 *arg6 = (S32 *) 0 ;
  LLVector3 *arg7 = (LLVector3 *) 0 ;
  LLVector2 *arg8 = (LLVector2 *) 0 ;
  LLVector3 *arg9 = (LLVector3 *) 0 ;
  LLVector3 *arg10 = (LLVector3 *) 0 ;
  S32 *argp4 ;
  BOOL *argp5 ;
  BOOL result;
  
  SWIG_check_num_args("lineSegmentIntersect",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("lineSegmentIntersect",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("lineSegmentIntersect",2,"LLVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("lineSegmentIntersect",3,"LLVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("lineSegmentIntersect",4,"S32");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("lineSegmentIntersect",5,"BOOL");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("lineSegmentIntersect",6,"S32 *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("lineSegmentIntersect",7,"LLVector3 *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("lineSegmentIntersect",8,"LLVector2 *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("lineSegmentIntersect",9,"LLVector3 *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("lineSegmentIntersect",10,"LLVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",2,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",3,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_S32,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",4,SWIGTYPE_p_S32);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",5,SWIGTYPE_p_BOOL);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_S32,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",6,SWIGTYPE_p_S32);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",7,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",8,SWIGTYPE_p_LLVector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",9,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",10,SWIGTYPE_p_LLVector3);
  }
  
  result = (arg1)->lineSegmentIntersect((LLVector3 const &)*arg2,(LLVector3 const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_lineSegmentIntersect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLVector3 *arg2 = 0 ;
  LLVector3 *arg3 = 0 ;
  S32 arg4 ;
  BOOL arg5 ;
  S32 *arg6 = (S32 *) 0 ;
  LLVector3 *arg7 = (LLVector3 *) 0 ;
  LLVector2 *arg8 = (LLVector2 *) 0 ;
  LLVector3 *arg9 = (LLVector3 *) 0 ;
  S32 *argp4 ;
  BOOL *argp5 ;
  BOOL result;
  
  SWIG_check_num_args("lineSegmentIntersect",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("lineSegmentIntersect",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("lineSegmentIntersect",2,"LLVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("lineSegmentIntersect",3,"LLVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("lineSegmentIntersect",4,"S32");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("lineSegmentIntersect",5,"BOOL");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("lineSegmentIntersect",6,"S32 *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("lineSegmentIntersect",7,"LLVector3 *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("lineSegmentIntersect",8,"LLVector2 *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("lineSegmentIntersect",9,"LLVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",2,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",3,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_S32,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",4,SWIGTYPE_p_S32);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",5,SWIGTYPE_p_BOOL);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_S32,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",6,SWIGTYPE_p_S32);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",7,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",8,SWIGTYPE_p_LLVector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",9,SWIGTYPE_p_LLVector3);
  }
  
  result = (arg1)->lineSegmentIntersect((LLVector3 const &)*arg2,(LLVector3 const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_lineSegmentIntersect__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLVector3 *arg2 = 0 ;
  LLVector3 *arg3 = 0 ;
  S32 arg4 ;
  BOOL arg5 ;
  S32 *arg6 = (S32 *) 0 ;
  LLVector3 *arg7 = (LLVector3 *) 0 ;
  LLVector2 *arg8 = (LLVector2 *) 0 ;
  S32 *argp4 ;
  BOOL *argp5 ;
  BOOL result;
  
  SWIG_check_num_args("lineSegmentIntersect",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("lineSegmentIntersect",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("lineSegmentIntersect",2,"LLVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("lineSegmentIntersect",3,"LLVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("lineSegmentIntersect",4,"S32");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("lineSegmentIntersect",5,"BOOL");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("lineSegmentIntersect",6,"S32 *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("lineSegmentIntersect",7,"LLVector3 *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("lineSegmentIntersect",8,"LLVector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",2,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",3,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_S32,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",4,SWIGTYPE_p_S32);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",5,SWIGTYPE_p_BOOL);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_S32,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",6,SWIGTYPE_p_S32);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",7,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_LLVector2,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",8,SWIGTYPE_p_LLVector2);
  }
  
  result = (arg1)->lineSegmentIntersect((LLVector3 const &)*arg2,(LLVector3 const &)*arg3,arg4,arg5,arg6,arg7,arg8);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_lineSegmentIntersect__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLVector3 *arg2 = 0 ;
  LLVector3 *arg3 = 0 ;
  S32 arg4 ;
  BOOL arg5 ;
  S32 *arg6 = (S32 *) 0 ;
  LLVector3 *arg7 = (LLVector3 *) 0 ;
  S32 *argp4 ;
  BOOL *argp5 ;
  BOOL result;
  
  SWIG_check_num_args("lineSegmentIntersect",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("lineSegmentIntersect",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("lineSegmentIntersect",2,"LLVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("lineSegmentIntersect",3,"LLVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("lineSegmentIntersect",4,"S32");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("lineSegmentIntersect",5,"BOOL");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("lineSegmentIntersect",6,"S32 *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("lineSegmentIntersect",7,"LLVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",2,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",3,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_S32,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",4,SWIGTYPE_p_S32);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",5,SWIGTYPE_p_BOOL);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_S32,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",6,SWIGTYPE_p_S32);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",7,SWIGTYPE_p_LLVector3);
  }
  
  result = (arg1)->lineSegmentIntersect((LLVector3 const &)*arg2,(LLVector3 const &)*arg3,arg4,arg5,arg6,arg7);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_lineSegmentIntersect__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLVector3 *arg2 = 0 ;
  LLVector3 *arg3 = 0 ;
  S32 arg4 ;
  BOOL arg5 ;
  S32 *arg6 = (S32 *) 0 ;
  S32 *argp4 ;
  BOOL *argp5 ;
  BOOL result;
  
  SWIG_check_num_args("lineSegmentIntersect",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("lineSegmentIntersect",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("lineSegmentIntersect",2,"LLVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("lineSegmentIntersect",3,"LLVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("lineSegmentIntersect",4,"S32");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("lineSegmentIntersect",5,"BOOL");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("lineSegmentIntersect",6,"S32 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",2,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",3,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_S32,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",4,SWIGTYPE_p_S32);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",5,SWIGTYPE_p_BOOL);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_S32,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",6,SWIGTYPE_p_S32);
  }
  
  result = (arg1)->lineSegmentIntersect((LLVector3 const &)*arg2,(LLVector3 const &)*arg3,arg4,arg5,arg6);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_lineSegmentIntersect__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLVector3 *arg2 = 0 ;
  LLVector3 *arg3 = 0 ;
  S32 arg4 ;
  BOOL arg5 ;
  S32 *argp4 ;
  BOOL *argp5 ;
  BOOL result;
  
  SWIG_check_num_args("lineSegmentIntersect",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("lineSegmentIntersect",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("lineSegmentIntersect",2,"LLVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("lineSegmentIntersect",3,"LLVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("lineSegmentIntersect",4,"S32");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("lineSegmentIntersect",5,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",2,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",3,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_S32,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",4,SWIGTYPE_p_S32);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",5,SWIGTYPE_p_BOOL);
  }
  arg5 = *argp5;
  
  result = (arg1)->lineSegmentIntersect((LLVector3 const &)*arg2,(LLVector3 const &)*arg3,arg4,arg5);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_lineSegmentIntersect__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLVector3 *arg2 = 0 ;
  LLVector3 *arg3 = 0 ;
  S32 arg4 ;
  S32 *argp4 ;
  BOOL result;
  
  SWIG_check_num_args("lineSegmentIntersect",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("lineSegmentIntersect",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("lineSegmentIntersect",2,"LLVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("lineSegmentIntersect",3,"LLVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("lineSegmentIntersect",4,"S32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",2,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",3,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_S32,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",4,SWIGTYPE_p_S32);
  }
  arg4 = *argp4;
  
  result = (arg1)->lineSegmentIntersect((LLVector3 const &)*arg2,(LLVector3 const &)*arg3,arg4);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_lineSegmentIntersect__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLVector3 *arg2 = 0 ;
  LLVector3 *arg3 = 0 ;
  BOOL result;
  
  SWIG_check_num_args("lineSegmentIntersect",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("lineSegmentIntersect",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("lineSegmentIntersect",2,"LLVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("lineSegmentIntersect",3,"LLVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",2,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentIntersect",3,SWIGTYPE_p_LLVector3);
  }
  
  result = (arg1)->lineSegmentIntersect((LLVector3 const &)*arg2,(LLVector3 const &)*arg3);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_lineSegmentIntersect(lua_State* L) {
  int argc;
  int argv[11]={
    1,2,3,4,5,6,7,8,9,10,11
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_LLViewerObject_lineSegmentIntersect__SWIG_7(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_S32, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_LLViewerObject_lineSegmentIntersect__SWIG_6(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_S32, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_BOOL, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_LLViewerObject_lineSegmentIntersect__SWIG_5(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_S32, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_BOOL, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_S32, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_LLViewerObject_lineSegmentIntersect__SWIG_4(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_S32, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_BOOL, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_S32, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (SWIG_isptrtype(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  return _wrap_LLViewerObject_lineSegmentIntersect__SWIG_3(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_S32, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_BOOL, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_S32, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (SWIG_isptrtype(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  {
                    void *ptr;
                    if (SWIG_isptrtype(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_LLVector2, 0)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    return _wrap_LLViewerObject_lineSegmentIntersect__SWIG_2(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_S32, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_BOOL, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_S32, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (SWIG_isptrtype(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  {
                    void *ptr;
                    if (SWIG_isptrtype(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_LLVector2, 0)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (SWIG_isptrtype(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      return _wrap_LLViewerObject_lineSegmentIntersect__SWIG_1(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_S32, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_BOOL, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_S32, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (SWIG_isptrtype(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  {
                    void *ptr;
                    if (SWIG_isptrtype(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_LLVector2, 0)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (SWIG_isptrtype(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      {
                        void *ptr;
                        if (SWIG_isptrtype(L,argv[9])==0 || SWIG_ConvertPtr(L,argv[9], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
                          _v = 0;
                        } else {
                          _v = 1;
                        }
                      }
                      if (_v) {
                        return _wrap_LLViewerObject_lineSegmentIntersect__SWIG_0(L);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLViewerObject_lineSegmentIntersect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    lineSegmentIntersect(LLViewerObject *,LLVector3 const &,LLVector3 const &,S32,BOOL,S32 *,LLVector3 *,LLVector2 *,LLVector3 *,LLVector3 *)\n"
    "    lineSegmentIntersect(LLViewerObject *,LLVector3 const &,LLVector3 const &,S32,BOOL,S32 *,LLVector3 *,LLVector2 *,LLVector3 *)\n"
    "    lineSegmentIntersect(LLViewerObject *,LLVector3 const &,LLVector3 const &,S32,BOOL,S32 *,LLVector3 *,LLVector2 *)\n"
    "    lineSegmentIntersect(LLViewerObject *,LLVector3 const &,LLVector3 const &,S32,BOOL,S32 *,LLVector3 *)\n"
    "    lineSegmentIntersect(LLViewerObject *,LLVector3 const &,LLVector3 const &,S32,BOOL,S32 *)\n"
    "    lineSegmentIntersect(LLViewerObject *,LLVector3 const &,LLVector3 const &,S32,BOOL)\n"
    "    lineSegmentIntersect(LLViewerObject *,LLVector3 const &,LLVector3 const &,S32)\n"
    "    lineSegmentIntersect(LLViewerObject *,LLVector3 const &,LLVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LLViewerObject_lineSegmentBoundingBox(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLVector3 *arg2 = 0 ;
  LLVector3 *arg3 = 0 ;
  BOOL result;
  
  SWIG_check_num_args("lineSegmentBoundingBox",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("lineSegmentBoundingBox",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("lineSegmentBoundingBox",2,"LLVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("lineSegmentBoundingBox",3,"LLVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentBoundingBox",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentBoundingBox",2,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_lineSegmentBoundingBox",3,SWIGTYPE_p_LLVector3);
  }
  
  result = (arg1)->lineSegmentBoundingBox((LLVector3 const &)*arg2,(LLVector3 const &)*arg3);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getPositionGlobal(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLVector3d result;
  
  SWIG_check_num_args("getPositionGlobal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPositionGlobal",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getPositionGlobal",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->getPositionGlobal();
  {
    LLVector3d * resultptr = new LLVector3d((const LLVector3d &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLVector3d,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getPositionRegion(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLVector3 *result = 0 ;
  
  SWIG_check_num_args("getPositionRegion",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPositionRegion",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getPositionRegion",1,SWIGTYPE_p_LLViewerObject);
  }
  
  {
    LLVector3 const &_result_ref = ((LLViewerObject const *)arg1)->getPositionRegion();
    result = (LLVector3 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getPositionEdit(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLVector3 result;
  
  SWIG_check_num_args("getPositionEdit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPositionEdit",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getPositionEdit",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->getPositionEdit();
  {
    LLVector3 * resultptr = new LLVector3((const LLVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getPositionAgent(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLVector3 *result = 0 ;
  
  SWIG_check_num_args("getPositionAgent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPositionAgent",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getPositionAgent",1,SWIGTYPE_p_LLViewerObject);
  }
  
  {
    LLVector3 const &_result_ref = ((LLViewerObject const *)arg1)->getPositionAgent();
    result = (LLVector3 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getRenderPosition(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLVector3 result;
  
  SWIG_check_num_args("getRenderPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRenderPosition",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getRenderPosition",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->getRenderPosition();
  {
    LLVector3 * resultptr = new LLVector3((const LLVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getPivotPositionAgent(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLVector3 result;
  
  SWIG_check_num_args("getPivotPositionAgent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPivotPositionAgent",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getPivotPositionAgent",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->getPivotPositionAgent();
  {
    LLVector3 * resultptr = new LLVector3((const LLVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getRootEdit(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLViewerObject *result = 0 ;
  
  SWIG_check_num_args("getRootEdit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRootEdit",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getRootEdit",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = (LLViewerObject *)((LLViewerObject const *)arg1)->getRootEdit();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLViewerObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getRotationRegion(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLQuaternion result;
  
  SWIG_check_num_args("getRotationRegion",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRotationRegion",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getRotationRegion",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->getRotationRegion();
  {
    LLQuaternion * resultptr = new LLQuaternion((const LLQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getRotationEdit(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLQuaternion result;
  
  SWIG_check_num_args("getRotationEdit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRotationEdit",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getRotationEdit",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->getRotationEdit();
  {
    LLQuaternion * resultptr = new LLQuaternion((const LLQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getRenderRotation(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLQuaternion result;
  
  SWIG_check_num_args("getRenderRotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRenderRotation",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getRenderRotation",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->getRenderRotation();
  {
    LLQuaternion * resultptr = new LLQuaternion((const LLQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getRenderMatrix(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLMatrix4 result;
  
  SWIG_check_num_args("getRenderMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRenderMatrix",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getRenderMatrix",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->getRenderMatrix();
  {
    LLMatrix4 * resultptr = new LLMatrix4((const LLMatrix4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLMatrix4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setPosition__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLVector3 *arg2 = 0 ;
  BOOL arg3 ;
  BOOL *argp3 ;
  
  SWIG_check_num_args("setPosition",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setPosition",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setPosition",2,"LLVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setPosition",3,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setPosition",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_setPosition",2,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("LLViewerObject_setPosition",3,SWIGTYPE_p_BOOL);
  }
  arg3 = *argp3;
  
  (arg1)->setPosition((LLVector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setPosition__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("setPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setPosition",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setPosition",2,"LLVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setPosition",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_setPosition",2,SWIGTYPE_p_LLVector3);
  }
  
  (arg1)->setPosition((LLVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setPosition(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLViewerObject_setPosition__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_BOOL, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_LLViewerObject_setPosition__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLViewerObject_setPosition'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setPosition(LLViewerObject *,LLVector3 const &,BOOL)\n"
    "    setPosition(LLViewerObject *,LLVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LLViewerObject_setPositionGlobal__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLVector3d *arg2 = 0 ;
  BOOL arg3 ;
  BOOL *argp3 ;
  
  SWIG_check_num_args("setPositionGlobal",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setPositionGlobal",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setPositionGlobal",2,"LLVector3d const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setPositionGlobal",3,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setPositionGlobal",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3d,0))){
    SWIG_fail_ptr("LLViewerObject_setPositionGlobal",2,SWIGTYPE_p_LLVector3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("LLViewerObject_setPositionGlobal",3,SWIGTYPE_p_BOOL);
  }
  arg3 = *argp3;
  
  (arg1)->setPositionGlobal((LLVector3d const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setPositionGlobal__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLVector3d *arg2 = 0 ;
  
  SWIG_check_num_args("setPositionGlobal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setPositionGlobal",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setPositionGlobal",2,"LLVector3d const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setPositionGlobal",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3d,0))){
    SWIG_fail_ptr("LLViewerObject_setPositionGlobal",2,SWIGTYPE_p_LLVector3d);
  }
  
  (arg1)->setPositionGlobal((LLVector3d const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setPositionGlobal(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3d, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLViewerObject_setPositionGlobal__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3d, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_BOOL, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_LLViewerObject_setPositionGlobal__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLViewerObject_setPositionGlobal'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setPositionGlobal(LLViewerObject *,LLVector3d const &,BOOL)\n"
    "    setPositionGlobal(LLViewerObject *,LLVector3d const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LLViewerObject_setPositionRegion__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLVector3 *arg2 = 0 ;
  BOOL arg3 ;
  BOOL *argp3 ;
  
  SWIG_check_num_args("setPositionRegion",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setPositionRegion",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setPositionRegion",2,"LLVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setPositionRegion",3,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setPositionRegion",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_setPositionRegion",2,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("LLViewerObject_setPositionRegion",3,SWIGTYPE_p_BOOL);
  }
  arg3 = *argp3;
  
  (arg1)->setPositionRegion((LLVector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setPositionRegion__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("setPositionRegion",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setPositionRegion",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setPositionRegion",2,"LLVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setPositionRegion",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_setPositionRegion",2,SWIGTYPE_p_LLVector3);
  }
  
  (arg1)->setPositionRegion((LLVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setPositionRegion(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLViewerObject_setPositionRegion__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_BOOL, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_LLViewerObject_setPositionRegion__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLViewerObject_setPositionRegion'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setPositionRegion(LLViewerObject *,LLVector3 const &,BOOL)\n"
    "    setPositionRegion(LLViewerObject *,LLVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LLViewerObject_setPositionEdit__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLVector3 *arg2 = 0 ;
  BOOL arg3 ;
  BOOL *argp3 ;
  
  SWIG_check_num_args("setPositionEdit",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setPositionEdit",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setPositionEdit",2,"LLVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setPositionEdit",3,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setPositionEdit",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_setPositionEdit",2,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("LLViewerObject_setPositionEdit",3,SWIGTYPE_p_BOOL);
  }
  arg3 = *argp3;
  
  (arg1)->setPositionEdit((LLVector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setPositionEdit__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("setPositionEdit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setPositionEdit",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setPositionEdit",2,"LLVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setPositionEdit",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_setPositionEdit",2,SWIGTYPE_p_LLVector3);
  }
  
  (arg1)->setPositionEdit((LLVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setPositionEdit(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLViewerObject_setPositionEdit__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_BOOL, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_LLViewerObject_setPositionEdit__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLViewerObject_setPositionEdit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setPositionEdit(LLViewerObject *,LLVector3 const &,BOOL)\n"
    "    setPositionEdit(LLViewerObject *,LLVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LLViewerObject_setPositionAgent__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLVector3 *arg2 = 0 ;
  BOOL arg3 ;
  BOOL *argp3 ;
  
  SWIG_check_num_args("setPositionAgent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setPositionAgent",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setPositionAgent",2,"LLVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setPositionAgent",3,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setPositionAgent",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_setPositionAgent",2,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("LLViewerObject_setPositionAgent",3,SWIGTYPE_p_BOOL);
  }
  arg3 = *argp3;
  
  (arg1)->setPositionAgent((LLVector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setPositionAgent__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("setPositionAgent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setPositionAgent",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setPositionAgent",2,"LLVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setPositionAgent",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_setPositionAgent",2,SWIGTYPE_p_LLVector3);
  }
  
  (arg1)->setPositionAgent((LLVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setPositionAgent(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLViewerObject_setPositionAgent__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_BOOL, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_LLViewerObject_setPositionAgent__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLViewerObject_setPositionAgent'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setPositionAgent(LLViewerObject *,LLVector3 const &,BOOL)\n"
    "    setPositionAgent(LLViewerObject *,LLVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LLViewerObject_setPositionParent__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLVector3 *arg2 = 0 ;
  BOOL arg3 ;
  BOOL *argp3 ;
  
  SWIG_check_num_args("setPositionParent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setPositionParent",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setPositionParent",2,"LLVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setPositionParent",3,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setPositionParent",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_setPositionParent",2,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("LLViewerObject_setPositionParent",3,SWIGTYPE_p_BOOL);
  }
  arg3 = *argp3;
  
  (arg1)->setPositionParent((LLVector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setPositionParent__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("setPositionParent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setPositionParent",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setPositionParent",2,"LLVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setPositionParent",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_setPositionParent",2,SWIGTYPE_p_LLVector3);
  }
  
  (arg1)->setPositionParent((LLVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setPositionParent(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLViewerObject_setPositionParent__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_BOOL, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_LLViewerObject_setPositionParent__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLViewerObject_setPositionParent'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setPositionParent(LLViewerObject *,LLVector3 const &,BOOL)\n"
    "    setPositionParent(LLViewerObject *,LLVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LLViewerObject_setPositionAbsoluteGlobal__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLVector3d *arg2 = 0 ;
  BOOL arg3 ;
  BOOL *argp3 ;
  
  SWIG_check_num_args("setPositionAbsoluteGlobal",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setPositionAbsoluteGlobal",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setPositionAbsoluteGlobal",2,"LLVector3d const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setPositionAbsoluteGlobal",3,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setPositionAbsoluteGlobal",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3d,0))){
    SWIG_fail_ptr("LLViewerObject_setPositionAbsoluteGlobal",2,SWIGTYPE_p_LLVector3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("LLViewerObject_setPositionAbsoluteGlobal",3,SWIGTYPE_p_BOOL);
  }
  arg3 = *argp3;
  
  (arg1)->setPositionAbsoluteGlobal((LLVector3d const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setPositionAbsoluteGlobal__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLVector3d *arg2 = 0 ;
  
  SWIG_check_num_args("setPositionAbsoluteGlobal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setPositionAbsoluteGlobal",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setPositionAbsoluteGlobal",2,"LLVector3d const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setPositionAbsoluteGlobal",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3d,0))){
    SWIG_fail_ptr("LLViewerObject_setPositionAbsoluteGlobal",2,SWIGTYPE_p_LLVector3d);
  }
  
  (arg1)->setPositionAbsoluteGlobal((LLVector3d const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setPositionAbsoluteGlobal(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3d, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLViewerObject_setPositionAbsoluteGlobal__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3d, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_BOOL, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_LLViewerObject_setPositionAbsoluteGlobal__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLViewerObject_setPositionAbsoluteGlobal'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setPositionAbsoluteGlobal(LLViewerObject *,LLVector3d const &,BOOL)\n"
    "    setPositionAbsoluteGlobal(LLViewerObject *,LLVector3d const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LLViewerObject_getWorldMatrix(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLXformMatrix *arg2 = (LLXformMatrix *) 0 ;
  LLMatrix4 *result = 0 ;
  
  SWIG_check_num_args("getWorldMatrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getWorldMatrix",1,"LLViewerObject const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("getWorldMatrix",2,"LLXformMatrix *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getWorldMatrix",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLXformMatrix,0))){
    SWIG_fail_ptr("LLViewerObject_getWorldMatrix",2,SWIGTYPE_p_LLXformMatrix);
  }
  
  {
    LLMatrix4 const &_result_ref = ((LLViewerObject const *)arg1)->getWorldMatrix(arg2);
    result = (LLMatrix4 *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLMatrix4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setRotation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  F32 arg2 ;
  F32 arg3 ;
  F32 arg4 ;
  BOOL arg5 ;
  F32 *argp2 ;
  F32 *argp3 ;
  F32 *argp4 ;
  BOOL *argp5 ;
  
  SWIG_check_num_args("setRotation",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setRotation",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setRotation",2,"F32 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setRotation",3,"F32 const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("setRotation",4,"F32 const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("setRotation",5,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setRotation",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLViewerObject_setRotation",2,SWIGTYPE_p_F32);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLViewerObject_setRotation",3,SWIGTYPE_p_F32);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLViewerObject_setRotation",4,SWIGTYPE_p_F32);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("LLViewerObject_setRotation",5,SWIGTYPE_p_BOOL);
  }
  arg5 = *argp5;
  
  (arg1)->setRotation(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setRotation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  F32 arg2 ;
  F32 arg3 ;
  F32 arg4 ;
  F32 *argp2 ;
  F32 *argp3 ;
  F32 *argp4 ;
  
  SWIG_check_num_args("setRotation",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setRotation",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setRotation",2,"F32 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setRotation",3,"F32 const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("setRotation",4,"F32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setRotation",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLViewerObject_setRotation",2,SWIGTYPE_p_F32);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLViewerObject_setRotation",3,SWIGTYPE_p_F32);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLViewerObject_setRotation",4,SWIGTYPE_p_F32);
  }
  arg4 = *argp4;
  
  (arg1)->setRotation(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setRotation__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLQuaternion *arg2 = 0 ;
  BOOL arg3 ;
  BOOL *argp3 ;
  
  SWIG_check_num_args("setRotation",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setRotation",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setRotation",2,"LLQuaternion const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setRotation",3,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setRotation",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLQuaternion,0))){
    SWIG_fail_ptr("LLViewerObject_setRotation",2,SWIGTYPE_p_LLQuaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("LLViewerObject_setRotation",3,SWIGTYPE_p_BOOL);
  }
  arg3 = *argp3;
  
  (arg1)->setRotation((LLQuaternion const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setRotation__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLQuaternion *arg2 = 0 ;
  
  SWIG_check_num_args("setRotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setRotation",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setRotation",2,"LLQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setRotation",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLQuaternion,0))){
    SWIG_fail_ptr("LLViewerObject_setRotation",2,SWIGTYPE_p_LLQuaternion);
  }
  
  (arg1)->setRotation((LLQuaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setRotation(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLQuaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLViewerObject_setRotation__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLQuaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_BOOL, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_LLViewerObject_setRotation__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_F32, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_F32, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_F32, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_LLViewerObject_setRotation__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_F32, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_F32, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_F32, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_BOOL, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_LLViewerObject_setRotation__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLViewerObject_setRotation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setRotation(LLViewerObject *,F32 const,F32 const,F32 const,BOOL)\n"
    "    setRotation(LLViewerObject *,F32 const,F32 const,F32 const)\n"
    "    setRotation(LLViewerObject *,LLQuaternion const &,BOOL)\n"
    "    setRotation(LLViewerObject *,LLQuaternion const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LLViewerObject_sendRotationUpdate(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  
  SWIG_check_num_args("sendRotationUpdate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sendRotationUpdate",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_sendRotationUpdate",1,SWIGTYPE_p_LLViewerObject);
  }
  
  ((LLViewerObject const *)arg1)->sendRotationUpdate();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setNumTEs(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U8 arg2 ;
  U8 *argp2 ;
  
  SWIG_check_num_args("setNumTEs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setNumTEs",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setNumTEs",2,"U8 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setNumTEs",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLViewerObject_setNumTEs",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  (arg1)->setNumTEs(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setTE(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U8 arg2 ;
  LLTextureEntry *arg3 = 0 ;
  U8 *argp2 ;
  
  SWIG_check_num_args("setTE",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTE",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTE",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTE",3,"LLTextureEntry const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setTE",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLViewerObject_setTE",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLTextureEntry,0))){
    SWIG_fail_ptr("LLViewerObject_setTE",3,SWIGTYPE_p_LLTextureEntry);
  }
  
  (arg1)->setTE(arg2,(LLTextureEntry const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setTETexture(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U8 arg2 ;
  LLUUID *arg3 = 0 ;
  U8 *argp2 ;
  S32 result;
  
  SWIG_check_num_args("setTETexture",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTETexture",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTETexture",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTETexture",3,"LLUUID const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setTETexture",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLViewerObject_setTETexture",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLUUID,0))){
    SWIG_fail_ptr("LLViewerObject_setTETexture",3,SWIGTYPE_p_LLUUID);
  }
  
  result = (arg1)->setTETexture(arg2,(LLUUID const &)*arg3);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setTETextureCore(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U8 arg2 ;
  LLUUID *arg3 = 0 ;
  LLHost arg4 ;
  U8 *argp2 ;
  LLHost *argp4 ;
  S32 result;
  
  SWIG_check_num_args("setTETextureCore",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTETextureCore",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTETextureCore",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTETextureCore",3,"LLUUID const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("setTETextureCore",4,"LLHost");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setTETextureCore",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLViewerObject_setTETextureCore",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLUUID,0))){
    SWIG_fail_ptr("LLViewerObject_setTETextureCore",3,SWIGTYPE_p_LLUUID);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_LLHost,0))){
    SWIG_fail_ptr("LLViewerObject_setTETextureCore",4,SWIGTYPE_p_LLHost);
  }
  arg4 = *argp4;
  
  result = (arg1)->setTETextureCore(arg2,(LLUUID const &)*arg3,arg4);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setTEColor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U8 arg2 ;
  LLColor3 *arg3 = 0 ;
  U8 *argp2 ;
  S32 result;
  
  SWIG_check_num_args("setTEColor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTEColor",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTEColor",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTEColor",3,"LLColor3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setTEColor",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLViewerObject_setTEColor",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLColor3,0))){
    SWIG_fail_ptr("LLViewerObject_setTEColor",3,SWIGTYPE_p_LLColor3);
  }
  
  result = (arg1)->setTEColor(arg2,(LLColor3 const &)*arg3);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setTEColor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U8 arg2 ;
  LLColor4 *arg3 = 0 ;
  U8 *argp2 ;
  S32 result;
  
  SWIG_check_num_args("setTEColor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTEColor",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTEColor",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTEColor",3,"LLColor4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setTEColor",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLViewerObject_setTEColor",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLColor4,0))){
    SWIG_fail_ptr("LLViewerObject_setTEColor",3,SWIGTYPE_p_LLColor4);
  }
  
  result = (arg1)->setTEColor(arg2,(LLColor4 const &)*arg3);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setTEColor(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_U8, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_LLColor3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_LLViewerObject_setTEColor__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_U8, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_LLColor4, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_LLViewerObject_setTEColor__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLViewerObject_setTEColor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setTEColor(LLViewerObject *,U8 const,LLColor3 const &)\n"
    "    setTEColor(LLViewerObject *,U8 const,LLColor4 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LLViewerObject_setTEScale(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U8 arg2 ;
  F32 arg3 ;
  F32 arg4 ;
  U8 *argp2 ;
  F32 *argp3 ;
  F32 *argp4 ;
  S32 result;
  
  SWIG_check_num_args("setTEScale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTEScale",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTEScale",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTEScale",3,"F32 const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("setTEScale",4,"F32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setTEScale",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLViewerObject_setTEScale",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLViewerObject_setTEScale",3,SWIGTYPE_p_F32);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLViewerObject_setTEScale",4,SWIGTYPE_p_F32);
  }
  arg4 = *argp4;
  
  result = (arg1)->setTEScale(arg2,arg3,arg4);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setTEScaleS(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U8 arg2 ;
  F32 arg3 ;
  U8 *argp2 ;
  F32 *argp3 ;
  S32 result;
  
  SWIG_check_num_args("setTEScaleS",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTEScaleS",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTEScaleS",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTEScaleS",3,"F32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setTEScaleS",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLViewerObject_setTEScaleS",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLViewerObject_setTEScaleS",3,SWIGTYPE_p_F32);
  }
  arg3 = *argp3;
  
  result = (arg1)->setTEScaleS(arg2,arg3);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setTEScaleT(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U8 arg2 ;
  F32 arg3 ;
  U8 *argp2 ;
  F32 *argp3 ;
  S32 result;
  
  SWIG_check_num_args("setTEScaleT",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTEScaleT",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTEScaleT",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTEScaleT",3,"F32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setTEScaleT",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLViewerObject_setTEScaleT",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLViewerObject_setTEScaleT",3,SWIGTYPE_p_F32);
  }
  arg3 = *argp3;
  
  result = (arg1)->setTEScaleT(arg2,arg3);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setTEOffset(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U8 arg2 ;
  F32 arg3 ;
  F32 arg4 ;
  U8 *argp2 ;
  F32 *argp3 ;
  F32 *argp4 ;
  S32 result;
  
  SWIG_check_num_args("setTEOffset",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTEOffset",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTEOffset",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTEOffset",3,"F32 const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("setTEOffset",4,"F32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setTEOffset",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLViewerObject_setTEOffset",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLViewerObject_setTEOffset",3,SWIGTYPE_p_F32);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLViewerObject_setTEOffset",4,SWIGTYPE_p_F32);
  }
  arg4 = *argp4;
  
  result = (arg1)->setTEOffset(arg2,arg3,arg4);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setTEOffsetS(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U8 arg2 ;
  F32 arg3 ;
  U8 *argp2 ;
  F32 *argp3 ;
  S32 result;
  
  SWIG_check_num_args("setTEOffsetS",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTEOffsetS",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTEOffsetS",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTEOffsetS",3,"F32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setTEOffsetS",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLViewerObject_setTEOffsetS",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLViewerObject_setTEOffsetS",3,SWIGTYPE_p_F32);
  }
  arg3 = *argp3;
  
  result = (arg1)->setTEOffsetS(arg2,arg3);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setTEOffsetT(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U8 arg2 ;
  F32 arg3 ;
  U8 *argp2 ;
  F32 *argp3 ;
  S32 result;
  
  SWIG_check_num_args("setTEOffsetT",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTEOffsetT",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTEOffsetT",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTEOffsetT",3,"F32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setTEOffsetT",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLViewerObject_setTEOffsetT",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLViewerObject_setTEOffsetT",3,SWIGTYPE_p_F32);
  }
  arg3 = *argp3;
  
  result = (arg1)->setTEOffsetT(arg2,arg3);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setTERotation(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U8 arg2 ;
  F32 arg3 ;
  U8 *argp2 ;
  F32 *argp3 ;
  S32 result;
  
  SWIG_check_num_args("setTERotation",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTERotation",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTERotation",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTERotation",3,"F32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setTERotation",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLViewerObject_setTERotation",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLViewerObject_setTERotation",3,SWIGTYPE_p_F32);
  }
  arg3 = *argp3;
  
  result = (arg1)->setTERotation(arg2,arg3);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setTEBumpmap(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U8 arg2 ;
  U8 arg3 ;
  U8 *argp2 ;
  U8 *argp3 ;
  S32 result;
  
  SWIG_check_num_args("setTEBumpmap",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTEBumpmap",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTEBumpmap",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTEBumpmap",3,"U8 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setTEBumpmap",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLViewerObject_setTEBumpmap",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLViewerObject_setTEBumpmap",3,SWIGTYPE_p_U8);
  }
  arg3 = *argp3;
  
  result = (arg1)->setTEBumpmap(arg2,arg3);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setTETexGen(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U8 arg2 ;
  U8 arg3 ;
  U8 *argp2 ;
  U8 *argp3 ;
  S32 result;
  
  SWIG_check_num_args("setTETexGen",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTETexGen",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTETexGen",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTETexGen",3,"U8 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setTETexGen",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLViewerObject_setTETexGen",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLViewerObject_setTETexGen",3,SWIGTYPE_p_U8);
  }
  arg3 = *argp3;
  
  result = (arg1)->setTETexGen(arg2,arg3);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setTEMediaTexGen(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U8 arg2 ;
  U8 arg3 ;
  U8 *argp2 ;
  U8 *argp3 ;
  S32 result;
  
  SWIG_check_num_args("setTEMediaTexGen",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTEMediaTexGen",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTEMediaTexGen",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTEMediaTexGen",3,"U8 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setTEMediaTexGen",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLViewerObject_setTEMediaTexGen",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLViewerObject_setTEMediaTexGen",3,SWIGTYPE_p_U8);
  }
  arg3 = *argp3;
  
  result = (arg1)->setTEMediaTexGen(arg2,arg3);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setTEShiny(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U8 arg2 ;
  U8 arg3 ;
  U8 *argp2 ;
  U8 *argp3 ;
  S32 result;
  
  SWIG_check_num_args("setTEShiny",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTEShiny",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTEShiny",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTEShiny",3,"U8 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setTEShiny",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLViewerObject_setTEShiny",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLViewerObject_setTEShiny",3,SWIGTYPE_p_U8);
  }
  arg3 = *argp3;
  
  result = (arg1)->setTEShiny(arg2,arg3);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setTEFullbright(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U8 arg2 ;
  U8 arg3 ;
  U8 *argp2 ;
  U8 *argp3 ;
  S32 result;
  
  SWIG_check_num_args("setTEFullbright",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTEFullbright",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTEFullbright",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTEFullbright",3,"U8 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setTEFullbright",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLViewerObject_setTEFullbright",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLViewerObject_setTEFullbright",3,SWIGTYPE_p_U8);
  }
  arg3 = *argp3;
  
  result = (arg1)->setTEFullbright(arg2,arg3);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setTEMediaFlags(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U8 arg2 ;
  U8 arg3 ;
  U8 *argp2 ;
  U8 *argp3 ;
  S32 result;
  
  SWIG_check_num_args("setTEMediaFlags",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTEMediaFlags",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTEMediaFlags",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTEMediaFlags",3,"U8 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setTEMediaFlags",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLViewerObject_setTEMediaFlags",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLViewerObject_setTEMediaFlags",3,SWIGTYPE_p_U8);
  }
  arg3 = *argp3;
  
  result = (arg1)->setTEMediaFlags(arg2,arg3);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setTEGlow(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U8 arg2 ;
  F32 arg3 ;
  U8 *argp2 ;
  F32 *argp3 ;
  S32 result;
  
  SWIG_check_num_args("setTEGlow",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTEGlow",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTEGlow",2,"U8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTEGlow",3,"F32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setTEGlow",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLViewerObject_setTEGlow",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLViewerObject_setTEGlow",3,SWIGTYPE_p_F32);
  }
  arg3 = *argp3;
  
  result = (arg1)->setTEGlow(arg2,arg3);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setMaterial(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U8 arg2 ;
  U8 *argp2 ;
  BOOL result;
  
  SWIG_check_num_args("setMaterial",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setMaterial",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setMaterial",2,"U8 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setMaterial",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLViewerObject_setMaterial",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  result = (arg1)->setMaterial(arg2);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setTEImage(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U8 arg2 ;
  LLViewerImage *arg3 = (LLViewerImage *) 0 ;
  U8 *argp2 ;
  
  SWIG_check_num_args("setTEImage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTEImage",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTEImage",2,"U8 const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("setTEImage",3,"LLViewerImage *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setTEImage",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLViewerObject_setTEImage",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLViewerImage,0))){
    SWIG_fail_ptr("LLViewerObject_setTEImage",3,SWIGTYPE_p_LLViewerImage);
  }
  
  (arg1)->setTEImage(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getTEImage(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U8 arg2 ;
  U8 *argp2 ;
  LLViewerImage *result = 0 ;
  
  SWIG_check_num_args("getTEImage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTEImage",1,"LLViewerObject const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getTEImage",2,"U8 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getTEImage",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLViewerObject_getTEImage",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  result = (LLViewerImage *)((LLViewerObject const *)arg1)->getTEImage(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLViewerImage,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_fitFaceTexture(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U8 arg2 ;
  U8 *argp2 ;
  
  SWIG_check_num_args("fitFaceTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fitFaceTexture",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("fitFaceTexture",2,"U8 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_fitFaceTexture",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLViewerObject_fitFaceTexture",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  (arg1)->fitFaceTexture(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_sendTEUpdate(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  
  SWIG_check_num_args("sendTEUpdate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sendTEUpdate",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_sendTEUpdate",1,SWIGTYPE_p_LLViewerObject);
  }
  
  ((LLViewerObject const *)arg1)->sendTEUpdate();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setScale__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLVector3 *arg2 = 0 ;
  BOOL arg3 ;
  BOOL *argp3 ;
  
  SWIG_check_num_args("setScale",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setScale",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setScale",2,"LLVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setScale",3,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setScale",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_setScale",2,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("LLViewerObject_setScale",3,SWIGTYPE_p_BOOL);
  }
  arg3 = *argp3;
  
  (arg1)->setScale((LLVector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setScale__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("setScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setScale",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setScale",2,"LLVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setScale",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_setScale",2,SWIGTYPE_p_LLVector3);
  }
  
  (arg1)->setScale((LLVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setScale(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLViewerObject_setScale__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_BOOL, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_LLViewerObject_setScale__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLViewerObject_setScale'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setScale(LLViewerObject *,LLVector3 const &,BOOL)\n"
    "    setScale(LLViewerObject *,LLVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LLViewerObject_sendShapeUpdate(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  
  SWIG_check_num_args("sendShapeUpdate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sendShapeUpdate",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_sendShapeUpdate",1,SWIGTYPE_p_LLViewerObject);
  }
  
  (arg1)->sendShapeUpdate();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getState(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U8 result;
  
  SWIG_check_num_args("getState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getState",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getState",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = (arg1)->getState();
  {
    U8 * resultptr = new U8((const U8 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_U8,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getAppAngle(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  F32 result;
  
  SWIG_check_num_args("getAppAngle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAppAngle",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getAppAngle",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->getAppAngle();
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getPixelArea(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  F32 result;
  
  SWIG_check_num_args("getPixelArea",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPixelArea",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getPixelArea",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->getPixelArea();
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setPixelArea(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  F32 arg2 ;
  F32 *argp2 ;
  
  SWIG_check_num_args("setPixelArea",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setPixelArea",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setPixelArea",2,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setPixelArea",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLViewerObject_setPixelArea",2,SWIGTYPE_p_F32);
  }
  arg2 = *argp2;
  
  (arg1)->setPixelArea(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getMaxScale(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  F32 result;
  
  SWIG_check_num_args("getMaxScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getMaxScale",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getMaxScale",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->getMaxScale();
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getMidScale(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  F32 result;
  
  SWIG_check_num_args("getMidScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getMidScale",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getMidScale",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->getMidScale();
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getMinScale(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  F32 result;
  
  SWIG_check_num_args("getMinScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getMinScale",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getMinScale",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->getMinScale();
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setAttachedSound(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLUUID *arg2 = 0 ;
  LLUUID *arg3 = 0 ;
  F32 arg4 ;
  U8 arg5 ;
  F32 *argp4 ;
  U8 *argp5 ;
  
  SWIG_check_num_args("setAttachedSound",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAttachedSound",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setAttachedSound",2,"LLUUID const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setAttachedSound",3,"LLUUID const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("setAttachedSound",4,"F32 const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("setAttachedSound",5,"U8 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setAttachedSound",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLUUID,0))){
    SWIG_fail_ptr("LLViewerObject_setAttachedSound",2,SWIGTYPE_p_LLUUID);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLUUID,0))){
    SWIG_fail_ptr("LLViewerObject_setAttachedSound",3,SWIGTYPE_p_LLUUID);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLViewerObject_setAttachedSound",4,SWIGTYPE_p_F32);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLViewerObject_setAttachedSound",5,SWIGTYPE_p_U8);
  }
  arg5 = *argp5;
  
  (arg1)->setAttachedSound((LLUUID const &)*arg2,(LLUUID const &)*arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_adjustAudioGain(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  F32 arg2 ;
  F32 *argp2 ;
  
  SWIG_check_num_args("adjustAudioGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adjustAudioGain",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("adjustAudioGain",2,"F32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_adjustAudioGain",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLViewerObject_adjustAudioGain",2,SWIGTYPE_p_F32);
  }
  arg2 = *argp2;
  
  (arg1)->adjustAudioGain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_clearAttachedSound(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  
  SWIG_check_num_args("clearAttachedSound",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clearAttachedSound",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_clearAttachedSound",1,SWIGTYPE_p_LLViewerObject);
  }
  
  (arg1)->clearAttachedSound();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getAudioSource(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLUUID *arg2 = 0 ;
  LLAudioSource *result = 0 ;
  
  SWIG_check_num_args("getAudioSource",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAudioSource",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getAudioSource",2,"LLUUID const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getAudioSource",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLUUID,0))){
    SWIG_fail_ptr("LLViewerObject_getAudioSource",2,SWIGTYPE_p_LLUUID);
  }
  
  result = (LLAudioSource *)(arg1)->getAudioSource((LLUUID const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLAudioSource,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_isAudioSource(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  bool result;
  
  SWIG_check_num_args("isAudioSource",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isAudioSource",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_isAudioSource",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = (bool)(arg1)->isAudioSource();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getMediaType(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U8 result;
  
  SWIG_check_num_args("getMediaType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getMediaType",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getMediaType",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->getMediaType();
  {
    U8 * resultptr = new U8((const U8 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_U8,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setMediaType(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U8 arg2 ;
  U8 *argp2 ;
  
  SWIG_check_num_args("setMediaType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setMediaType",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setMediaType",2,"U8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setMediaType",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLViewerObject_setMediaType",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  (arg1)->setMediaType(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getMediaURL(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  std::string result;
  
  SWIG_check_num_args("getMediaURL",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getMediaURL",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getMediaURL",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->getMediaURL();
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setMediaURL(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  std::string *arg2 = 0 ;
  
  SWIG_check_num_args("setMediaURL",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setMediaURL",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setMediaURL",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setMediaURL",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("LLViewerObject_setMediaURL",2,SWIGTYPE_p_std__string);
  }
  
  (arg1)->setMediaURL((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getMediaPassedWhitelist(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("getMediaPassedWhitelist",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getMediaPassedWhitelist",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getMediaPassedWhitelist",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->getMediaPassedWhitelist();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setMediaPassedWhitelist(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL arg2 ;
  BOOL *argp2 ;
  
  SWIG_check_num_args("setMediaPassedWhitelist",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setMediaPassedWhitelist",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setMediaPassedWhitelist",2,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setMediaPassedWhitelist",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("LLViewerObject_setMediaPassedWhitelist",2,SWIGTYPE_p_BOOL);
  }
  arg2 = *argp2;
  
  (arg1)->setMediaPassedWhitelist(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_sendMaterialUpdate(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  
  SWIG_check_num_args("sendMaterialUpdate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sendMaterialUpdate",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_sendMaterialUpdate",1,SWIGTYPE_p_LLViewerObject);
  }
  
  ((LLViewerObject const *)arg1)->sendMaterialUpdate();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setCanSelect(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL arg2 ;
  BOOL *argp2 ;
  
  SWIG_check_num_args("setCanSelect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setCanSelect",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setCanSelect",2,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setCanSelect",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("LLViewerObject_setCanSelect",2,SWIGTYPE_p_BOOL);
  }
  arg2 = *argp2;
  
  (arg1)->setCanSelect(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setDebugText(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  std::string *arg2 = 0 ;
  
  SWIG_check_num_args("setDebugText",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setDebugText",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setDebugText",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setDebugText",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("LLViewerObject_setDebugText",2,SWIGTYPE_p_std__string);
  }
  
  (arg1)->setDebugText((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setIcon(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLViewerImage *arg2 = (LLViewerImage *) 0 ;
  
  SWIG_check_num_args("setIcon",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setIcon",1,"LLViewerObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("setIcon",2,"LLViewerImage *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setIcon",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLViewerImage,0))){
    SWIG_fail_ptr("LLViewerObject_setIcon",2,SWIGTYPE_p_LLViewerImage);
  }
  
  (arg1)->setIcon(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_clearIcon(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  
  SWIG_check_num_args("clearIcon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clearIcon",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_clearIcon",1,SWIGTYPE_p_LLViewerObject);
  }
  
  (arg1)->clearIcon();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_markForUpdate(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL arg2 ;
  BOOL *argp2 ;
  
  SWIG_check_num_args("markForUpdate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("markForUpdate",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("markForUpdate",2,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_markForUpdate",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("LLViewerObject_markForUpdate",2,SWIGTYPE_p_BOOL);
  }
  arg2 = *argp2;
  
  (arg1)->markForUpdate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_updateVolume(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLVolumeParams *arg2 = 0 ;
  
  SWIG_check_num_args("updateVolume",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateVolume",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("updateVolume",2,"LLVolumeParams const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_updateVolume",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVolumeParams,0))){
    SWIG_fail_ptr("LLViewerObject_updateVolume",2,SWIGTYPE_p_LLVolumeParams);
  }
  
  (arg1)->updateVolume((LLVolumeParams const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_updateSpatialExtents(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLVector3 *arg2 = 0 ;
  LLVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("updateSpatialExtents",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateSpatialExtents",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("updateSpatialExtents",2,"LLVector3 &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("updateSpatialExtents",3,"LLVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_updateSpatialExtents",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_updateSpatialExtents",2,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_updateSpatialExtents",3,SWIGTYPE_p_LLVector3);
  }
  
  (arg1)->updateSpatialExtents(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getBinRadius(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  F32 result;
  
  SWIG_check_num_args("getBinRadius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBinRadius",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getBinRadius",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = (arg1)->getBinRadius();
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getBoundingBoxAgent(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLBBox result;
  
  SWIG_check_num_args("getBoundingBoxAgent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBoundingBoxAgent",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getBoundingBoxAgent",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->getBoundingBoxAgent();
  {
    LLBBox * resultptr = new LLBBox((const LLBBox &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLBBox,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_updatePositionCaches(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  
  SWIG_check_num_args("updatePositionCaches",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updatePositionCaches",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_updatePositionCaches",1,SWIGTYPE_p_LLViewerObject);
  }
  
  ((LLViewerObject const *)arg1)->updatePositionCaches();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_updateText(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  
  SWIG_check_num_args("updateText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateText",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_updateText",1,SWIGTYPE_p_LLViewerObject);
  }
  
  (arg1)->updateText();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_updateDrawable(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL arg2 ;
  BOOL *argp2 ;
  
  SWIG_check_num_args("updateDrawable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateDrawable",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("updateDrawable",2,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_updateDrawable",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("LLViewerObject_updateDrawable",2,SWIGTYPE_p_BOOL);
  }
  arg2 = *argp2;
  
  (arg1)->updateDrawable(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setDrawableState__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U32 arg2 ;
  BOOL arg3 ;
  U32 *argp2 ;
  BOOL *argp3 ;
  
  SWIG_check_num_args("setDrawableState",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setDrawableState",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setDrawableState",2,"U32");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setDrawableState",3,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setDrawableState",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U32,0))){
    SWIG_fail_ptr("LLViewerObject_setDrawableState",2,SWIGTYPE_p_U32);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("LLViewerObject_setDrawableState",3,SWIGTYPE_p_BOOL);
  }
  arg3 = *argp3;
  
  (arg1)->setDrawableState(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setDrawableState__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U32 arg2 ;
  U32 *argp2 ;
  
  SWIG_check_num_args("setDrawableState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setDrawableState",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setDrawableState",2,"U32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setDrawableState",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U32,0))){
    SWIG_fail_ptr("LLViewerObject_setDrawableState",2,SWIGTYPE_p_U32);
  }
  arg2 = *argp2;
  
  (arg1)->setDrawableState(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setDrawableState(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_U32, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLViewerObject_setDrawableState__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_U32, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_BOOL, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_LLViewerObject_setDrawableState__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLViewerObject_setDrawableState'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setDrawableState(LLViewerObject *,U32,BOOL)\n"
    "    setDrawableState(LLViewerObject *,U32)\n");
  lua_error(L);return 0;
}


static int _wrap_LLViewerObject_clearDrawableState__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U32 arg2 ;
  BOOL arg3 ;
  U32 *argp2 ;
  BOOL *argp3 ;
  
  SWIG_check_num_args("clearDrawableState",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clearDrawableState",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("clearDrawableState",2,"U32");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("clearDrawableState",3,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_clearDrawableState",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U32,0))){
    SWIG_fail_ptr("LLViewerObject_clearDrawableState",2,SWIGTYPE_p_U32);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("LLViewerObject_clearDrawableState",3,SWIGTYPE_p_BOOL);
  }
  arg3 = *argp3;
  
  (arg1)->clearDrawableState(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_clearDrawableState__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U32 arg2 ;
  U32 *argp2 ;
  
  SWIG_check_num_args("clearDrawableState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clearDrawableState",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("clearDrawableState",2,"U32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_clearDrawableState",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U32,0))){
    SWIG_fail_ptr("LLViewerObject_clearDrawableState",2,SWIGTYPE_p_U32);
  }
  arg2 = *argp2;
  
  (arg1)->clearDrawableState(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_clearDrawableState(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_U32, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLViewerObject_clearDrawableState__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_U32, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_BOOL, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_LLViewerObject_clearDrawableState__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLViewerObject_clearDrawableState'\n"
    "  Possible C/C++ prototypes are:\n"
    "    clearDrawableState(LLViewerObject *,U32,BOOL)\n"
    "    clearDrawableState(LLViewerObject *,U32)\n");
  lua_error(L);return 0;
}


static int _wrap_LLViewerObject_onShift(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("onShift",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("onShift",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("onShift",2,"LLVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_onShift",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_onShift",2,SWIGTYPE_p_LLVector3);
  }
  
  (arg1)->onShift((LLVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_registerInventoryListener(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLVOInventoryListener *arg2 = (LLVOInventoryListener *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("registerInventoryListener",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("registerInventoryListener",1,"LLViewerObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("registerInventoryListener",2,"LLVOInventoryListener *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("registerInventoryListener",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_registerInventoryListener",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVOInventoryListener,0))){
    SWIG_fail_ptr("LLViewerObject_registerInventoryListener",2,SWIGTYPE_p_LLVOInventoryListener);
  }
  
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"LLViewerObject_registerInventoryListener");
  (arg1)->registerInventoryListener(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_removeInventoryListener(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLVOInventoryListener *arg2 = (LLVOInventoryListener *) 0 ;
  
  SWIG_check_num_args("removeInventoryListener",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("removeInventoryListener",1,"LLViewerObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("removeInventoryListener",2,"LLVOInventoryListener *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_removeInventoryListener",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVOInventoryListener,0))){
    SWIG_fail_ptr("LLViewerObject_removeInventoryListener",2,SWIGTYPE_p_LLVOInventoryListener);
  }
  
  (arg1)->removeInventoryListener(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_isInventoryPending(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("isInventoryPending",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isInventoryPending",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_isInventoryPending",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = (arg1)->isInventoryPending();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_clearInventoryListeners(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  
  SWIG_check_num_args("clearInventoryListeners",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clearInventoryListeners",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_clearInventoryListeners",1,SWIGTYPE_p_LLViewerObject);
  }
  
  (arg1)->clearInventoryListeners();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_requestInventory(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  
  SWIG_check_num_args("requestInventory",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("requestInventory",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_requestInventory",1,SWIGTYPE_p_LLViewerObject);
  }
  
  (arg1)->requestInventory();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_fetchInventoryFromServer(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  
  SWIG_check_num_args("fetchInventoryFromServer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fetchInventoryFromServer",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_fetchInventoryFromServer",1,SWIGTYPE_p_LLViewerObject);
  }
  
  (arg1)->fetchInventoryFromServer();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_processTaskInv(lua_State* L) {
  int SWIG_arg = 0;
  LLMessageSystem *arg1 = (LLMessageSystem *) 0 ;
  void **arg2 = (void **) 0 ;
  
  SWIG_check_num_args("LLViewerObject::processTaskInv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LLViewerObject::processTaskInv",1,"LLMessageSystem *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LLViewerObject::processTaskInv",2,"void **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLMessageSystem,0))){
    SWIG_fail_ptr("LLViewerObject_processTaskInv",1,SWIGTYPE_p_LLMessageSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_void,0))){
    SWIG_fail_ptr("LLViewerObject_processTaskInv",2,SWIGTYPE_p_p_void);
  }
  
  LLViewerObject::processTaskInv(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_removeInventory(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLUUID *arg2 = 0 ;
  
  SWIG_check_num_args("removeInventory",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("removeInventory",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("removeInventory",2,"LLUUID const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_removeInventory",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLUUID,0))){
    SWIG_fail_ptr("LLViewerObject_removeInventory",2,SWIGTYPE_p_LLUUID);
  }
  
  (arg1)->removeInventory((LLUUID const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_updateInventory(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLViewerInventoryItem *arg2 = (LLViewerInventoryItem *) 0 ;
  U8 arg3 ;
  bool arg4 ;
  U8 *argp3 ;
  
  SWIG_check_num_args("updateInventory",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateInventory",1,"LLViewerObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("updateInventory",2,"LLViewerInventoryItem *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("updateInventory",3,"U8");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("updateInventory",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_updateInventory",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLViewerInventoryItem,0))){
    SWIG_fail_ptr("LLViewerObject_updateInventory",2,SWIGTYPE_p_LLViewerInventoryItem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLViewerObject_updateInventory",3,SWIGTYPE_p_U8);
  }
  arg3 = *argp3;
  
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->updateInventory(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_updateInventoryLocal(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLInventoryItem *arg2 = (LLInventoryItem *) 0 ;
  U8 arg3 ;
  U8 *argp3 ;
  
  SWIG_check_num_args("updateInventoryLocal",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateInventoryLocal",1,"LLViewerObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("updateInventoryLocal",2,"LLInventoryItem *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("updateInventoryLocal",3,"U8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_updateInventoryLocal",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLInventoryItem,0))){
    SWIG_fail_ptr("LLViewerObject_updateInventoryLocal",2,SWIGTYPE_p_LLInventoryItem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLViewerObject_updateInventoryLocal",3,SWIGTYPE_p_U8);
  }
  arg3 = *argp3;
  
  (arg1)->updateInventoryLocal(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getInventoryObject(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLUUID *arg2 = 0 ;
  LLInventoryObject *result = 0 ;
  
  SWIG_check_num_args("getInventoryObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getInventoryObject",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getInventoryObject",2,"LLUUID const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getInventoryObject",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLUUID,0))){
    SWIG_fail_ptr("LLViewerObject_getInventoryObject",2,SWIGTYPE_p_LLUUID);
  }
  
  result = (LLInventoryObject *)(arg1)->getInventoryObject((LLUUID const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLInventoryObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getInventoryContents(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  InventoryObjectList *arg2 = 0 ;
  
  SWIG_check_num_args("getInventoryContents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getInventoryContents",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getInventoryContents",2,"InventoryObjectList &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getInventoryContents",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_InventoryObjectList,0))){
    SWIG_fail_ptr("LLViewerObject_getInventoryContents",2,SWIGTYPE_p_InventoryObjectList);
  }
  
  (arg1)->getInventoryContents(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getInventoryRoot(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLInventoryObject *result = 0 ;
  
  SWIG_check_num_args("getInventoryRoot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getInventoryRoot",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getInventoryRoot",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = (LLInventoryObject *)(arg1)->getInventoryRoot();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLInventoryObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getInventoryItemByAsset(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLUUID *arg2 = 0 ;
  LLViewerInventoryItem *result = 0 ;
  
  SWIG_check_num_args("getInventoryItemByAsset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getInventoryItemByAsset",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getInventoryItemByAsset",2,"LLUUID const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getInventoryItemByAsset",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLUUID,0))){
    SWIG_fail_ptr("LLViewerObject_getInventoryItemByAsset",2,SWIGTYPE_p_LLUUID);
  }
  
  result = (LLViewerInventoryItem *)(arg1)->getInventoryItemByAsset((LLUUID const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLViewerInventoryItem,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getInventorySerial(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  S16 result;
  
  SWIG_check_num_args("getInventorySerial",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getInventorySerial",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getInventorySerial",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->getInventorySerial();
  {
    S16 * resultptr = new S16((const S16 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S16,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_updateViewerInventoryAsset(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLViewerInventoryItem *arg2 = (LLViewerInventoryItem *) 0 ;
  LLUUID *arg3 = 0 ;
  
  SWIG_check_num_args("updateViewerInventoryAsset",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateViewerInventoryAsset",1,"LLViewerObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("updateViewerInventoryAsset",2,"LLViewerInventoryItem const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("updateViewerInventoryAsset",3,"LLUUID const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_updateViewerInventoryAsset",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLViewerInventoryItem,0))){
    SWIG_fail_ptr("LLViewerObject_updateViewerInventoryAsset",2,SWIGTYPE_p_LLViewerInventoryItem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLUUID,0))){
    SWIG_fail_ptr("LLViewerObject_updateViewerInventoryAsset",3,SWIGTYPE_p_LLUUID);
  }
  
  (arg1)->updateViewerInventoryAsset((LLViewerInventoryItem const *)arg2,(LLUUID const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_dirtyInventory(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  
  SWIG_check_num_args("dirtyInventory",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dirtyInventory",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_dirtyInventory",1,SWIGTYPE_p_LLViewerObject);
  }
  
  (arg1)->dirtyInventory();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_isInventoryDirty(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("isInventoryDirty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isInventoryDirty",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_isInventoryDirty",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = (arg1)->isInventoryDirty();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_saveScript(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLViewerInventoryItem *arg2 = (LLViewerInventoryItem *) 0 ;
  BOOL arg3 ;
  bool arg4 ;
  BOOL *argp3 ;
  
  SWIG_check_num_args("saveScript",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("saveScript",1,"LLViewerObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("saveScript",2,"LLViewerInventoryItem const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("saveScript",3,"BOOL");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("saveScript",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_saveScript",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLViewerInventoryItem,0))){
    SWIG_fail_ptr("LLViewerObject_saveScript",2,SWIGTYPE_p_LLViewerInventoryItem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("LLViewerObject_saveScript",3,SWIGTYPE_p_BOOL);
  }
  arg3 = *argp3;
  
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->saveScript((LLViewerInventoryItem const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_moveInventory(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLUUID *arg2 = 0 ;
  LLUUID *arg3 = 0 ;
  
  SWIG_check_num_args("moveInventory",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("moveInventory",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("moveInventory",2,"LLUUID const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("moveInventory",3,"LLUUID const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_moveInventory",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLUUID,0))){
    SWIG_fail_ptr("LLViewerObject_moveInventory",2,SWIGTYPE_p_LLUUID);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLUUID,0))){
    SWIG_fail_ptr("LLViewerObject_moveInventory",3,SWIGTYPE_p_LLUUID);
  }
  
  (arg1)->moveInventory((LLUUID const &)*arg2,(LLUUID const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_countInventoryContents(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLAssetType::EType arg2 ;
  LLAssetType::EType *argp2 ;
  S32 result;
  
  SWIG_check_num_args("countInventoryContents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("countInventoryContents",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("countInventoryContents",2,"LLAssetType::EType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_countInventoryContents",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_LLAssetType__EType,0))){
    SWIG_fail_ptr("LLViewerObject_countInventoryContents",2,SWIGTYPE_p_LLAssetType__EType);
  }
  arg2 = *argp2;
  
  result = (arg1)->countInventoryContents(arg2);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_permAnyOwner(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("permAnyOwner",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("permAnyOwner",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_permAnyOwner",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->permAnyOwner();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_permYouOwner(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("permYouOwner",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("permYouOwner",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_permYouOwner",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->permYouOwner();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_permGroupOwner(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("permGroupOwner",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("permGroupOwner",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_permGroupOwner",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->permGroupOwner();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_permOwnerModify(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("permOwnerModify",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("permOwnerModify",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_permOwnerModify",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->permOwnerModify();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_permModify(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("permModify",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("permModify",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_permModify",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->permModify();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_permCopy(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("permCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("permCopy",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_permCopy",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->permCopy();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_permMove(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("permMove",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("permMove",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_permMove",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->permMove();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_permTransfer(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("permTransfer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("permTransfer",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_permTransfer",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->permTransfer();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_usePhysics(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("usePhysics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("usePhysics",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_usePhysics",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->usePhysics();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_flagScripted(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("flagScripted",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("flagScripted",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_flagScripted",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->flagScripted();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_flagHandleTouch(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("flagHandleTouch",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("flagHandleTouch",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_flagHandleTouch",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->flagHandleTouch();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_flagTakesMoney(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("flagTakesMoney",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("flagTakesMoney",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_flagTakesMoney",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->flagTakesMoney();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_flagPhantom(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("flagPhantom",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("flagPhantom",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_flagPhantom",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->flagPhantom();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_flagInventoryEmpty(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("flagInventoryEmpty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("flagInventoryEmpty",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_flagInventoryEmpty",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->flagInventoryEmpty();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_flagCastShadows(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("flagCastShadows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("flagCastShadows",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_flagCastShadows",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->flagCastShadows();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_flagAllowInventoryAdd(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("flagAllowInventoryAdd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("flagAllowInventoryAdd",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_flagAllowInventoryAdd",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->flagAllowInventoryAdd();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_flagTemporary(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("flagTemporary",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("flagTemporary",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_flagTemporary",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->flagTemporary();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_flagTemporaryOnRez(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("flagTemporaryOnRez",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("flagTemporaryOnRez",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_flagTemporaryOnRez",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->flagTemporaryOnRez();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_flagAnimSource(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("flagAnimSource",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("flagAnimSource",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_flagAnimSource",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->flagAnimSource();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_flagCameraSource(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("flagCameraSource",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("flagCameraSource",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_flagCameraSource",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->flagCameraSource();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_flagCameraDecoupled(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("flagCameraDecoupled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("flagCameraDecoupled",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_flagCameraDecoupled",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->flagCameraDecoupled();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getIncludeInSearch(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  bool result;
  
  SWIG_check_num_args("getIncludeInSearch",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getIncludeInSearch",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getIncludeInSearch",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = (bool)((LLViewerObject const *)arg1)->getIncludeInSearch();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setIncludeInSearch(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setIncludeInSearch",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setIncludeInSearch",1,"LLViewerObject *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setIncludeInSearch",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setIncludeInSearch",1,SWIGTYPE_p_LLViewerObject);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setIncludeInSearch(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_allowOpen(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("allowOpen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("allowOpen",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_allowOpen",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->allowOpen();
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setClickAction(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U8 arg2 ;
  U8 *argp2 ;
  
  SWIG_check_num_args("setClickAction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setClickAction",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setClickAction",2,"U8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setClickAction",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLViewerObject_setClickAction",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  (arg1)->setClickAction(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getClickAction(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U8 result;
  
  SWIG_check_num_args("getClickAction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getClickAction",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getClickAction",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->getClickAction();
  {
    U8 * resultptr = new U8((const U8 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_U8,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_specialHoverCursor(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  bool result;
  
  SWIG_check_num_args("specialHoverCursor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("specialHoverCursor",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_specialHoverCursor",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = (bool)((LLViewerObject const *)arg1)->specialHoverCursor();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setRegion(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLViewerRegion *arg2 = (LLViewerRegion *) 0 ;
  
  SWIG_check_num_args("setRegion",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setRegion",1,"LLViewerObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("setRegion",2,"LLViewerRegion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setRegion",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLViewerRegion,0))){
    SWIG_fail_ptr("LLViewerObject_setRegion",2,SWIGTYPE_p_LLViewerRegion);
  }
  
  (arg1)->setRegion(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_updateRegion(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLViewerRegion *arg2 = (LLViewerRegion *) 0 ;
  
  SWIG_check_num_args("updateRegion",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateRegion",1,"LLViewerObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("updateRegion",2,"LLViewerRegion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_updateRegion",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLViewerRegion,0))){
    SWIG_fail_ptr("LLViewerObject_updateRegion",2,SWIGTYPE_p_LLViewerRegion);
  }
  
  (arg1)->updateRegion(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_updateFlags(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  
  SWIG_check_num_args("updateFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateFlags",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_updateFlags",1,SWIGTYPE_p_LLViewerObject);
  }
  
  (arg1)->updateFlags();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setFlags(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U32 arg2 ;
  BOOL arg3 ;
  U32 *argp2 ;
  BOOL *argp3 ;
  BOOL result;
  
  SWIG_check_num_args("setFlags",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setFlags",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setFlags",2,"U32");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setFlags",3,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setFlags",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U32,0))){
    SWIG_fail_ptr("LLViewerObject_setFlags",2,SWIGTYPE_p_U32);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("LLViewerObject_setFlags",3,SWIGTYPE_p_BOOL);
  }
  arg3 = *argp3;
  
  result = (arg1)->setFlags(arg2,arg3);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_dump(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  
  SWIG_check_num_args("dump",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dump",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_dump",1,SWIGTYPE_p_LLViewerObject);
  }
  
  ((LLViewerObject const *)arg1)->dump();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getNumZombieObjects(lua_State* L) {
  int SWIG_arg = 0;
  U32 result;
  
  SWIG_check_num_args("LLViewerObject::getNumZombieObjects",0,0)
  result = LLViewerObject::getNumZombieObjects();
  {
    U32 * resultptr = new U32((const U32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_U32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_printNameValuePairs(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  
  SWIG_check_num_args("printNameValuePairs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("printNameValuePairs",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_printNameValuePairs",1,SWIGTYPE_p_LLViewerObject);
  }
  
  ((LLViewerObject const *)arg1)->printNameValuePairs();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getLOD(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  S32 result;
  
  SWIG_check_num_args("getLOD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getLOD",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getLOD",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->getLOD();
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getPartitionType(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U32 result;
  
  SWIG_check_num_args("getPartitionType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPartitionType",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getPartitionType",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = ((LLViewerObject const *)arg1)->getPartitionType();
  {
    U32 * resultptr = new U32((const U32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_U32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_dirtySpatialGroup(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  
  SWIG_check_num_args("dirtySpatialGroup",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dirtySpatialGroup",1,"LLViewerObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_dirtySpatialGroup",1,SWIGTYPE_p_LLViewerObject);
  }
  
  ((LLViewerObject const *)arg1)->dirtySpatialGroup();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_dirtyMesh(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  
  SWIG_check_num_args("dirtyMesh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dirtyMesh",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_dirtyMesh",1,SWIGTYPE_p_LLViewerObject);
  }
  
  (arg1)->dirtyMesh();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getParameterEntry(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U16 arg2 ;
  U16 *argp2 ;
  LLNetworkData *result = 0 ;
  
  SWIG_check_num_args("getParameterEntry",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getParameterEntry",1,"LLViewerObject const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getParameterEntry",2,"U16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getParameterEntry",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U16,0))){
    SWIG_fail_ptr("LLViewerObject_getParameterEntry",2,SWIGTYPE_p_U16);
  }
  arg2 = *argp2;
  
  result = (LLNetworkData *)((LLViewerObject const *)arg1)->getParameterEntry(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLNetworkData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setParameterEntry(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U16 arg2 ;
  LLNetworkData *arg3 = 0 ;
  bool arg4 ;
  U16 *argp2 ;
  bool result;
  
  SWIG_check_num_args("setParameterEntry",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setParameterEntry",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setParameterEntry",2,"U16");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setParameterEntry",3,"LLNetworkData const &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("setParameterEntry",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setParameterEntry",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U16,0))){
    SWIG_fail_ptr("LLViewerObject_setParameterEntry",2,SWIGTYPE_p_U16);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLNetworkData,0))){
    SWIG_fail_ptr("LLViewerObject_setParameterEntry",3,SWIGTYPE_p_LLNetworkData);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (bool)(arg1)->setParameterEntry(arg2,(LLNetworkData const &)*arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_getParameterEntryInUse(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U16 arg2 ;
  U16 *argp2 ;
  BOOL result;
  
  SWIG_check_num_args("getParameterEntryInUse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getParameterEntryInUse",1,"LLViewerObject const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getParameterEntryInUse",2,"U16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_getParameterEntryInUse",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U16,0))){
    SWIG_fail_ptr("LLViewerObject_getParameterEntryInUse",2,SWIGTYPE_p_U16);
  }
  arg2 = *argp2;
  
  result = ((LLViewerObject const *)arg1)->getParameterEntryInUse(arg2);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setParameterEntryInUse(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U16 arg2 ;
  BOOL arg3 ;
  bool arg4 ;
  U16 *argp2 ;
  BOOL *argp3 ;
  bool result;
  
  SWIG_check_num_args("setParameterEntryInUse",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setParameterEntryInUse",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setParameterEntryInUse",2,"U16");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setParameterEntryInUse",3,"BOOL");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("setParameterEntryInUse",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setParameterEntryInUse",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U16,0))){
    SWIG_fail_ptr("LLViewerObject_setParameterEntryInUse",2,SWIGTYPE_p_U16);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("LLViewerObject_setParameterEntryInUse",3,SWIGTYPE_p_BOOL);
  }
  arg3 = *argp3;
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (bool)(arg1)->setParameterEntryInUse(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_parameterChanged__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U16 arg2 ;
  bool arg3 ;
  U16 *argp2 ;
  
  SWIG_check_num_args("parameterChanged",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("parameterChanged",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("parameterChanged",2,"U16");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("parameterChanged",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_parameterChanged",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U16,0))){
    SWIG_fail_ptr("LLViewerObject_parameterChanged",2,SWIGTYPE_p_U16);
  }
  arg2 = *argp2;
  
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->parameterChanged(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_parameterChanged__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U16 arg2 ;
  LLNetworkData *arg3 = (LLNetworkData *) 0 ;
  BOOL arg4 ;
  bool arg5 ;
  U16 *argp2 ;
  BOOL *argp4 ;
  
  SWIG_check_num_args("parameterChanged",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("parameterChanged",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("parameterChanged",2,"U16");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("parameterChanged",3,"LLNetworkData *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("parameterChanged",4,"BOOL");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("parameterChanged",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_parameterChanged",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U16,0))){
    SWIG_fail_ptr("LLViewerObject_parameterChanged",2,SWIGTYPE_p_U16);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLNetworkData,0))){
    SWIG_fail_ptr("LLViewerObject_parameterChanged",3,SWIGTYPE_p_LLNetworkData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("LLViewerObject_parameterChanged",4,SWIGTYPE_p_BOOL);
  }
  arg4 = *argp4;
  
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->parameterChanged(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_parameterChanged(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_U16, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_LLViewerObject_parameterChanged__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_U16, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_LLNetworkData, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_BOOL, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_LLViewerObject_parameterChanged__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLViewerObject_parameterChanged'\n"
    "  Possible C/C++ prototypes are:\n"
    "    parameterChanged(LLViewerObject *,U16,bool)\n"
    "    parameterChanged(LLViewerObject *,U16,LLNetworkData *,BOOL,bool)\n");
  lua_error(L);return 0;
}


static int _wrap_LLViewerObject_resetChildrenPosition__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLVector3 *arg2 = 0 ;
  BOOL arg3 ;
  BOOL *argp3 ;
  
  SWIG_check_num_args("resetChildrenPosition",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("resetChildrenPosition",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("resetChildrenPosition",2,"LLVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("resetChildrenPosition",3,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_resetChildrenPosition",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_resetChildrenPosition",2,SWIGTYPE_p_LLVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("LLViewerObject_resetChildrenPosition",3,SWIGTYPE_p_BOOL);
  }
  arg3 = *argp3;
  
  (arg1)->resetChildrenPosition((LLVector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_resetChildrenPosition__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("resetChildrenPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("resetChildrenPosition",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("resetChildrenPosition",2,"LLVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_resetChildrenPosition",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLVector3,0))){
    SWIG_fail_ptr("LLViewerObject_resetChildrenPosition",2,SWIGTYPE_p_LLVector3);
  }
  
  (arg1)->resetChildrenPosition((LLVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_resetChildrenPosition(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLViewerObject_resetChildrenPosition__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLViewerObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_BOOL, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_LLViewerObject_resetChildrenPosition__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LLViewerObject_resetChildrenPosition'\n"
    "  Possible C/C++ prototypes are:\n"
    "    resetChildrenPosition(LLViewerObject *,LLVector3 const &,BOOL)\n"
    "    resetChildrenPosition(LLViewerObject *,LLVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LLViewerObject_resetChildrenRotationAndPosition(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  std::vector< LLQuaternion > *arg2 = 0 ;
  std::vector< LLVector3 > *arg3 = 0 ;
  
  SWIG_check_num_args("resetChildrenRotationAndPosition",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("resetChildrenRotationAndPosition",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("resetChildrenRotationAndPosition",2,"std::vector< LLQuaternion > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("resetChildrenRotationAndPosition",3,"std::vector< LLVector3 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_resetChildrenRotationAndPosition",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_LLQuaternion_t,0))){
    SWIG_fail_ptr("LLViewerObject_resetChildrenRotationAndPosition",2,SWIGTYPE_p_std__vectorT_LLQuaternion_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_LLVector3_t,0))){
    SWIG_fail_ptr("LLViewerObject_resetChildrenRotationAndPosition",3,SWIGTYPE_p_std__vectorT_LLVector3_t);
  }
  
  (arg1)->resetChildrenRotationAndPosition((std::vector< LLQuaternion > const &)*arg2,(std::vector< LLVector3 > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_saveUnselectedChildrenRotation(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  std::vector< LLQuaternion > *arg2 = 0 ;
  
  SWIG_check_num_args("saveUnselectedChildrenRotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("saveUnselectedChildrenRotation",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("saveUnselectedChildrenRotation",2,"std::vector< LLQuaternion > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_saveUnselectedChildrenRotation",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_LLQuaternion_t,0))){
    SWIG_fail_ptr("LLViewerObject_saveUnselectedChildrenRotation",2,SWIGTYPE_p_std__vectorT_LLQuaternion_t);
  }
  
  (arg1)->saveUnselectedChildrenRotation(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_saveUnselectedChildrenPosition(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  std::vector< LLVector3 > *arg2 = 0 ;
  
  SWIG_check_num_args("saveUnselectedChildrenPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("saveUnselectedChildrenPosition",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("saveUnselectedChildrenPosition",2,"std::vector< LLVector3 > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_saveUnselectedChildrenPosition",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_LLVector3_t,0))){
    SWIG_fail_ptr("LLViewerObject_saveUnselectedChildrenPosition",2,SWIGTYPE_p_std__vectorT_LLVector3_t);
  }
  
  (arg1)->saveUnselectedChildrenPosition(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_mUnselectedChildrenPositions_set(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  std::vector< LLVector3 > arg2 ;
  std::vector< LLVector3 > *argp2 ;
  
  SWIG_check_num_args("mUnselectedChildrenPositions",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mUnselectedChildrenPositions",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mUnselectedChildrenPositions",2,"std::vector< LLVector3 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_mUnselectedChildrenPositions_set",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_LLVector3_t,0))){
    SWIG_fail_ptr("LLViewerObject_mUnselectedChildrenPositions_set",2,SWIGTYPE_p_std__vectorT_LLVector3_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->mUnselectedChildrenPositions = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_mUnselectedChildrenPositions_get(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  std::vector< LLVector3 > result;
  
  SWIG_check_num_args("mUnselectedChildrenPositions",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mUnselectedChildrenPositions",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_mUnselectedChildrenPositions_get",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result =  ((arg1)->mUnselectedChildrenPositions);
  {
    std::vector< LLVector3 > * resultptr = new std::vector< LLVector3 >((const std::vector< LLVector3 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_LLVector3_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_mID_set(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLUUID arg2 ;
  LLUUID *argp2 ;
  
  SWIG_check_num_args("mID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mID",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mID",2,"LLUUID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_mID_set",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_LLUUID,0))){
    SWIG_fail_ptr("LLViewerObject_mID_set",2,SWIGTYPE_p_LLUUID);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->mID = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_mID_get(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLUUID result;
  
  SWIG_check_num_args("mID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mID",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_mID_get",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result =  ((arg1)->mID);
  {
    LLUUID * resultptr = new LLUUID((const LLUUID &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLUUID,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_mLocalID_set(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U32 arg2 ;
  U32 *argp2 ;
  
  SWIG_check_num_args("mLocalID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mLocalID",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mLocalID",2,"U32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_mLocalID_set",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U32,0))){
    SWIG_fail_ptr("LLViewerObject_mLocalID_set",2,SWIGTYPE_p_U32);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->mLocalID = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_mLocalID_get(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U32 result;
  
  SWIG_check_num_args("mLocalID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mLocalID",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_mLocalID_get",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result =  ((arg1)->mLocalID);
  {
    U32 * resultptr = new U32((const U32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_U32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_mTotalCRC_set(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U32 arg2 ;
  U32 *argp2 ;
  
  SWIG_check_num_args("mTotalCRC",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mTotalCRC",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mTotalCRC",2,"U32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_mTotalCRC_set",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U32,0))){
    SWIG_fail_ptr("LLViewerObject_mTotalCRC_set",2,SWIGTYPE_p_U32);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->mTotalCRC = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_mTotalCRC_get(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U32 result;
  
  SWIG_check_num_args("mTotalCRC",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mTotalCRC",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_mTotalCRC_get",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result =  ((arg1)->mTotalCRC);
  {
    U32 * resultptr = new U32((const U32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_U32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_mTEImages_set(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLPointer< LLViewerImage > *arg2 = (LLPointer< LLViewerImage > *) 0 ;
  
  SWIG_check_num_args("mTEImages",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mTEImages",1,"LLViewerObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mTEImages",2,"LLPointer< LLViewerImage > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_mTEImages_set",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLPointerT_LLViewerImage_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("LLViewerObject_mTEImages_set",2,SWIGTYPE_p_LLPointerT_LLViewerImage_t);
  }
  
  if (arg1) (arg1)->mTEImages = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_mTEImages_get(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLPointer< LLViewerImage > *result = 0 ;
  
  SWIG_check_num_args("mTEImages",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mTEImages",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_mTEImages_get",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = (LLPointer< LLViewerImage > *) ((arg1)->mTEImages);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLPointerT_LLViewerImage_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_mGLName_set(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U32 arg2 ;
  U32 *argp2 ;
  
  SWIG_check_num_args("mGLName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mGLName",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mGLName",2,"U32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_mGLName_set",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U32,0))){
    SWIG_fail_ptr("LLViewerObject_mGLName_set",2,SWIGTYPE_p_U32);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->mGLName = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_mGLName_get(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U32 result;
  
  SWIG_check_num_args("mGLName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mGLName",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_mGLName_get",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result =  ((arg1)->mGLName);
  {
    U32 * resultptr = new U32((const U32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_U32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_mbCanSelect_set(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL arg2 ;
  BOOL *argp2 ;
  
  SWIG_check_num_args("mbCanSelect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mbCanSelect",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mbCanSelect",2,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_mbCanSelect_set",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("LLViewerObject_mbCanSelect_set",2,SWIGTYPE_p_BOOL);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->mbCanSelect = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_mbCanSelect_get(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("mbCanSelect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mbCanSelect",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_mbCanSelect_get",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result =  ((arg1)->mbCanSelect);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_mFlags_set(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U32 arg2 ;
  U32 *argp2 ;
  
  SWIG_check_num_args("mFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mFlags",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mFlags",2,"U32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_mFlags_set",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U32,0))){
    SWIG_fail_ptr("LLViewerObject_mFlags_set",2,SWIGTYPE_p_U32);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->mFlags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_mFlags_get(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  U32 result;
  
  SWIG_check_num_args("mFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mFlags",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_mFlags_get",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result =  ((arg1)->mFlags);
  {
    U32 * resultptr = new U32((const U32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_U32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_mDrawable_set(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLPointer< LLDrawable > *arg2 = (LLPointer< LLDrawable > *) 0 ;
  
  SWIG_check_num_args("mDrawable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mDrawable",1,"LLViewerObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mDrawable",2,"LLPointer< LLDrawable > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_mDrawable_set",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLPointerT_LLDrawable_t,0))){
    SWIG_fail_ptr("LLViewerObject_mDrawable_set",2,SWIGTYPE_p_LLPointerT_LLDrawable_t);
  }
  
  if (arg1) (arg1)->mDrawable = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_mDrawable_get(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLPointer< LLDrawable > *result = 0 ;
  
  SWIG_check_num_args("mDrawable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mDrawable",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_mDrawable_get",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = (LLPointer< LLDrawable > *)& ((arg1)->mDrawable);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLPointerT_LLDrawable_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_mCreateSelected_set(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL arg2 ;
  BOOL *argp2 ;
  
  SWIG_check_num_args("mCreateSelected",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mCreateSelected",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mCreateSelected",2,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_mCreateSelected_set",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("LLViewerObject_mCreateSelected_set",2,SWIGTYPE_p_BOOL);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->mCreateSelected = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_mCreateSelected_get(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("mCreateSelected",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mCreateSelected",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_mCreateSelected_get",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result =  ((arg1)->mCreateSelected);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_mRenderMedia_set(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL arg2 ;
  BOOL *argp2 ;
  
  SWIG_check_num_args("mRenderMedia",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mRenderMedia",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mRenderMedia",2,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_mRenderMedia_set",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("LLViewerObject_mRenderMedia_set",2,SWIGTYPE_p_BOOL);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->mRenderMedia = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_mRenderMedia_get(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("mRenderMedia",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mRenderMedia",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_mRenderMedia_get",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result =  ((arg1)->mRenderMedia);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_mBestUpdatePrecision_set(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  S32 arg2 ;
  S32 *argp2 ;
  
  SWIG_check_num_args("mBestUpdatePrecision",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mBestUpdatePrecision",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mBestUpdatePrecision",2,"S32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_mBestUpdatePrecision_set",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_S32,0))){
    SWIG_fail_ptr("LLViewerObject_mBestUpdatePrecision_set",2,SWIGTYPE_p_S32);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->mBestUpdatePrecision = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_mBestUpdatePrecision_get(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  S32 result;
  
  SWIG_check_num_args("mBestUpdatePrecision",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mBestUpdatePrecision",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_mBestUpdatePrecision_get",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result =  ((arg1)->mBestUpdatePrecision);
  {
    S32 * resultptr = new S32((const S32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_S32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_mText_set(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLPointer< LLHUDText > arg2 ;
  LLPointer< LLHUDText > *argp2 ;
  
  SWIG_check_num_args("mText",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mText",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mText",2,"LLPointer< LLHUDText >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_mText_set",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_LLPointerT_LLHUDText_t,0))){
    SWIG_fail_ptr("LLViewerObject_mText_set",2,SWIGTYPE_p_LLPointerT_LLHUDText_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->mText = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_mText_get(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLPointer< LLHUDText > result;
  
  SWIG_check_num_args("mText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mText",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_mText_get",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result =  ((arg1)->mText);
  {
    LLPointer< LLHUDText > * resultptr = new LLPointer< LLHUDText >((const LLPointer< LLHUDText > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLPointerT_LLHUDText_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_mIcon_set(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLPointer< LLHUDIcon > arg2 ;
  LLPointer< LLHUDIcon > *argp2 ;
  
  SWIG_check_num_args("mIcon",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mIcon",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mIcon",2,"LLPointer< LLHUDIcon >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_mIcon_set",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_LLPointerT_LLHUDIcon_t,0))){
    SWIG_fail_ptr("LLViewerObject_mIcon_set",2,SWIGTYPE_p_LLPointerT_LLHUDIcon_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->mIcon = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_mIcon_get(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLPointer< LLHUDIcon > result;
  
  SWIG_check_num_args("mIcon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mIcon",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_mIcon_get",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result =  ((arg1)->mIcon);
  {
    LLPointer< LLHUDIcon > * resultptr = new LLPointer< LLHUDIcon >((const LLPointer< LLHUDIcon > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LLPointerT_LLHUDIcon_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_sUseSharedDrawables_set(lua_State* L) {
  int SWIG_arg = 0;
  BOOL arg1 ;
  BOOL *argp1 ;
  
  SWIG_check_num_args("LLViewerObject::sUseSharedDrawables",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LLViewerObject::sUseSharedDrawables",1,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("LLViewerObject_sUseSharedDrawables_set",1,SWIGTYPE_p_BOOL);
  }
  arg1 = *argp1;
  
  LLViewerObject::sUseSharedDrawables = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_sUseSharedDrawables_get(lua_State* L) {
  int SWIG_arg = 0;
  BOOL result;
  
  SWIG_check_num_args("LLViewerObject::sUseSharedDrawables",0,0)
  result = LLViewerObject::sUseSharedDrawables;
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_setParticleSource(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLPartSysData *arg2 = 0 ;
  LLUUID *arg3 = 0 ;
  
  SWIG_check_num_args("setParticleSource",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setParticleSource",1,"LLViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setParticleSource",2,"LLPartSysData const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setParticleSource",3,"LLUUID const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_setParticleSource",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLPartSysData,0))){
    SWIG_fail_ptr("LLViewerObject_setParticleSource",2,SWIGTYPE_p_LLPartSysData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLUUID,0))){
    SWIG_fail_ptr("LLViewerObject_setParticleSource",3,SWIGTYPE_p_LLUUID);
  }
  
  (arg1)->setParticleSource((LLPartSysData const &)*arg2,(LLUUID const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_deleteParticleSource(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  
  SWIG_check_num_args("deleteParticleSource",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("deleteParticleSource",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_deleteParticleSource",1,SWIGTYPE_p_LLViewerObject);
  }
  
  (arg1)->deleteParticleSource();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_mPartSourcep_set(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLPointer< LLViewerPartSourceScript > *arg2 = (LLPointer< LLViewerPartSourceScript > *) 0 ;
  
  SWIG_check_num_args("mPartSourcep",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mPartSourcep",1,"LLViewerObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mPartSourcep",2,"LLPointer< LLViewerPartSourceScript > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_mPartSourcep_set",1,SWIGTYPE_p_LLViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLPointerT_LLViewerPartSourceScript_t,0))){
    SWIG_fail_ptr("LLViewerObject_mPartSourcep_set",2,SWIGTYPE_p_LLPointerT_LLViewerPartSourceScript_t);
  }
  
  if (arg1) (arg1)->mPartSourcep = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObject_mPartSourcep_get(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  LLPointer< LLViewerPartSourceScript > *result = 0 ;
  
  SWIG_check_num_args("mPartSourcep",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mPartSourcep",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("LLViewerObject_mPartSourcep_get",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = (LLPointer< LLViewerPartSourceScript > *)& ((arg1)->mPartSourcep);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLPointerT_LLViewerPartSourceScript_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_LLViewerObject_methods[] = {
    {"markDead", _wrap_LLViewerObject_markDead}, 
    {"isDead", _wrap_LLViewerObject_isDead}, 
    {"isOrphaned", _wrap_LLViewerObject_isOrphaned}, 
    {"isParticleSource", _wrap_LLViewerObject_isParticleSource}, 
    {"addNVPair", _wrap_LLViewerObject_addNVPair}, 
    {"removeNVPair", _wrap_LLViewerObject_removeNVPair}, 
    {"getNVPair", _wrap_LLViewerObject_getNVPair}, 
    {"idleUpdate", _wrap_LLViewerObject_idleUpdate}, 
    {"processUpdateMessage", _wrap_LLViewerObject_processUpdateMessage}, 
    {"isActive", _wrap_LLViewerObject_isActive}, 
    {"onActiveList", _wrap_LLViewerObject_onActiveList}, 
    {"setOnActiveList", _wrap_LLViewerObject_setOnActiveList}, 
    {"isAttachment", _wrap_LLViewerObject_isAttachment}, 
    {"isHUDAttachment", _wrap_LLViewerObject_isHUDAttachment}, 
    {"updateRadius", _wrap_LLViewerObject_updateRadius}, 
    {"getVObjRadius", _wrap_LLViewerObject_getVObjRadius}, 
    {"isJointChild", _wrap_LLViewerObject_isJointChild}, 
    {"getJointType", _wrap_LLViewerObject_getJointType}, 
    {"getSubParent", _wrap_LLViewerObject_getSubParent}, 
    {"setPixelAreaAndAngle", _wrap_LLViewerObject_setPixelAreaAndAngle}, 
    {"getNumVertices", _wrap_LLViewerObject_getNumVertices}, 
    {"getNumIndices", _wrap_LLViewerObject_getNumIndices}, 
    {"getNumFaces", _wrap_LLViewerObject_getNumFaces}, 
    {"updateTextures", _wrap_LLViewerObject_updateTextures}, 
    {"boostTexturePriority", _wrap_LLViewerObject_boostTexturePriority}, 
    {"createDrawable", _wrap_LLViewerObject_createDrawable}, 
    {"updateGeometry", _wrap_LLViewerObject_updateGeometry}, 
    {"updateFaceSize", _wrap_LLViewerObject_updateFaceSize}, 
    {"updateLOD", _wrap_LLViewerObject_updateLOD}, 
    {"setDrawableParent", _wrap_LLViewerObject_setDrawableParent}, 
    {"getRotTime", _wrap_LLViewerObject_getRotTime}, 
    {"resetRot", _wrap_LLViewerObject_resetRot}, 
    {"applyAngularVelocity", _wrap_LLViewerObject_applyAngularVelocity}, 
    {"setLineWidthForWindowSize", _wrap_LLViewerObject_setLineWidthForWindowSize}, 
    {"getRegion", _wrap_LLViewerObject_getRegion}, 
    {"isSelected", _wrap_LLViewerObject_isSelected}, 
    {"setSelected", _wrap_LLViewerObject_setSelected}, 
    {"getID", _wrap_LLViewerObject_getID}, 
    {"getLocalID", _wrap_LLViewerObject_getLocalID}, 
    {"getCRC", _wrap_LLViewerObject_getCRC}, 
    {"isFlexible", _wrap_LLViewerObject_isFlexible}, 
    {"isSculpted", _wrap_LLViewerObject_isSculpted}, 
    {"isOverAgentOwnedLand", _wrap_LLViewerObject_isOverAgentOwnedLand}, 
    {"isOverGroupOwnedLand", _wrap_LLViewerObject_isOverGroupOwnedLand}, 
    {"setParent", _wrap_LLViewerObject_setParent}, 
    {"addChild", _wrap_LLViewerObject_addChild}, 
    {"removeChild", _wrap_LLViewerObject_removeChild}, 
    {"getChildren", _wrap_LLViewerObject_getChildren}, 
    {"numChildren", _wrap_LLViewerObject_numChildren}, 
    {"addThisAndAllChildren", _wrap_LLViewerObject_addThisAndAllChildren}, 
    {"addThisAndNonJointChildren", _wrap_LLViewerObject_addThisAndNonJointChildren}, 
    {"isChild", _wrap_LLViewerObject_isChild}, 
    {"isSeat", _wrap_LLViewerObject_isSeat}, 
    {"lineSegmentIntersect", _wrap_LLViewerObject_lineSegmentIntersect}, 
    {"lineSegmentBoundingBox", _wrap_LLViewerObject_lineSegmentBoundingBox}, 
    {"getPositionGlobal", _wrap_LLViewerObject_getPositionGlobal}, 
    {"getPositionRegion", _wrap_LLViewerObject_getPositionRegion}, 
    {"getPositionEdit", _wrap_LLViewerObject_getPositionEdit}, 
    {"getPositionAgent", _wrap_LLViewerObject_getPositionAgent}, 
    {"getRenderPosition", _wrap_LLViewerObject_getRenderPosition}, 
    {"getPivotPositionAgent", _wrap_LLViewerObject_getPivotPositionAgent}, 
    {"getRootEdit", _wrap_LLViewerObject_getRootEdit}, 
    {"getRotationRegion", _wrap_LLViewerObject_getRotationRegion}, 
    {"getRotationEdit", _wrap_LLViewerObject_getRotationEdit}, 
    {"getRenderRotation", _wrap_LLViewerObject_getRenderRotation}, 
    {"getRenderMatrix", _wrap_LLViewerObject_getRenderMatrix}, 
    {"setPosition", _wrap_LLViewerObject_setPosition}, 
    {"setPositionGlobal", _wrap_LLViewerObject_setPositionGlobal}, 
    {"setPositionRegion", _wrap_LLViewerObject_setPositionRegion}, 
    {"setPositionEdit", _wrap_LLViewerObject_setPositionEdit}, 
    {"setPositionAgent", _wrap_LLViewerObject_setPositionAgent}, 
    {"setPositionParent", _wrap_LLViewerObject_setPositionParent}, 
    {"setPositionAbsoluteGlobal", _wrap_LLViewerObject_setPositionAbsoluteGlobal}, 
    {"getWorldMatrix", _wrap_LLViewerObject_getWorldMatrix}, 
    {"setRotation", _wrap_LLViewerObject_setRotation}, 
    {"sendRotationUpdate", _wrap_LLViewerObject_sendRotationUpdate}, 
    {"setNumTEs", _wrap_LLViewerObject_setNumTEs}, 
    {"setTE", _wrap_LLViewerObject_setTE}, 
    {"setTETexture", _wrap_LLViewerObject_setTETexture}, 
    {"setTETextureCore", _wrap_LLViewerObject_setTETextureCore}, 
    {"setTEColor", _wrap_LLViewerObject_setTEColor}, 
    {"setTEScale", _wrap_LLViewerObject_setTEScale}, 
    {"setTEScaleS", _wrap_LLViewerObject_setTEScaleS}, 
    {"setTEScaleT", _wrap_LLViewerObject_setTEScaleT}, 
    {"setTEOffset", _wrap_LLViewerObject_setTEOffset}, 
    {"setTEOffsetS", _wrap_LLViewerObject_setTEOffsetS}, 
    {"setTEOffsetT", _wrap_LLViewerObject_setTEOffsetT}, 
    {"setTERotation", _wrap_LLViewerObject_setTERotation}, 
    {"setTEBumpmap", _wrap_LLViewerObject_setTEBumpmap}, 
    {"setTETexGen", _wrap_LLViewerObject_setTETexGen}, 
    {"setTEMediaTexGen", _wrap_LLViewerObject_setTEMediaTexGen}, 
    {"setTEShiny", _wrap_LLViewerObject_setTEShiny}, 
    {"setTEFullbright", _wrap_LLViewerObject_setTEFullbright}, 
    {"setTEMediaFlags", _wrap_LLViewerObject_setTEMediaFlags}, 
    {"setTEGlow", _wrap_LLViewerObject_setTEGlow}, 
    {"setMaterial", _wrap_LLViewerObject_setMaterial}, 
    {"setTEImage", _wrap_LLViewerObject_setTEImage}, 
    {"getTEImage", _wrap_LLViewerObject_getTEImage}, 
    {"fitFaceTexture", _wrap_LLViewerObject_fitFaceTexture}, 
    {"sendTEUpdate", _wrap_LLViewerObject_sendTEUpdate}, 
    {"setScale", _wrap_LLViewerObject_setScale}, 
    {"sendShapeUpdate", _wrap_LLViewerObject_sendShapeUpdate}, 
    {"getState", _wrap_LLViewerObject_getState}, 
    {"getAppAngle", _wrap_LLViewerObject_getAppAngle}, 
    {"getPixelArea", _wrap_LLViewerObject_getPixelArea}, 
    {"setPixelArea", _wrap_LLViewerObject_setPixelArea}, 
    {"getMaxScale", _wrap_LLViewerObject_getMaxScale}, 
    {"getMidScale", _wrap_LLViewerObject_getMidScale}, 
    {"getMinScale", _wrap_LLViewerObject_getMinScale}, 
    {"setAttachedSound", _wrap_LLViewerObject_setAttachedSound}, 
    {"adjustAudioGain", _wrap_LLViewerObject_adjustAudioGain}, 
    {"clearAttachedSound", _wrap_LLViewerObject_clearAttachedSound}, 
    {"getAudioSource", _wrap_LLViewerObject_getAudioSource}, 
    {"isAudioSource", _wrap_LLViewerObject_isAudioSource}, 
    {"getMediaType", _wrap_LLViewerObject_getMediaType}, 
    {"setMediaType", _wrap_LLViewerObject_setMediaType}, 
    {"getMediaURL", _wrap_LLViewerObject_getMediaURL}, 
    {"setMediaURL", _wrap_LLViewerObject_setMediaURL}, 
    {"getMediaPassedWhitelist", _wrap_LLViewerObject_getMediaPassedWhitelist}, 
    {"setMediaPassedWhitelist", _wrap_LLViewerObject_setMediaPassedWhitelist}, 
    {"sendMaterialUpdate", _wrap_LLViewerObject_sendMaterialUpdate}, 
    {"setCanSelect", _wrap_LLViewerObject_setCanSelect}, 
    {"setDebugText", _wrap_LLViewerObject_setDebugText}, 
    {"setIcon", _wrap_LLViewerObject_setIcon}, 
    {"clearIcon", _wrap_LLViewerObject_clearIcon}, 
    {"markForUpdate", _wrap_LLViewerObject_markForUpdate}, 
    {"updateVolume", _wrap_LLViewerObject_updateVolume}, 
    {"updateSpatialExtents", _wrap_LLViewerObject_updateSpatialExtents}, 
    {"getBinRadius", _wrap_LLViewerObject_getBinRadius}, 
    {"getBoundingBoxAgent", _wrap_LLViewerObject_getBoundingBoxAgent}, 
    {"updatePositionCaches", _wrap_LLViewerObject_updatePositionCaches}, 
    {"updateText", _wrap_LLViewerObject_updateText}, 
    {"updateDrawable", _wrap_LLViewerObject_updateDrawable}, 
    {"setDrawableState", _wrap_LLViewerObject_setDrawableState}, 
    {"clearDrawableState", _wrap_LLViewerObject_clearDrawableState}, 
    {"onShift", _wrap_LLViewerObject_onShift}, 
    {"registerInventoryListener", _wrap_LLViewerObject_registerInventoryListener}, 
    {"removeInventoryListener", _wrap_LLViewerObject_removeInventoryListener}, 
    {"isInventoryPending", _wrap_LLViewerObject_isInventoryPending}, 
    {"clearInventoryListeners", _wrap_LLViewerObject_clearInventoryListeners}, 
    {"requestInventory", _wrap_LLViewerObject_requestInventory}, 
    {"fetchInventoryFromServer", _wrap_LLViewerObject_fetchInventoryFromServer}, 
    {"removeInventory", _wrap_LLViewerObject_removeInventory}, 
    {"updateInventory", _wrap_LLViewerObject_updateInventory}, 
    {"updateInventoryLocal", _wrap_LLViewerObject_updateInventoryLocal}, 
    {"getInventoryObject", _wrap_LLViewerObject_getInventoryObject}, 
    {"getInventoryContents", _wrap_LLViewerObject_getInventoryContents}, 
    {"getInventoryRoot", _wrap_LLViewerObject_getInventoryRoot}, 
    {"getInventoryItemByAsset", _wrap_LLViewerObject_getInventoryItemByAsset}, 
    {"getInventorySerial", _wrap_LLViewerObject_getInventorySerial}, 
    {"updateViewerInventoryAsset", _wrap_LLViewerObject_updateViewerInventoryAsset}, 
    {"dirtyInventory", _wrap_LLViewerObject_dirtyInventory}, 
    {"isInventoryDirty", _wrap_LLViewerObject_isInventoryDirty}, 
    {"saveScript", _wrap_LLViewerObject_saveScript}, 
    {"moveInventory", _wrap_LLViewerObject_moveInventory}, 
    {"countInventoryContents", _wrap_LLViewerObject_countInventoryContents}, 
    {"permAnyOwner", _wrap_LLViewerObject_permAnyOwner}, 
    {"permYouOwner", _wrap_LLViewerObject_permYouOwner}, 
    {"permGroupOwner", _wrap_LLViewerObject_permGroupOwner}, 
    {"permOwnerModify", _wrap_LLViewerObject_permOwnerModify}, 
    {"permModify", _wrap_LLViewerObject_permModify}, 
    {"permCopy", _wrap_LLViewerObject_permCopy}, 
    {"permMove", _wrap_LLViewerObject_permMove}, 
    {"permTransfer", _wrap_LLViewerObject_permTransfer}, 
    {"usePhysics", _wrap_LLViewerObject_usePhysics}, 
    {"flagScripted", _wrap_LLViewerObject_flagScripted}, 
    {"flagHandleTouch", _wrap_LLViewerObject_flagHandleTouch}, 
    {"flagTakesMoney", _wrap_LLViewerObject_flagTakesMoney}, 
    {"flagPhantom", _wrap_LLViewerObject_flagPhantom}, 
    {"flagInventoryEmpty", _wrap_LLViewerObject_flagInventoryEmpty}, 
    {"flagCastShadows", _wrap_LLViewerObject_flagCastShadows}, 
    {"flagAllowInventoryAdd", _wrap_LLViewerObject_flagAllowInventoryAdd}, 
    {"flagTemporary", _wrap_LLViewerObject_flagTemporary}, 
    {"flagTemporaryOnRez", _wrap_LLViewerObject_flagTemporaryOnRez}, 
    {"flagAnimSource", _wrap_LLViewerObject_flagAnimSource}, 
    {"flagCameraSource", _wrap_LLViewerObject_flagCameraSource}, 
    {"flagCameraDecoupled", _wrap_LLViewerObject_flagCameraDecoupled}, 
    {"getIncludeInSearch", _wrap_LLViewerObject_getIncludeInSearch}, 
    {"setIncludeInSearch", _wrap_LLViewerObject_setIncludeInSearch}, 
    {"allowOpen", _wrap_LLViewerObject_allowOpen}, 
    {"setClickAction", _wrap_LLViewerObject_setClickAction}, 
    {"getClickAction", _wrap_LLViewerObject_getClickAction}, 
    {"specialHoverCursor", _wrap_LLViewerObject_specialHoverCursor}, 
    {"setRegion", _wrap_LLViewerObject_setRegion}, 
    {"updateRegion", _wrap_LLViewerObject_updateRegion}, 
    {"updateFlags", _wrap_LLViewerObject_updateFlags}, 
    {"setFlags", _wrap_LLViewerObject_setFlags}, 
    {"dump", _wrap_LLViewerObject_dump}, 
    {"printNameValuePairs", _wrap_LLViewerObject_printNameValuePairs}, 
    {"getLOD", _wrap_LLViewerObject_getLOD}, 
    {"getPartitionType", _wrap_LLViewerObject_getPartitionType}, 
    {"dirtySpatialGroup", _wrap_LLViewerObject_dirtySpatialGroup}, 
    {"dirtyMesh", _wrap_LLViewerObject_dirtyMesh}, 
    {"getParameterEntry", _wrap_LLViewerObject_getParameterEntry}, 
    {"setParameterEntry", _wrap_LLViewerObject_setParameterEntry}, 
    {"getParameterEntryInUse", _wrap_LLViewerObject_getParameterEntryInUse}, 
    {"setParameterEntryInUse", _wrap_LLViewerObject_setParameterEntryInUse}, 
    {"parameterChanged", _wrap_LLViewerObject_parameterChanged}, 
    {"resetChildrenPosition", _wrap_LLViewerObject_resetChildrenPosition}, 
    {"resetChildrenRotationAndPosition", _wrap_LLViewerObject_resetChildrenRotationAndPosition}, 
    {"saveUnselectedChildrenRotation", _wrap_LLViewerObject_saveUnselectedChildrenRotation}, 
    {"saveUnselectedChildrenPosition", _wrap_LLViewerObject_saveUnselectedChildrenPosition}, 
    {"setParticleSource", _wrap_LLViewerObject_setParticleSource}, 
    {"deleteParticleSource", _wrap_LLViewerObject_deleteParticleSource}, 
    {0,0}
};
static swig_lua_attribute swig_LLViewerObject_attributes[] = {
    { "mUnselectedChildrenPositions", _wrap_LLViewerObject_mUnselectedChildrenPositions_get, _wrap_LLViewerObject_mUnselectedChildrenPositions_set},
    { "mID", _wrap_LLViewerObject_mID_get, _wrap_LLViewerObject_mID_set},
    { "mLocalID", _wrap_LLViewerObject_mLocalID_get, _wrap_LLViewerObject_mLocalID_set},
    { "mTotalCRC", _wrap_LLViewerObject_mTotalCRC_get, _wrap_LLViewerObject_mTotalCRC_set},
    { "mTEImages", _wrap_LLViewerObject_mTEImages_get, _wrap_LLViewerObject_mTEImages_set},
    { "mGLName", _wrap_LLViewerObject_mGLName_get, _wrap_LLViewerObject_mGLName_set},
    { "mbCanSelect", _wrap_LLViewerObject_mbCanSelect_get, _wrap_LLViewerObject_mbCanSelect_set},
    { "mFlags", _wrap_LLViewerObject_mFlags_get, _wrap_LLViewerObject_mFlags_set},
    { "mDrawable", _wrap_LLViewerObject_mDrawable_get, _wrap_LLViewerObject_mDrawable_set},
    { "mCreateSelected", _wrap_LLViewerObject_mCreateSelected_get, _wrap_LLViewerObject_mCreateSelected_set},
    { "mRenderMedia", _wrap_LLViewerObject_mRenderMedia_get, _wrap_LLViewerObject_mRenderMedia_set},
    { "mBestUpdatePrecision", _wrap_LLViewerObject_mBestUpdatePrecision_get, _wrap_LLViewerObject_mBestUpdatePrecision_set},
    { "mText", _wrap_LLViewerObject_mText_get, _wrap_LLViewerObject_mText_set},
    { "mIcon", _wrap_LLViewerObject_mIcon_get, _wrap_LLViewerObject_mIcon_set},
    { "mPartSourcep", _wrap_LLViewerObject_mPartSourcep_get, _wrap_LLViewerObject_mPartSourcep_set},
    {0,0,0}
};
static swig_lua_class *swig_LLViewerObject_bases[] = {0,0};
static const char *swig_LLViewerObject_base_names[] = {"LLPrimitive *",0};
static swig_lua_class _wrap_class_LLViewerObject = { "LLViewerObject", &SWIGTYPE_p_LLViewerObject,_wrap_new_LLViewerObject,0, swig_LLViewerObject_methods, swig_LLViewerObject_attributes, swig_LLViewerObject_bases, swig_LLViewerObject_base_names };

static int _wrap_new_LLViewerObjectMedia(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObjectMedia *result = 0 ;
  
  SWIG_check_num_args("LLViewerObjectMedia",0,0)
  result = (LLViewerObjectMedia *)new LLViewerObjectMedia();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLViewerObjectMedia,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObjectMedia_mMediaURL_set(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObjectMedia *arg1 = (LLViewerObjectMedia *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("mMediaURL",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mMediaURL",1,"LLViewerObjectMedia *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mMediaURL",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObjectMedia,0))){
    SWIG_fail_ptr("LLViewerObjectMedia_mMediaURL_set",1,SWIGTYPE_p_LLViewerObjectMedia);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("LLViewerObjectMedia_mMediaURL_set",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->mMediaURL = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObjectMedia_mMediaURL_get(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObjectMedia *arg1 = (LLViewerObjectMedia *) 0 ;
  std::string result;
  
  SWIG_check_num_args("mMediaURL",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mMediaURL",1,"LLViewerObjectMedia *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObjectMedia,0))){
    SWIG_fail_ptr("LLViewerObjectMedia_mMediaURL_get",1,SWIGTYPE_p_LLViewerObjectMedia);
  }
  
  result =  ((arg1)->mMediaURL);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObjectMedia_mPassedWhitelist_set(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObjectMedia *arg1 = (LLViewerObjectMedia *) 0 ;
  BOOL arg2 ;
  BOOL *argp2 ;
  
  SWIG_check_num_args("mPassedWhitelist",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mPassedWhitelist",1,"LLViewerObjectMedia *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mPassedWhitelist",2,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObjectMedia,0))){
    SWIG_fail_ptr("LLViewerObjectMedia_mPassedWhitelist_set",1,SWIGTYPE_p_LLViewerObjectMedia);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("LLViewerObjectMedia_mPassedWhitelist_set",2,SWIGTYPE_p_BOOL);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->mPassedWhitelist = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObjectMedia_mPassedWhitelist_get(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObjectMedia *arg1 = (LLViewerObjectMedia *) 0 ;
  BOOL result;
  
  SWIG_check_num_args("mPassedWhitelist",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mPassedWhitelist",1,"LLViewerObjectMedia *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObjectMedia,0))){
    SWIG_fail_ptr("LLViewerObjectMedia_mPassedWhitelist_get",1,SWIGTYPE_p_LLViewerObjectMedia);
  }
  
  result =  ((arg1)->mPassedWhitelist);
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObjectMedia_mMediaType_set(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObjectMedia *arg1 = (LLViewerObjectMedia *) 0 ;
  U8 arg2 ;
  U8 *argp2 ;
  
  SWIG_check_num_args("mMediaType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mMediaType",1,"LLViewerObjectMedia *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mMediaType",2,"U8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObjectMedia,0))){
    SWIG_fail_ptr("LLViewerObjectMedia_mMediaType_set",1,SWIGTYPE_p_LLViewerObjectMedia);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_U8,0))){
    SWIG_fail_ptr("LLViewerObjectMedia_mMediaType_set",2,SWIGTYPE_p_U8);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->mMediaType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLViewerObjectMedia_mMediaType_get(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObjectMedia *arg1 = (LLViewerObjectMedia *) 0 ;
  U8 result;
  
  SWIG_check_num_args("mMediaType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mMediaType",1,"LLViewerObjectMedia *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObjectMedia,0))){
    SWIG_fail_ptr("LLViewerObjectMedia_mMediaType_get",1,SWIGTYPE_p_LLViewerObjectMedia);
  }
  
  result =  ((arg1)->mMediaType);
  {
    U8 * resultptr = new U8((const U8 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_U8,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LLViewerObjectMedia(void *obj) {
LLViewerObjectMedia *arg1 = (LLViewerObjectMedia *) obj;
delete arg1;
}
static swig_lua_method swig_LLViewerObjectMedia_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_LLViewerObjectMedia_attributes[] = {
    { "mMediaURL", _wrap_LLViewerObjectMedia_mMediaURL_get, _wrap_LLViewerObjectMedia_mMediaURL_set},
    { "mPassedWhitelist", _wrap_LLViewerObjectMedia_mPassedWhitelist_get, _wrap_LLViewerObjectMedia_mPassedWhitelist_set},
    { "mMediaType", _wrap_LLViewerObjectMedia_mMediaType_get, _wrap_LLViewerObjectMedia_mMediaType_set},
    {0,0,0}
};
static swig_lua_class *swig_LLViewerObjectMedia_bases[] = {0};
static const char *swig_LLViewerObjectMedia_base_names[] = {0};
static swig_lua_class _wrap_class_LLViewerObjectMedia = { "LLViewerObjectMedia", &SWIGTYPE_p_LLViewerObjectMedia,_wrap_new_LLViewerObjectMedia, swig_delete_LLViewerObjectMedia, swig_LLViewerObjectMedia_methods, swig_LLViewerObjectMedia_attributes, swig_LLViewerObjectMedia_bases, swig_LLViewerObjectMedia_base_names };

static int _wrap_LLAlphaObject_getPartSize(lua_State* L) {
  int SWIG_arg = 0;
  LLAlphaObject *arg1 = (LLAlphaObject *) 0 ;
  S32 arg2 ;
  S32 *argp2 ;
  F32 result;
  
  SWIG_check_num_args("getPartSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPartSize",1,"LLAlphaObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getPartSize",2,"S32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLAlphaObject,0))){
    SWIG_fail_ptr("LLAlphaObject_getPartSize",1,SWIGTYPE_p_LLAlphaObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_S32,0))){
    SWIG_fail_ptr("LLAlphaObject_getPartSize",2,SWIGTYPE_p_S32);
  }
  arg2 = *argp2;
  
  result = (arg1)->getPartSize(arg2);
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLAlphaObject_getGeometry(lua_State* L) {
  int SWIG_arg = 0;
  LLAlphaObject *arg1 = (LLAlphaObject *) 0 ;
  S32 arg2 ;
  LLStrider< LLVector3 > *arg3 = 0 ;
  LLStrider< LLVector3 > *arg4 = 0 ;
  LLStrider< LLVector2 > *arg5 = 0 ;
  LLStrider< LLColor4U > *arg6 = 0 ;
  LLStrider< U16 > *arg7 = 0 ;
  S32 *argp2 ;
  
  SWIG_check_num_args("getGeometry",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGeometry",1,"LLAlphaObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getGeometry",2,"S32");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getGeometry",3,"LLStrider< LLVector3 > &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("getGeometry",4,"LLStrider< LLVector3 > &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("getGeometry",5,"LLStrider< LLVector2 > &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("getGeometry",6,"LLStrider< LLColor4U > &");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("getGeometry",7,"LLStrider< U16 > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLAlphaObject,0))){
    SWIG_fail_ptr("LLAlphaObject_getGeometry",1,SWIGTYPE_p_LLAlphaObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_S32,0))){
    SWIG_fail_ptr("LLAlphaObject_getGeometry",2,SWIGTYPE_p_S32);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLStriderT_LLVector3_t,0))){
    SWIG_fail_ptr("LLAlphaObject_getGeometry",3,SWIGTYPE_p_LLStriderT_LLVector3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_LLStriderT_LLVector3_t,0))){
    SWIG_fail_ptr("LLAlphaObject_getGeometry",4,SWIGTYPE_p_LLStriderT_LLVector3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_LLStriderT_LLVector2_t,0))){
    SWIG_fail_ptr("LLAlphaObject_getGeometry",5,SWIGTYPE_p_LLStriderT_LLVector2_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_LLStriderT_LLColor4U_t,0))){
    SWIG_fail_ptr("LLAlphaObject_getGeometry",6,SWIGTYPE_p_LLStriderT_LLColor4U_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_LLStriderT_U16_t,0))){
    SWIG_fail_ptr("LLAlphaObject_getGeometry",7,SWIGTYPE_p_LLStriderT_U16_t);
  }
  
  (arg1)->getGeometry(arg2,*arg3,*arg4,*arg5,*arg6,*arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLAlphaObject_mDepth_set(lua_State* L) {
  int SWIG_arg = 0;
  LLAlphaObject *arg1 = (LLAlphaObject *) 0 ;
  F32 arg2 ;
  F32 *argp2 ;
  
  SWIG_check_num_args("mDepth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mDepth",1,"LLAlphaObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mDepth",2,"F32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLAlphaObject,0))){
    SWIG_fail_ptr("LLAlphaObject_mDepth_set",1,SWIGTYPE_p_LLAlphaObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_F32,0))){
    SWIG_fail_ptr("LLAlphaObject_mDepth_set",2,SWIGTYPE_p_F32);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->mDepth = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLAlphaObject_mDepth_get(lua_State* L) {
  int SWIG_arg = 0;
  LLAlphaObject *arg1 = (LLAlphaObject *) 0 ;
  F32 result;
  
  SWIG_check_num_args("mDepth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mDepth",1,"LLAlphaObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLAlphaObject,0))){
    SWIG_fail_ptr("LLAlphaObject_mDepth_get",1,SWIGTYPE_p_LLAlphaObject);
  }
  
  result =  ((arg1)->mDepth);
  {
    F32 * resultptr = new F32((const F32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_F32,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LLAlphaObject(void *obj) {
LLAlphaObject *arg1 = (LLAlphaObject *) obj;
delete arg1;
}
static swig_lua_method swig_LLAlphaObject_methods[] = {
    {"getPartSize", _wrap_LLAlphaObject_getPartSize}, 
    {"getGeometry", _wrap_LLAlphaObject_getGeometry}, 
    {0,0}
};
static swig_lua_attribute swig_LLAlphaObject_attributes[] = {
    { "mDepth", _wrap_LLAlphaObject_mDepth_get, _wrap_LLAlphaObject_mDepth_set},
    {0,0,0}
};
static swig_lua_class *swig_LLAlphaObject_bases[] = {0,0};
static const char *swig_LLAlphaObject_base_names[] = {"LLViewerObject *",0};
static swig_lua_class _wrap_class_LLAlphaObject = { "LLAlphaObject", &SWIGTYPE_p_LLAlphaObject,0, swig_delete_LLAlphaObject, swig_LLAlphaObject_methods, swig_LLAlphaObject_attributes, swig_LLAlphaObject_bases, swig_LLAlphaObject_base_names };

static int _wrap_new_LLStaticViewerObject__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LLUUID *arg1 = 0 ;
  LLPCode arg2 ;
  LLViewerRegion *arg3 = (LLViewerRegion *) 0 ;
  BOOL arg4 ;
  LLPCode *argp2 ;
  BOOL *argp4 ;
  LLStaticViewerObject *result = 0 ;
  
  SWIG_check_num_args("LLStaticViewerObject",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LLStaticViewerObject",1,"LLUUID const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LLStaticViewerObject",2,"LLPCode const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("LLStaticViewerObject",3,"LLViewerRegion *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("LLStaticViewerObject",4,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLUUID,0))){
    SWIG_fail_ptr("new_LLStaticViewerObject",1,SWIGTYPE_p_LLUUID);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_LLPCode,0))){
    SWIG_fail_ptr("new_LLStaticViewerObject",2,SWIGTYPE_p_LLPCode);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLViewerRegion,0))){
    SWIG_fail_ptr("new_LLStaticViewerObject",3,SWIGTYPE_p_LLViewerRegion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("new_LLStaticViewerObject",4,SWIGTYPE_p_BOOL);
  }
  arg4 = *argp4;
  
  result = (LLStaticViewerObject *)new LLStaticViewerObject((LLUUID const &)*arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLStaticViewerObject,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLStaticViewerObject__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LLUUID *arg1 = 0 ;
  LLPCode arg2 ;
  LLViewerRegion *arg3 = (LLViewerRegion *) 0 ;
  LLPCode *argp2 ;
  LLStaticViewerObject *result = 0 ;
  
  SWIG_check_num_args("LLStaticViewerObject",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LLStaticViewerObject",1,"LLUUID const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LLStaticViewerObject",2,"LLPCode const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("LLStaticViewerObject",3,"LLViewerRegion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLUUID,0))){
    SWIG_fail_ptr("new_LLStaticViewerObject",1,SWIGTYPE_p_LLUUID);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_LLPCode,0))){
    SWIG_fail_ptr("new_LLStaticViewerObject",2,SWIGTYPE_p_LLPCode);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_LLViewerRegion,0))){
    SWIG_fail_ptr("new_LLStaticViewerObject",3,SWIGTYPE_p_LLViewerRegion);
  }
  
  result = (LLStaticViewerObject *)new LLStaticViewerObject((LLUUID const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLStaticViewerObject,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLStaticViewerObject(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLUUID, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLPCode, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_LLViewerRegion, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_LLStaticViewerObject__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LLUUID, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_LLPCode, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_LLViewerRegion, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_BOOL, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_LLStaticViewerObject__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_LLStaticViewerObject'\n"
    "  Possible C/C++ prototypes are:\n"
    "    LLStaticViewerObject(LLUUID const &,LLPCode const,LLViewerRegion *,BOOL)\n"
    "    LLStaticViewerObject(LLUUID const &,LLPCode const,LLViewerRegion *)\n");
  lua_error(L);return 0;
}


static int _wrap_LLStaticViewerObject_updateDrawable(lua_State* L) {
  int SWIG_arg = 0;
  LLStaticViewerObject *arg1 = (LLStaticViewerObject *) 0 ;
  BOOL arg2 ;
  BOOL *argp2 ;
  
  SWIG_check_num_args("updateDrawable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateDrawable",1,"LLStaticViewerObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("updateDrawable",2,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLStaticViewerObject,0))){
    SWIG_fail_ptr("LLStaticViewerObject_updateDrawable",1,SWIGTYPE_p_LLStaticViewerObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("LLStaticViewerObject_updateDrawable",2,SWIGTYPE_p_BOOL);
  }
  arg2 = *argp2;
  
  (arg1)->updateDrawable(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LLStaticViewerObject(void *obj) {
LLStaticViewerObject *arg1 = (LLStaticViewerObject *) obj;
delete arg1;
}
static swig_lua_method swig_LLStaticViewerObject_methods[] = {
    {"updateDrawable", _wrap_LLStaticViewerObject_updateDrawable}, 
    {0,0}
};
static swig_lua_attribute swig_LLStaticViewerObject_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_LLStaticViewerObject_bases[] = {0,0};
static const char *swig_LLStaticViewerObject_base_names[] = {"LLViewerObject *",0};
static swig_lua_class _wrap_class_LLStaticViewerObject = { "LLStaticViewerObject", &SWIGTYPE_p_LLStaticViewerObject,_wrap_new_LLStaticViewerObject, swig_delete_LLStaticViewerObject, swig_LLStaticViewerObject_methods, swig_LLStaticViewerObject_attributes, swig_LLStaticViewerObject_bases, swig_LLStaticViewerObject_base_names };

static int _wrap_gVelocityInterpolate_set(lua_State* L) {
  int SWIG_arg = 0;
  BOOL arg1 ;
  BOOL *argp1 ;
  
  SWIG_check_num_args("gVelocityInterpolate",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gVelocityInterpolate",1,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("gVelocityInterpolate_set",1,SWIGTYPE_p_BOOL);
  }
  arg1 = *argp1;
  
  gVelocityInterpolate = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gVelocityInterpolate_get(lua_State* L) {
  int SWIG_arg = 0;
  BOOL result;
  
  SWIG_check_num_args("gVelocityInterpolate",0,0)
  result = gVelocityInterpolate;
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gPingInterpolate_set(lua_State* L) {
  int SWIG_arg = 0;
  BOOL arg1 ;
  BOOL *argp1 ;
  
  SWIG_check_num_args("gPingInterpolate",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gPingInterpolate",1,"BOOL");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_BOOL,0))){
    SWIG_fail_ptr("gPingInterpolate_set",1,SWIGTYPE_p_BOOL);
  }
  arg1 = *argp1;
  
  gPingInterpolate = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gPingInterpolate_get(lua_State* L) {
  int SWIG_arg = 0;
  BOOL result;
  
  SWIG_check_num_args("gPingInterpolate",0,0)
  result = gPingInterpolate;
  {
    BOOL * resultptr = new BOOL((const BOOL &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BOOL,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FindObject(lua_State* L) {
  int SWIG_arg = 0;
  LLUUID *arg1 = 0 ;
  LLViewerObject *result = 0 ;
  
  SWIG_check_num_args("FindObject",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FindObject",1,"LLUUID const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLUUID,0))){
    SWIG_fail_ptr("FindObject",1,SWIGTYPE_p_LLUUID);
  }
  
  result = (LLViewerObject *)FindObject((LLUUID const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLViewerObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CreateViewerObject(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  LLViewerRegion *arg2 = (LLViewerRegion *) 0 ;
  LLViewerObject *result = 0 ;
  
  SWIG_check_num_args("CreateViewerObject",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("CreateViewerObject",1,"int const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CreateViewerObject",2,"LLViewerRegion *");
  arg1 = (int const)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LLViewerRegion,0))){
    SWIG_fail_ptr("CreateViewerObject",2,SWIGTYPE_p_LLViewerRegion);
  }
  
  result = (LLViewerObject *)CreateViewerObject(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LLViewerObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KillObject(lua_State* L) {
  int SWIG_arg = 0;
  LLViewerObject *arg1 = (LLViewerObject *) 0 ;
  bool result;
  
  SWIG_check_num_args("KillObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KillObject",1,"LLViewerObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LLViewerObject,0))){
    SWIG_fail_ptr("KillObject",1,SWIGTYPE_p_LLViewerObject);
  }
  
  result = (bool)KillObject(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


#ifdef __cplusplus
}
#endif

static const struct luaL_reg swig_commands[] = {
    { "LLNetworkData_isValid", _wrap_LLNetworkData_isValid},
    { "LLPrimitive_getVolumeManager", _wrap_LLPrimitive_getVolumeManager},
    { "LLPrimitive_setVolumeManager", _wrap_LLPrimitive_setVolumeManager},
    { "LLPrimitive_cleanupVolumeManager", _wrap_LLPrimitive_cleanupVolumeManager},
    { "LLPrimitive_createPrimitive", _wrap_LLPrimitive_createPrimitive},
    { "LLPrimitive_pCodeToString", _wrap_LLPrimitive_pCodeToString},
    { "LLPrimitive_legacyToPCode", _wrap_LLPrimitive_legacyToPCode},
    { "LLPrimitive_pCodeToLegacy", _wrap_LLPrimitive_pCodeToLegacy},
    { "LLPrimitive_getTESTAxes", _wrap_LLPrimitive_getTESTAxes},
    { "LLPrimitive_isPrimitive", _wrap_LLPrimitive_isPrimitive},
    { "LLPrimitive_isApp", _wrap_LLPrimitive_isApp},
    { "LLViewerObject_initVOClasses", _wrap_LLViewerObject_initVOClasses},
    { "LLViewerObject_cleanupVOClasses", _wrap_LLViewerObject_cleanupVOClasses},
    { "LLViewerObject_increaseArrowLength", _wrap_LLViewerObject_increaseArrowLength},
    { "LLViewerObject_decreaseArrowLength", _wrap_LLViewerObject_decreaseArrowLength},
    { "LLViewerObject_processTaskInv", _wrap_LLViewerObject_processTaskInv},
    { "LLViewerObject_getNumZombieObjects", _wrap_LLViewerObject_getNumZombieObjects},
    { "FindObject", _wrap_FindObject},
    { "CreateViewerObject", _wrap_CreateViewerObject},
    { "KillObject", _wrap_KillObject},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    { "MAX_OBJECT_Z", _wrap_MAX_OBJECT_Z_get, SWIG_Lua_set_immutable },
    { "MIN_OBJECT_Z", _wrap_MIN_OBJECT_Z_get, SWIG_Lua_set_immutable },
    { "DEFAULT_MAX_PRIM_SCALE", _wrap_DEFAULT_MAX_PRIM_SCALE_get, SWIG_Lua_set_immutable },
    { "DEFAULT_MAX_MEGAPRIM_SCALE", _wrap_DEFAULT_MAX_MEGAPRIM_SCALE_get, SWIG_Lua_set_immutable },
    { "MIN_PRIM_SCALE", _wrap_MIN_PRIM_SCALE_get, SWIG_Lua_set_immutable },
    { "MAX_PRIM_SCALE", _wrap_MAX_PRIM_SCALE_get, SWIG_Lua_set_immutable },
    { "OBJECT_CUT_MIN", _wrap_OBJECT_CUT_MIN_get, SWIG_Lua_set_immutable },
    { "OBJECT_CUT_MAX", _wrap_OBJECT_CUT_MAX_get, SWIG_Lua_set_immutable },
    { "OBJECT_CUT_INC", _wrap_OBJECT_CUT_INC_get, SWIG_Lua_set_immutable },
    { "OBJECT_MIN_CUT_INC", _wrap_OBJECT_MIN_CUT_INC_get, SWIG_Lua_set_immutable },
    { "OBJECT_ROTATION_PRECISION", _wrap_OBJECT_ROTATION_PRECISION_get, SWIG_Lua_set_immutable },
    { "OBJECT_TWIST_MIN", _wrap_OBJECT_TWIST_MIN_get, SWIG_Lua_set_immutable },
    { "OBJECT_TWIST_MAX", _wrap_OBJECT_TWIST_MAX_get, SWIG_Lua_set_immutable },
    { "OBJECT_TWIST_INC", _wrap_OBJECT_TWIST_INC_get, SWIG_Lua_set_immutable },
    { "OBJECT_TWIST_LINEAR_MIN", _wrap_OBJECT_TWIST_LINEAR_MIN_get, SWIG_Lua_set_immutable },
    { "OBJECT_TWIST_LINEAR_MAX", _wrap_OBJECT_TWIST_LINEAR_MAX_get, SWIG_Lua_set_immutable },
    { "OBJECT_TWIST_LINEAR_INC", _wrap_OBJECT_TWIST_LINEAR_INC_get, SWIG_Lua_set_immutable },
    { "OBJECT_MIN_HOLE_SIZE", _wrap_OBJECT_MIN_HOLE_SIZE_get, SWIG_Lua_set_immutable },
    { "OBJECT_MAX_HOLE_SIZE_X", _wrap_OBJECT_MAX_HOLE_SIZE_X_get, SWIG_Lua_set_immutable },
    { "OBJECT_MAX_HOLE_SIZE_Y", _wrap_OBJECT_MAX_HOLE_SIZE_Y_get, SWIG_Lua_set_immutable },
    { "OBJECT_REV_MIN", _wrap_OBJECT_REV_MIN_get, SWIG_Lua_set_immutable },
    { "OBJECT_REV_MAX", _wrap_OBJECT_REV_MAX_get, SWIG_Lua_set_immutable },
    { "OBJECT_REV_INC", _wrap_OBJECT_REV_INC_get, SWIG_Lua_set_immutable },
    { "SCULPT_DEFAULT_TEXTURE", _wrap_SCULPT_DEFAULT_TEXTURE_get, _wrap_SCULPT_DEFAULT_TEXTURE_set },
    { "LIGHT_MIN_RADIUS", _wrap_LIGHT_MIN_RADIUS_get, SWIG_Lua_set_immutable },
    { "LIGHT_DEFAULT_RADIUS", _wrap_LIGHT_DEFAULT_RADIUS_get, SWIG_Lua_set_immutable },
    { "LIGHT_MAX_RADIUS", _wrap_LIGHT_MAX_RADIUS_get, SWIG_Lua_set_immutable },
    { "LIGHT_MIN_FALLOFF", _wrap_LIGHT_MIN_FALLOFF_get, SWIG_Lua_set_immutable },
    { "LIGHT_DEFAULT_FALLOFF", _wrap_LIGHT_DEFAULT_FALLOFF_get, SWIG_Lua_set_immutable },
    { "LIGHT_MAX_FALLOFF", _wrap_LIGHT_MAX_FALLOFF_get, SWIG_Lua_set_immutable },
    { "LIGHT_MIN_CUTOFF", _wrap_LIGHT_MIN_CUTOFF_get, SWIG_Lua_set_immutable },
    { "LIGHT_DEFAULT_CUTOFF", _wrap_LIGHT_DEFAULT_CUTOFF_get, SWIG_Lua_set_immutable },
    { "LIGHT_MAX_CUTOFF", _wrap_LIGHT_MAX_CUTOFF_get, SWIG_Lua_set_immutable },
    { "FLEXIBLE_OBJECT_MIN_TENSION", _wrap_FLEXIBLE_OBJECT_MIN_TENSION_get, SWIG_Lua_set_immutable },
    { "FLEXIBLE_OBJECT_DEFAULT_TENSION", _wrap_FLEXIBLE_OBJECT_DEFAULT_TENSION_get, SWIG_Lua_set_immutable },
    { "FLEXIBLE_OBJECT_MAX_TENSION", _wrap_FLEXIBLE_OBJECT_MAX_TENSION_get, SWIG_Lua_set_immutable },
    { "FLEXIBLE_OBJECT_MIN_AIR_FRICTION", _wrap_FLEXIBLE_OBJECT_MIN_AIR_FRICTION_get, SWIG_Lua_set_immutable },
    { "FLEXIBLE_OBJECT_DEFAULT_AIR_FRICTION", _wrap_FLEXIBLE_OBJECT_DEFAULT_AIR_FRICTION_get, SWIG_Lua_set_immutable },
    { "FLEXIBLE_OBJECT_MAX_AIR_FRICTION", _wrap_FLEXIBLE_OBJECT_MAX_AIR_FRICTION_get, SWIG_Lua_set_immutable },
    { "FLEXIBLE_OBJECT_MIN_GRAVITY", _wrap_FLEXIBLE_OBJECT_MIN_GRAVITY_get, SWIG_Lua_set_immutable },
    { "FLEXIBLE_OBJECT_DEFAULT_GRAVITY", _wrap_FLEXIBLE_OBJECT_DEFAULT_GRAVITY_get, SWIG_Lua_set_immutable },
    { "FLEXIBLE_OBJECT_MAX_GRAVITY", _wrap_FLEXIBLE_OBJECT_MAX_GRAVITY_get, SWIG_Lua_set_immutable },
    { "FLEXIBLE_OBJECT_MIN_WIND_SENSITIVITY", _wrap_FLEXIBLE_OBJECT_MIN_WIND_SENSITIVITY_get, SWIG_Lua_set_immutable },
    { "FLEXIBLE_OBJECT_DEFAULT_WIND_SENSITIVITY", _wrap_FLEXIBLE_OBJECT_DEFAULT_WIND_SENSITIVITY_get, SWIG_Lua_set_immutable },
    { "FLEXIBLE_OBJECT_MAX_WIND_SENSITIVITY", _wrap_FLEXIBLE_OBJECT_MAX_WIND_SENSITIVITY_get, SWIG_Lua_set_immutable },
    { "FLEXIBLE_OBJECT_MAX_INTERNAL_TENSION_FORCE", _wrap_FLEXIBLE_OBJECT_MAX_INTERNAL_TENSION_FORCE_get, SWIG_Lua_set_immutable },
    { "FLEXIBLE_OBJECT_DEFAULT_LENGTH", _wrap_FLEXIBLE_OBJECT_DEFAULT_LENGTH_get, SWIG_Lua_set_immutable },
    { "FLEXIBLE_OBJECT_DEFAULT_USING_COLLISION_SPHERE", _wrap_FLEXIBLE_OBJECT_DEFAULT_USING_COLLISION_SPHERE_get, SWIG_Lua_set_immutable },
    { "FLEXIBLE_OBJECT_DEFAULT_RENDERING_COLLISION_SPHERE", _wrap_FLEXIBLE_OBJECT_DEFAULT_RENDERING_COLLISION_SPHERE_get, SWIG_Lua_set_immutable },
    { "LLViewerObject_sUseSharedDrawables", _wrap_LLViewerObject_sUseSharedDrawables_get, _wrap_LLViewerObject_sUseSharedDrawables_set },
    { "gVelocityInterpolate", _wrap_gVelocityInterpolate_get, _wrap_gVelocityInterpolate_set },
    { "gPingInterpolate", _wrap_gPingInterpolate_get, _wrap_gPingInterpolate_set },
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
{ SWIG_LUA_INT,     (char *)"LLXform_UNCHANGED", (long) LLXform::UNCHANGED, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LLXform_TRANSLATED", (long) LLXform::TRANSLATED, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LLXform_ROTATED", (long) LLXform::ROTATED, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LLXform_SCALED", (long) LLXform::SCALED, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LLXform_SHIFTED", (long) LLXform::SHIFTED, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LLXform_GEOMETRY", (long) LLXform::GEOMETRY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LLXform_TEXTURE", (long) LLXform::TEXTURE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LLXform_MOVED", (long) LLXform::MOVED, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LLXform_SILHOUETTE", (long) LLXform::SILHOUETTE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LLXform_ALL_CHANGED", (long) LLXform::ALL_CHANGED, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LLInvalid", (long) LLInvalid, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LLLineLoop", (long) LLLineLoop, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LLLineStrip", (long) LLLineStrip, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LLTriangles", (long) LLTriangles, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LLTriStrip", (long) LLTriStrip, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LLTriFan", (long) LLTriFan, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LLQuads", (long) LLQuads, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LLQuadStrip", (long) LLQuadStrip, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LLNetworkData_PARAMS_FLEXIBLE", (long) LLNetworkData::PARAMS_FLEXIBLE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LLNetworkData_PARAMS_LIGHT", (long) LLNetworkData::PARAMS_LIGHT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LLNetworkData_PARAMS_SCULPT", (long) LLNetworkData::PARAMS_SCULPT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"FLEXIBLE_OBJECT_MIN_SECTIONS", (long) FLEXIBLE_OBJECT_MIN_SECTIONS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"FLEXIBLE_OBJECT_DEFAULT_NUM_SECTIONS", (long) FLEXIBLE_OBJECT_DEFAULT_NUM_SECTIONS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"FLEXIBLE_OBJECT_MAX_SECTIONS", (long) FLEXIBLE_OBJECT_MAX_SECTIONS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"OUT_FULL", (long) OUT_FULL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"OUT_TERSE_IMPROVED", (long) OUT_TERSE_IMPROVED, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"OUT_FULL_COMPRESSED", (long) OUT_FULL_COMPRESSED, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"OUT_FULL_CACHED", (long) OUT_FULL_CACHED, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LLViewerObject_MEDIA_TYPE_NONE", (long) LLViewerObject::MEDIA_TYPE_NONE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LLViewerObject_MEDIA_TYPE_WEB_PAGE", (long) LLViewerObject::MEDIA_TYPE_WEB_PAGE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LLViewerObject_MEDIA_URL_REMOVED", (long) LLViewerObject::MEDIA_URL_REMOVED, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LLViewerObject_MEDIA_URL_ADDED", (long) LLViewerObject::MEDIA_URL_ADDED, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LLViewerObject_MEDIA_URL_UPDATED", (long) LLViewerObject::MEDIA_URL_UPDATED, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LLViewerObject_INVALID_UPDATE", (long) LLViewerObject::INVALID_UPDATE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LLViewerObject_LL_VO_CLOUDS", (long) LLViewerObject::LL_VO_CLOUDS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LLViewerObject_LL_VO_SURFACE_PATCH", (long) LLViewerObject::LL_VO_SURFACE_PATCH, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LLViewerObject_LL_VO_SQUARE_TORUS", (long) LLViewerObject::LL_VO_SQUARE_TORUS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LLViewerObject_LL_VO_SKY", (long) LLViewerObject::LL_VO_SKY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LLViewerObject_LL_VO_WATER", (long) LLViewerObject::LL_VO_WATER, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LLViewerObject_LL_VO_GROUND", (long) LLViewerObject::LL_VO_GROUND, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LLViewerObject_LL_VO_PART_GROUP", (long) LLViewerObject::LL_VO_PART_GROUP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LLViewerObject_LL_VO_TRIANGLE_TORUS", (long) LLViewerObject::LL_VO_TRIANGLE_TORUS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LLViewerObject_LL_VO_WL_SKY", (long) LLViewerObject::LL_VO_WL_SKY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LLViewerObject_LL_VO_HUD_PART_GROUP", (long) LLViewerObject::LL_VO_HUD_PART_GROUP, 0, 0, 0},
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_LLPrimitiveTo_p_LLXform(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((LLXform *)  ((LLPrimitive *) x));
}
static void *_p_LLViewerObjectTo_p_LLXform(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((LLXform *) (LLPrimitive *) ((LLViewerObject *) x));
}
static void *_p_LLStaticViewerObjectTo_p_LLXform(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((LLXform *) (LLPrimitive *)(LLViewerObject *) ((LLStaticViewerObject *) x));
}
static void *_p_LLXformMatrixTo_p_LLXform(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((LLXform *)  ((LLXformMatrix *) x));
}
static void *_p_LLAlphaObjectTo_p_LLXform(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((LLXform *) (LLPrimitive *)(LLViewerObject *) ((LLAlphaObject *) x));
}
static void *_p_LLViewerObjectTo_p_LLPrimitive(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((LLPrimitive *)  ((LLViewerObject *) x));
}
static void *_p_LLStaticViewerObjectTo_p_LLPrimitive(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((LLPrimitive *) (LLViewerObject *) ((LLStaticViewerObject *) x));
}
static void *_p_LLAlphaObjectTo_p_LLPrimitive(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((LLPrimitive *) (LLViewerObject *) ((LLAlphaObject *) x));
}
static void *_p_LLLightParamsTo_p_LLNetworkData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((LLNetworkData *)  ((LLLightParams *) x));
}
static void *_p_LLFlexibleObjectDataTo_p_LLNetworkData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((LLNetworkData *)  ((LLFlexibleObjectData *) x));
}
static void *_p_LLSculptParamsTo_p_LLNetworkData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((LLNetworkData *)  ((LLSculptParams *) x));
}
static void *_p_LLStaticViewerObjectTo_p_LLViewerObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((LLViewerObject *)  ((LLStaticViewerObject *) x));
}
static void *_p_LLAlphaObjectTo_p_LLViewerObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((LLViewerObject *)  ((LLAlphaObject *) x));
}
static swig_type_info _swigt__p_BOOL = {"_p_BOOL", "BOOL *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EChangedFlags = {"_p_EChangedFlags", "EChangedFlags *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EHavokJointType = {"_p_EHavokJointType", "EHavokJointType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EMsgVariableType = {"_p_EMsgVariableType", "EMsgVariableType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EVOType = {"_p_EVOType", "EVOType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_F32 = {"_p_F32", "F32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_F64 = {"_p_F64", "F64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_InventoryObjectList = {"_p_InventoryObjectList", "InventoryObjectList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLAgent = {"_p_LLAgent", "LLAgent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLAlphaObject = {"_p_LLAlphaObject", "LLAlphaObject *", 0, 0, (void*)&_wrap_class_LLAlphaObject, 0};
static swig_type_info _swigt__p_LLAssetType__EType = {"_p_LLAssetType__EType", "LLAssetType::EType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLAudioSource = {"_p_LLAudioSource", "LLAudioSource *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLBBox = {"_p_LLBBox", "LLBBox *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLColor3 = {"_p_LLColor3", "LLColor3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLColor4 = {"_p_LLColor4", "LLColor4 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLDataPacker = {"_p_LLDataPacker", "LLDataPacker *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLDrawable = {"_p_LLDrawable", "LLDrawable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLDynamicArrayT_LLViewerObject_p_t = {"_p_LLDynamicArrayT_LLViewerObject_p_t", "LLDynamicArray< LLViewerObject * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLFlexibleObjectData = {"_p_LLFlexibleObjectData", "LLFlexibleObjectData *", 0, 0, (void*)&_wrap_class_LLFlexibleObjectData, 0};
static swig_type_info _swigt__p_LLHost = {"_p_LLHost", "LLHost *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLInventoryItem = {"_p_LLInventoryItem", "LLInventoryItem *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLInventoryObject = {"_p_LLInventoryObject", "LLInventoryObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLLightParams = {"_p_LLLightParams", "LLLightParams *", 0, 0, (void*)&_wrap_class_LLLightParams, 0};
static swig_type_info _swigt__p_LLMaterialExportInfo = {"_p_LLMaterialExportInfo", "LLMaterialExportInfo *", 0, 0, (void*)&_wrap_class_LLMaterialExportInfo, 0};
static swig_type_info _swigt__p_LLMatrix4 = {"_p_LLMatrix4", "LLMatrix4 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLMessageSystem = {"_p_LLMessageSystem", "LLMessageSystem *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLNameValue = {"_p_LLNameValue", "LLNameValue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLNetworkData = {"_p_LLNetworkData", "LLNetworkData *", 0, 0, (void*)&_wrap_class_LLNetworkData, 0};
static swig_type_info _swigt__p_LLPCode = {"_p_LLPCode", "LLPCode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLPartSysData = {"_p_LLPartSysData", "LLPartSysData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLPipeline = {"_p_LLPipeline", "LLPipeline *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLPointerT_LLDrawable_t = {"_p_LLPointerT_LLDrawable_t", "LLPointer< LLDrawable > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLPointerT_LLHUDIcon_t = {"_p_LLPointerT_LLHUDIcon_t", "LLPointer< LLHUDIcon > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLPointerT_LLHUDText_t = {"_p_LLPointerT_LLHUDText_t", "LLPointer< LLHUDText > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLPointerT_LLViewerImage_t = {"_p_LLPointerT_LLViewerImage_t", "LLPointer< LLViewerImage > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLPointerT_LLViewerPartSourceScript_t = {"_p_LLPointerT_LLViewerPartSourceScript_t", "LLPointer< LLViewerPartSourceScript > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLPrimitive = {"_p_LLPrimitive", "LLPrimitive *", 0, 0, (void*)&_wrap_class_LLPrimitive, 0};
static swig_type_info _swigt__p_LLQuaternion = {"_p_LLQuaternion", "LLQuaternion *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLSD = {"_p_LLSD", "LLSD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLSculptParams = {"_p_LLSculptParams", "LLSculptParams *", 0, 0, (void*)&_wrap_class_LLSculptParams, 0};
static swig_type_info _swigt__p_LLStaticViewerObject = {"_p_LLStaticViewerObject", "LLStaticViewerObject *", 0, 0, (void*)&_wrap_class_LLStaticViewerObject, 0};
static swig_type_info _swigt__p_LLStriderT_LLColor4U_t = {"_p_LLStriderT_LLColor4U_t", "LLStrider< LLColor4U > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLStriderT_LLVector2_t = {"_p_LLStriderT_LLVector2_t", "LLStrider< LLVector2 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLStriderT_LLVector3_t = {"_p_LLStriderT_LLVector3_t", "LLStrider< LLVector3 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLStriderT_U16_t = {"_p_LLStriderT_U16_t", "LLStrider< U16 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLTextureEntry = {"_p_LLTextureEntry", "LLTextureEntry *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLUUID = {"_p_LLUUID", "LLUUID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLVOInventoryListener = {"_p_LLVOInventoryListener", "LLVOInventoryListener *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLVOJointInfo = {"_p_LLVOJointInfo", "LLVOJointInfo *", 0, 0, (void*)&_wrap_class_LLVOJointInfo, 0};
static swig_type_info _swigt__p_LLVector2 = {"_p_LLVector2", "LLVector2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLVector3 = {"_p_LLVector3", "LLVector3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLVector3d = {"_p_LLVector3d", "LLVector3d *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLViewerImage = {"_p_LLViewerImage", "LLViewerImage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLViewerInventoryItem = {"_p_LLViewerInventoryItem", "LLViewerInventoryItem *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLViewerObject = {"_p_LLViewerObject", "LLViewerObject *", 0, 0, (void*)&_wrap_class_LLViewerObject, 0};
static swig_type_info _swigt__p_LLViewerObjectMedia = {"_p_LLViewerObjectMedia", "LLViewerObjectMedia *", 0, 0, (void*)&_wrap_class_LLViewerObjectMedia, 0};
static swig_type_info _swigt__p_LLViewerRegion = {"_p_LLViewerRegion", "LLViewerRegion *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLVolume = {"_p_LLVolume", "LLVolume *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLVolumeMgr = {"_p_LLVolumeMgr", "LLVolumeMgr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLVolumeParams = {"_p_LLVolumeParams", "LLVolumeParams *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLWorld = {"_p_LLWorld", "LLWorld *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LLXform = {"_p_LLXform", "LLXform *", 0, 0, (void*)&_wrap_class_LLXform, 0};
static swig_type_info _swigt__p_LLXformMatrix = {"_p_LLXformMatrix", "LLXformMatrix *", 0, 0, (void*)&_wrap_class_LLXformMatrix, 0};
static swig_type_info _swigt__p_S16 = {"_p_S16", "S16 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_S32 = {"_p_S32", "S32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_U16 = {"_p_U16", "U16 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_U32 = {"_p_U32", "U32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_U8 = {"_p_U8", "U8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_child_list_t = {"_p_child_list_t", "child_list_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_child_list_t = {"_p_const_child_list_t", "const_child_list_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_e_object_update_type = {"_p_e_object_update_type", "enum e_object_update_type *|EObjectUpdateType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_LLPointerT_LLViewerObject_t_t = {"_p_std__listT_LLPointerT_LLViewerObject_t_t", "std::list< LLPointer< LLViewerObject > > *|LLViewerObject::const_child_list_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_LLQuaternion_t = {"_p_std__vectorT_LLQuaternion_t", "std::vector< LLQuaternion > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_LLVector3_t = {"_p_std__vectorT_LLVector3_t", "std::vector< LLVector3 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vobj_list_t = {"_p_vobj_list_t", "vobj_list_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_BOOL,
  &_swigt__p_EChangedFlags,
  &_swigt__p_EHavokJointType,
  &_swigt__p_EMsgVariableType,
  &_swigt__p_EVOType,
  &_swigt__p_F32,
  &_swigt__p_F64,
  &_swigt__p_InventoryObjectList,
  &_swigt__p_LLAgent,
  &_swigt__p_LLAlphaObject,
  &_swigt__p_LLAssetType__EType,
  &_swigt__p_LLAudioSource,
  &_swigt__p_LLBBox,
  &_swigt__p_LLColor3,
  &_swigt__p_LLColor4,
  &_swigt__p_LLDataPacker,
  &_swigt__p_LLDrawable,
  &_swigt__p_LLDynamicArrayT_LLViewerObject_p_t,
  &_swigt__p_LLFlexibleObjectData,
  &_swigt__p_LLHost,
  &_swigt__p_LLInventoryItem,
  &_swigt__p_LLInventoryObject,
  &_swigt__p_LLLightParams,
  &_swigt__p_LLMaterialExportInfo,
  &_swigt__p_LLMatrix4,
  &_swigt__p_LLMessageSystem,
  &_swigt__p_LLNameValue,
  &_swigt__p_LLNetworkData,
  &_swigt__p_LLPCode,
  &_swigt__p_LLPartSysData,
  &_swigt__p_LLPipeline,
  &_swigt__p_LLPointerT_LLDrawable_t,
  &_swigt__p_LLPointerT_LLHUDIcon_t,
  &_swigt__p_LLPointerT_LLHUDText_t,
  &_swigt__p_LLPointerT_LLViewerImage_t,
  &_swigt__p_LLPointerT_LLViewerPartSourceScript_t,
  &_swigt__p_LLPrimitive,
  &_swigt__p_LLQuaternion,
  &_swigt__p_LLSD,
  &_swigt__p_LLSculptParams,
  &_swigt__p_LLStaticViewerObject,
  &_swigt__p_LLStriderT_LLColor4U_t,
  &_swigt__p_LLStriderT_LLVector2_t,
  &_swigt__p_LLStriderT_LLVector3_t,
  &_swigt__p_LLStriderT_U16_t,
  &_swigt__p_LLTextureEntry,
  &_swigt__p_LLUUID,
  &_swigt__p_LLVOInventoryListener,
  &_swigt__p_LLVOJointInfo,
  &_swigt__p_LLVector2,
  &_swigt__p_LLVector3,
  &_swigt__p_LLVector3d,
  &_swigt__p_LLViewerImage,
  &_swigt__p_LLViewerInventoryItem,
  &_swigt__p_LLViewerObject,
  &_swigt__p_LLViewerObjectMedia,
  &_swigt__p_LLViewerRegion,
  &_swigt__p_LLVolume,
  &_swigt__p_LLVolumeMgr,
  &_swigt__p_LLVolumeParams,
  &_swigt__p_LLWorld,
  &_swigt__p_LLXform,
  &_swigt__p_LLXformMatrix,
  &_swigt__p_S16,
  &_swigt__p_S32,
  &_swigt__p_U16,
  &_swigt__p_U32,
  &_swigt__p_U8,
  &_swigt__p_child_list_t,
  &_swigt__p_const_child_list_t,
  &_swigt__p_e_object_update_type,
  &_swigt__p_p_void,
  &_swigt__p_std__listT_LLPointerT_LLViewerObject_t_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_LLQuaternion_t,
  &_swigt__p_std__vectorT_LLVector3_t,
  &_swigt__p_vobj_list_t,
};

static swig_cast_info _swigc__p_BOOL[] = {  {&_swigt__p_BOOL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EChangedFlags[] = {  {&_swigt__p_EChangedFlags, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EHavokJointType[] = {  {&_swigt__p_EHavokJointType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EMsgVariableType[] = {  {&_swigt__p_EMsgVariableType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EVOType[] = {  {&_swigt__p_EVOType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_F32[] = {  {&_swigt__p_F32, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_F64[] = {  {&_swigt__p_F64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_InventoryObjectList[] = {  {&_swigt__p_InventoryObjectList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLAgent[] = {  {&_swigt__p_LLAgent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLAlphaObject[] = {  {&_swigt__p_LLAlphaObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLAssetType__EType[] = {  {&_swigt__p_LLAssetType__EType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLAudioSource[] = {  {&_swigt__p_LLAudioSource, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLBBox[] = {  {&_swigt__p_LLBBox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLColor3[] = {  {&_swigt__p_LLColor3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLColor4[] = {  {&_swigt__p_LLColor4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLDataPacker[] = {  {&_swigt__p_LLDataPacker, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLDrawable[] = {  {&_swigt__p_LLDrawable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLDynamicArrayT_LLViewerObject_p_t[] = {  {&_swigt__p_LLDynamicArrayT_LLViewerObject_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLFlexibleObjectData[] = {  {&_swigt__p_LLFlexibleObjectData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLHost[] = {  {&_swigt__p_LLHost, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLInventoryItem[] = {  {&_swigt__p_LLInventoryItem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLInventoryObject[] = {  {&_swigt__p_LLInventoryObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLLightParams[] = {  {&_swigt__p_LLLightParams, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLMaterialExportInfo[] = {  {&_swigt__p_LLMaterialExportInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLMatrix4[] = {  {&_swigt__p_LLMatrix4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLMessageSystem[] = {  {&_swigt__p_LLMessageSystem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLNameValue[] = {  {&_swigt__p_LLNameValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLNetworkData[] = {  {&_swigt__p_LLLightParams, _p_LLLightParamsTo_p_LLNetworkData, 0, 0},  {&_swigt__p_LLFlexibleObjectData, _p_LLFlexibleObjectDataTo_p_LLNetworkData, 0, 0},  {&_swigt__p_LLSculptParams, _p_LLSculptParamsTo_p_LLNetworkData, 0, 0},  {&_swigt__p_LLNetworkData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLPCode[] = {  {&_swigt__p_LLPCode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLPartSysData[] = {  {&_swigt__p_LLPartSysData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLPipeline[] = {  {&_swigt__p_LLPipeline, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLPointerT_LLDrawable_t[] = {  {&_swigt__p_LLPointerT_LLDrawable_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLPointerT_LLHUDIcon_t[] = {  {&_swigt__p_LLPointerT_LLHUDIcon_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLPointerT_LLHUDText_t[] = {  {&_swigt__p_LLPointerT_LLHUDText_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLPointerT_LLViewerImage_t[] = {  {&_swigt__p_LLPointerT_LLViewerImage_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLPointerT_LLViewerPartSourceScript_t[] = {  {&_swigt__p_LLPointerT_LLViewerPartSourceScript_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLPrimitive[] = {  {&_swigt__p_LLPrimitive, 0, 0, 0},  {&_swigt__p_LLViewerObject, _p_LLViewerObjectTo_p_LLPrimitive, 0, 0},  {&_swigt__p_LLStaticViewerObject, _p_LLStaticViewerObjectTo_p_LLPrimitive, 0, 0},  {&_swigt__p_LLAlphaObject, _p_LLAlphaObjectTo_p_LLPrimitive, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLQuaternion[] = {  {&_swigt__p_LLQuaternion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLSD[] = {  {&_swigt__p_LLSD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLSculptParams[] = {  {&_swigt__p_LLSculptParams, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLStaticViewerObject[] = {  {&_swigt__p_LLStaticViewerObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLStriderT_LLColor4U_t[] = {  {&_swigt__p_LLStriderT_LLColor4U_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLStriderT_LLVector2_t[] = {  {&_swigt__p_LLStriderT_LLVector2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLStriderT_LLVector3_t[] = {  {&_swigt__p_LLStriderT_LLVector3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLStriderT_U16_t[] = {  {&_swigt__p_LLStriderT_U16_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLTextureEntry[] = {  {&_swigt__p_LLTextureEntry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLUUID[] = {  {&_swigt__p_LLUUID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLVOInventoryListener[] = {  {&_swigt__p_LLVOInventoryListener, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLVOJointInfo[] = {  {&_swigt__p_LLVOJointInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLVector2[] = {  {&_swigt__p_LLVector2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLVector3[] = {  {&_swigt__p_LLVector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLVector3d[] = {  {&_swigt__p_LLVector3d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLViewerImage[] = {  {&_swigt__p_LLViewerImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLViewerInventoryItem[] = {  {&_swigt__p_LLViewerInventoryItem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLViewerObject[] = {  {&_swigt__p_LLViewerObject, 0, 0, 0},  {&_swigt__p_LLStaticViewerObject, _p_LLStaticViewerObjectTo_p_LLViewerObject, 0, 0},  {&_swigt__p_LLAlphaObject, _p_LLAlphaObjectTo_p_LLViewerObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLViewerObjectMedia[] = {  {&_swigt__p_LLViewerObjectMedia, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLViewerRegion[] = {  {&_swigt__p_LLViewerRegion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLVolume[] = {  {&_swigt__p_LLVolume, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLVolumeMgr[] = {  {&_swigt__p_LLVolumeMgr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLVolumeParams[] = {  {&_swigt__p_LLVolumeParams, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLWorld[] = {  {&_swigt__p_LLWorld, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLXform[] = {  {&_swigt__p_LLPrimitive, _p_LLPrimitiveTo_p_LLXform, 0, 0},  {&_swigt__p_LLViewerObject, _p_LLViewerObjectTo_p_LLXform, 0, 0},  {&_swigt__p_LLStaticViewerObject, _p_LLStaticViewerObjectTo_p_LLXform, 0, 0},  {&_swigt__p_LLAlphaObject, _p_LLAlphaObjectTo_p_LLXform, 0, 0},  {&_swigt__p_LLXformMatrix, _p_LLXformMatrixTo_p_LLXform, 0, 0},  {&_swigt__p_LLXform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LLXformMatrix[] = {  {&_swigt__p_LLXformMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_S16[] = {  {&_swigt__p_S16, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_S32[] = {  {&_swigt__p_S32, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_U16[] = {  {&_swigt__p_U16, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_U32[] = {  {&_swigt__p_U32, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_U8[] = {  {&_swigt__p_U8, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_child_list_t[] = {  {&_swigt__p_child_list_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_child_list_t[] = {  {&_swigt__p_const_child_list_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_e_object_update_type[] = {  {&_swigt__p_e_object_update_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_LLPointerT_LLViewerObject_t_t[] = {  {&_swigt__p_std__listT_LLPointerT_LLViewerObject_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_LLQuaternion_t[] = {  {&_swigt__p_std__vectorT_LLQuaternion_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_LLVector3_t[] = {  {&_swigt__p_std__vectorT_LLVector3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vobj_list_t[] = {  {&_swigt__p_vobj_list_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_BOOL,
  _swigc__p_EChangedFlags,
  _swigc__p_EHavokJointType,
  _swigc__p_EMsgVariableType,
  _swigc__p_EVOType,
  _swigc__p_F32,
  _swigc__p_F64,
  _swigc__p_InventoryObjectList,
  _swigc__p_LLAgent,
  _swigc__p_LLAlphaObject,
  _swigc__p_LLAssetType__EType,
  _swigc__p_LLAudioSource,
  _swigc__p_LLBBox,
  _swigc__p_LLColor3,
  _swigc__p_LLColor4,
  _swigc__p_LLDataPacker,
  _swigc__p_LLDrawable,
  _swigc__p_LLDynamicArrayT_LLViewerObject_p_t,
  _swigc__p_LLFlexibleObjectData,
  _swigc__p_LLHost,
  _swigc__p_LLInventoryItem,
  _swigc__p_LLInventoryObject,
  _swigc__p_LLLightParams,
  _swigc__p_LLMaterialExportInfo,
  _swigc__p_LLMatrix4,
  _swigc__p_LLMessageSystem,
  _swigc__p_LLNameValue,
  _swigc__p_LLNetworkData,
  _swigc__p_LLPCode,
  _swigc__p_LLPartSysData,
  _swigc__p_LLPipeline,
  _swigc__p_LLPointerT_LLDrawable_t,
  _swigc__p_LLPointerT_LLHUDIcon_t,
  _swigc__p_LLPointerT_LLHUDText_t,
  _swigc__p_LLPointerT_LLViewerImage_t,
  _swigc__p_LLPointerT_LLViewerPartSourceScript_t,
  _swigc__p_LLPrimitive,
  _swigc__p_LLQuaternion,
  _swigc__p_LLSD,
  _swigc__p_LLSculptParams,
  _swigc__p_LLStaticViewerObject,
  _swigc__p_LLStriderT_LLColor4U_t,
  _swigc__p_LLStriderT_LLVector2_t,
  _swigc__p_LLStriderT_LLVector3_t,
  _swigc__p_LLStriderT_U16_t,
  _swigc__p_LLTextureEntry,
  _swigc__p_LLUUID,
  _swigc__p_LLVOInventoryListener,
  _swigc__p_LLVOJointInfo,
  _swigc__p_LLVector2,
  _swigc__p_LLVector3,
  _swigc__p_LLVector3d,
  _swigc__p_LLViewerImage,
  _swigc__p_LLViewerInventoryItem,
  _swigc__p_LLViewerObject,
  _swigc__p_LLViewerObjectMedia,
  _swigc__p_LLViewerRegion,
  _swigc__p_LLVolume,
  _swigc__p_LLVolumeMgr,
  _swigc__p_LLVolumeParams,
  _swigc__p_LLWorld,
  _swigc__p_LLXform,
  _swigc__p_LLXformMatrix,
  _swigc__p_S16,
  _swigc__p_S32,
  _swigc__p_U16,
  _swigc__p_U32,
  _swigc__p_U8,
  _swigc__p_child_list_t,
  _swigc__p_const_child_list_t,
  _swigc__p_e_object_update_type,
  _swigc__p_p_void,
  _swigc__p_std__listT_LLPointerT_LLViewerObject_t_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_LLQuaternion_t,
  _swigc__p_std__vectorT_LLVector3_t,
  _swigc__p_vobj_list_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an eariler #define will rename it
*/
SWIGEXPORT int SWIG_init(lua_State* L)
{
  int i;
  /* start with global table */
  lua_pushvalue(L,LUA_GLOBALSINDEX);
  /* SWIG's internal initalisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);
  /* begin the module (its a table with the same name as the module) */
  SWIG_Lua_module_begin(L,SWIG_name);
  /* add commands/functions */
  for (i = 0; swig_commands[i].name; i++){
    SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
  }
  /* add variables */
  for (i = 0; swig_variables[i].name; i++){
    SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
  }
  /* set up base class pointers (the hierachy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* additional registration structs & classes in lua */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* constants */
  SWIG_Lua_InstallConstants(L,swig_constants);
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  lua_pop(L,1);  /* tidy stack (remove module table)*/
  lua_pop(L,1);  /* tidy stack (remove global table)*/
  return 1;
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

