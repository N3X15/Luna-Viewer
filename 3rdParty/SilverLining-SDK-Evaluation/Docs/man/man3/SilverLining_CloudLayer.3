.TH "SilverLining::CloudLayer" 3 "3 Sep 2009" "Version 1.818" "SilverLining" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SilverLining::CloudLayer \- A collection of clouds of uniform classification organized into a 'deck' of similar altitudes.  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include <CloudLayer.h>\fP
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCloudLayer\fP ()"
.br
.RI "\fIDefault constructor. \fP"
.ti -1c
.RI "virtual \fB~CloudLayer\fP ()"
.br
.RI "\fIDestructor. \fP"
.ti -1c
.RI "void \fBSetEnabled\fP (bool enabled, unsigned long fadeTimeMS=0)"
.br
.RI "\fIEnable rendering of this cloud layer. \fP"
.ti -1c
.RI "bool \fBGetEnabled\fP () const "
.br
.RI "\fIAccesses if the \fBCloudLayer\fP is currently enabled for rendering. \fP"
.ti -1c
.RI "void \fBSetBaseWidth\fP (double meters)"
.br
.RI "\fISets the size of the \fBCloudLayer\fP along the X axis. \fP"
.ti -1c
.RI "double \fBGetBaseWidth\fP () const "
.br
.RI "\fIRetrieves the dimension of the \fBCloudLayer\fP along the X axis. \fP"
.ti -1c
.RI "void \fBSetBaseLength\fP (double meters)"
.br
.RI "\fISets the size of the \fBCloudLayer\fP along the Z axis. \fP"
.ti -1c
.RI "double \fBGetBaseLength\fP () const "
.br
.RI "\fIRetrieves the dimension of the \fBCloudLayer\fP along the Z axis. \fP"
.ti -1c
.RI "void \fBSetBaseAltitude\fP (double meters)"
.br
.RI "\fISets the altitude above sea level of the bottom of the \fBCloudLayer\fP. \fP"
.ti -1c
.RI "double \fBGetBaseAltitude\fP () const "
.br
.RI "\fIRetrieves the altitude above sea level of the \fBCloudLayer\fP botton in meters. \fP"
.ti -1c
.RI "void \fBSetThickness\fP (double meters)"
.br
.RI "\fISets the thickness of the \fBCloudLayer\fP in meters. \fP"
.ti -1c
.RI "double \fBGetThickness\fP () const "
.br
.RI "\fIRetrieves the thickness of the \fBCloudLayer\fP in meters. \fP"
.ti -1c
.RI "void \fBSetDensity\fP (double coveragePercentage)"
.br
.RI "\fISets the percentage of the sky that should be covered by this \fBCloudLayer\fP, from 0 - 1.0. \fP"
.ti -1c
.RI "double \fBGetDensity\fP () const "
.br
.RI "\fIRetrieves the cloud coverage set for this \fBCloudLayer\fP. \fP"
.ti -1c
.RI "void \fBSetLayerPosition\fP (double eastCoord, double southCoord)"
.br
.RI "\fISpecifies the location of the center of the \fBCloudLayer\fP. \fP"
.ti -1c
.RI "void \fBGetLayerPosition\fP (double &east, double &south) const "
.br
.RI "\fIRetrieves the east and south coordinates of the CloudLayer's center, in meters. \fP"
.ti -1c
.RI "void \fBSetPrecipitation\fP (int type, double intensity)"
.br
.RI "\fISimulates precipitation under this cloud layer of a specified type. \fP"
.ti -1c
.RI "const std::map< int, double > & \fBGetPrecipitation\fP () const "
.br
.RI "\fIRetrieves a map of precipitation types to intensities in millimeters per hour that are associated with this cloud layer. \fP"
.ti -1c
.RI "virtual bool \fBHasPrecipitationAtPosition\fP (double x, double y, double z) const "
.br
.RI "\fIReturns whether a precipitation type other than NONE will be simulated at the given camera position. \fP"
.ti -1c
.RI "virtual bool \fBSupportsShadowMaps\fP ()"
.br
.RI "\fIReturns if this \fBCloudLayer\fP supports the generation of shadow maps. \fP"
.ti -1c
.RI "virtual void \fBGenerateShadowMaps\fP (bool enable)"
.br
.RI "\fIFor CloudLayers that support shadow maps (see \fBSupportsShadowMaps()\fP), request that a shadow map and matrix is generated each frame. \fP"
.ti -1c
.RI "virtual bool \fBBindShadowMap\fP (int textureStage, double *m) const "
.br
.RI "\fIBind the CloudLayer's shadow map texture to a given texture unit and retrieve the light source's (projection * view) matrix. \fP"
.ti -1c
.RI "virtual void \fBSeedClouds\fP (const \fBAtmosphere\fP &atm)=0"
.br
.RI "\fIGenerates clouds within the cloud layer. \fP"
.ti -1c
.RI "void \fBAddLightningListener\fP (\fBLightningListener\fP *listener)"
.br
.RI "\fIAdds a \fBLightningListener\fP - derived class to the list of LightningListeners to receive notifications of lightning strikes created by this \fBCloudLayer\fP. \fP"
.ti -1c
.RI "void \fBClearLightningListeners\fP ()"
.br
.RI "\fIClears the list of \fBLightningListener\fP objects that receive notifications of lightning strikes from this \fBCloudLayer\fP. \fP"
.ti -1c
.RI "virtual bool \fBSave\fP (const char *filePath) const "
.br
.RI "\fISaves this cloud deck's clouds to a file for fast restoring later. \fP"
.ti -1c
.RI "virtual bool \fBRestore\fP (const \fBAtmosphere\fP &atm, const char *filePath)"
.br
.RI "\fIRestores a cloud deck from a file previously generated with the \fBSave()\fP method. \fP"
.ti -1c
.RI "virtual bool \fBExportToVRML\fP (const char *dirPath)"
.br
.RI "\fIExports each individual cloud into a numbered .WRL file within the specified directory path. \fP"
.in -1c
.SH "Detailed Description"
.PP 
A collection of clouds of uniform classification organized into a 'deck' of similar altitudes. 

\fBCloudLayer\fP is a bse class that cannot be directly instantiated; instead, it is returned by the class factory \fBCloudLayerFactory\fP. Call \fBCloudLayerFactory::Create()\fP to obtain a \fBCloudLayer\fP object for a specific cloud type.
.PP
Once created, you'll want to set the CloudLayer's dimensions and density (coverage) using the \fBSetBaseWidth()\fP, \fBSetBaseLength()\fP, \fBSetBaseAltitude()\fP, \fBSetThickness()\fP, and \fBSetDensity()\fP methods. You will also need to position it using \fBSetLayerPosition()\fP.
.PP
Initially, a \fBCloudLayer\fP will not contain any clouds. Once specifying your preferences for the layer's dimensions and density, you must then call \fBSeedClouds()\fP to simulate cloud growth within the cloud deck.
.PP
Once your \fBCloudLayer\fP object is created, configured, and seeded, you may then pass it into \fBAtmosphericConditions::AddCloudLayer()\fP to add it to your scene.
.PP
Once 'seeded', the above methods to modify the layer's dimensions and density will have no effect - they are burned in at that point. You may, however, call \fBSetLayerPosition()\fP at runtime. To change the other properties of the cloud layer at runtime, you need to remove the cloud layer and re-create it.
.PP
See \fBSetBaseWidth()\fP for information on important differences between different types of CloudLayers. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "SilverLining::CloudLayer::CloudLayer ()"
.PP
Default constructor. 
.PP
This is a virtual base class, so this constructor is not directly invoked by your application. \fBCloudLayer\fP objects are instantiated by calling \fBCloudLayerFactory::Create()\fP. 
.SS "virtual SilverLining::CloudLayer::~CloudLayer ()\fC [virtual]\fP"
.PP
Destructor. 
.PP
Removes and deletes all clouds added to this \fBCloudLayer\fP. 
.SH "Member Function Documentation"
.PP 
.SS "void SilverLining::CloudLayer::AddLightningListener (\fBLightningListener\fP * listener)"
.PP
Adds a \fBLightningListener\fP - derived class to the list of LightningListeners to receive notifications of lightning strikes created by this \fBCloudLayer\fP. 
.PP
The \fBCloudLayer\fP will not destroy the \fBLightningListener\fP; its memory management is up to the caller.
.PP
\fBSee also:\fP
.RS 4
\fBClearLightningListeners()\fP 
.RE
.PP

.SS "virtual bool SilverLining::CloudLayer::BindShadowMap (int textureStage, double * m) const\fC [inline, virtual]\fP"
.PP
Bind the CloudLayer's shadow map texture to a given texture unit and retrieve the light source's (projection * view) matrix. 
.PP
The shadow map texture will contain black at shadowed locations and white at unshadowed locations. Mapping world coordinates in your scene to the appropriate shadow map texture coordinates may be achieved by using the 4x4 projection * view matrix for the light source that generated the shadow map, which is passed back into the array of 16 doubles passed in as the second parameter. See the sample code for an example of using shadow maps within an application.
.PP
This method will fail under DirectX10, as there is no fixed-function pipeline for SilverLining to bind to.
.PP
\fBParameters:\fP
.RS 4
\fItextureStage\fP The texture unit to bind the shadow map texture to. 
.br
\fIm\fP A pointer to 16 doubles which will receive the row-major projection * view matrix of the light source that generated the shadow map. 
.RE
.PP
\fBReturns:\fP
.RS 4
True if the shadow map was successfully bound to the requested texture unit.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGenerateShadowMaps()\fP \fBSupportsShadowMaps()\fP 
.RE
.PP

.SS "void SilverLining::CloudLayer::ClearLightningListeners ()"
.PP
Clears the list of \fBLightningListener\fP objects that receive notifications of lightning strikes from this \fBCloudLayer\fP. 
.PP
It does not delete the LightingListener objects.
.PP
\fBSee also:\fP
.RS 4
\fBAddLightningListener()\fP 
.RE
.PP

.SS "virtual bool SilverLining::CloudLayer::ExportToVRML (const char * dirPath)\fC [virtual]\fP"
.PP
Exports each individual cloud into a numbered .WRL file within the specified directory path. 
.PP
Each .WRL file will be a simple collection of translated spheres that represent the metaballs that make up each cloud.
.PP
These .WRL files may then be tweaked using a 3D graphics package, and then re-imported by placing them in resources/clouds/(cloudtype)/. (cloudtype) is the config file prefix for the settings for the given cloud layer type in resources/SilverLining.config, for example cumulus-congestus or cumulonimbus.
.PP
If a given cloud type has .WRL files in its matching resources/clouds/ subdirectory, SilverLining will randomly select these files as the layer is initialized in \fBSeedClouds()\fP, instead of generating the clouds algorithmically from a cellular automata.
.PP
This will currently only produce output for cumulus cloud decks.
.PP
\fBSee also:\fP
.RS 4
\fBSeedClouds()\fP 
.RE
.PP

.SS "virtual void SilverLining::CloudLayer::GenerateShadowMaps (bool enable)\fC [inline, virtual]\fP"
.PP
For CloudLayers that support shadow maps (see \fBSupportsShadowMaps()\fP), request that a shadow map and matrix is generated each frame. 
.PP
This shadow map texture and matrix may then be retrieved within your rendering loop using the \fBBindShadowMap()\fP method. 
.SS "double SilverLining::CloudLayer::GetBaseAltitude () const\fC [inline]\fP"
.PP
Retrieves the altitude above sea level of the \fBCloudLayer\fP botton in meters. 
.PP

.SS "double SilverLining::CloudLayer::GetBaseLength () const\fC [inline]\fP"
.PP
Retrieves the dimension of the \fBCloudLayer\fP along the Z axis. 
.PP
\fBSee also:\fP
.RS 4
\fBSetBaseLength()\fP 
.RE
.PP

.SS "double SilverLining::CloudLayer::GetBaseWidth () const\fC [inline]\fP"
.PP
Retrieves the dimension of the \fBCloudLayer\fP along the X axis. 
.PP
\fBSee also:\fP
.RS 4
\fBSetBaseWidth()\fP 
.RE
.PP

.SS "double SilverLining::CloudLayer::GetDensity () const\fC [inline]\fP"
.PP
Retrieves the cloud coverage set for this \fBCloudLayer\fP. 
.PP
\fBReturns:\fP
.RS 4
The cloud coverage of this deck from 0 - 1.0. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSetDensity()\fP 
.RE
.PP

.SS "bool SilverLining::CloudLayer::GetEnabled () const\fC [inline]\fP"
.PP
Accesses if the \fBCloudLayer\fP is currently enabled for rendering. 
.PP
\fBSee also:\fP
.RS 4
\fBSetEnabled()\fP 
.RE
.PP

.SS "void SilverLining::CloudLayer::GetLayerPosition (double & east, double & south) const\fC [inline]\fP"
.PP
Retrieves the east and south coordinates of the CloudLayer's center, in meters. 
.PP
\fBSee also:\fP
.RS 4
\fBSetLayerPosition()\fP 
.RE
.PP

.SS "const std::map<int, double>& SilverLining::CloudLayer::GetPrecipitation () const\fC [inline]\fP"
.PP
Retrieves a map of precipitation types to intensities in millimeters per hour that are associated with this cloud layer. 
.PP
Precipitation types include RAIN, WET_SNOW, DRY_SNOW, or SLEET.
.PP
\fBSee also:\fP
.RS 4
\fBSetPrecipitation()\fP 
.PP
\fBHasPrecipitationAtPosition()\fP 
.RE
.PP

.SS "double SilverLining::CloudLayer::GetThickness () const\fC [inline]\fP"
.PP
Retrieves the thickness of the \fBCloudLayer\fP in meters. 
.PP
See \fBSetThickness()\fP for descriptions of what this value represents for various cloud types. 
.SS "virtual bool SilverLining::CloudLayer::HasPrecipitationAtPosition (double x, double y, double z) const\fC [virtual]\fP"
.PP
Returns whether a precipitation type other than NONE will be simulated at the given camera position. 
.PP
If you're under a cloud and precipitation has been assigned to this cloud layer using \fBSetPrecipitation()\fP, this will return true. The specific effect may be retrieved with \fBGetPrecipitation()\fP.
.PP
\fBParameters:\fP
.RS 4
\fIx\fP The position, in world coordinates, for which you wish to test for precipitation effects. 
.br
\fIy\fP The position, in world coordinates, for which you wish to test for precipitation effects. 
.br
\fIz\fP The position, in world coordinates, for which you wish to test for precipitation effects. 
.RE
.PP

.SS "virtual bool SilverLining::CloudLayer::Restore (const \fBAtmosphere\fP & atm, const char * filePath)\fC [virtual]\fP"
.PP
Restores a cloud deck from a file previously generated with the \fBSave()\fP method. 
.PP
It is not necessary to explicitly configure the cloud's dimensions, position, and density, or to call \fBSeedClouds()\fP, when \fBRestore()\fP is called on a newly instantiated cloud layer. \fBRestore()\fP offers a way to quickly load a known good cloud layer without recreating it from scratch every time using \fBSeedClouds()\fP. It will create the layer more quickly than \fBSeedClouds()\fP, but you'll lose the randomness of the clouds within the layer by using this method.
.PP
\fBParameters:\fP
.RS 4
\fIatm\fP A const reference to the \fBAtmosphere\fP object that will ultimately contain this \fBCloudLayer\fP. 
.br
\fIfilePath\fP The fully qualified path to the file previously created with \fBSave()\fP.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSave()\fP 
.PP
\fBSeedClouds()\fP
.RE
.PP
\fBReturns:\fP
.RS 4
True if the file was successfully restored; false if the file could not be found or was an invalid file format. 
.RE
.PP

.SS "virtual bool SilverLining::CloudLayer::Save (const char * filePath) const\fC [virtual]\fP"
.PP
Saves this cloud deck's clouds to a file for fast restoring later. 
.PP
This is faster than calling SeedClouds to generate the deck at runtime, and also allows a way to reproduce the same cloud decks by bypassing the randomness of SeedClouds.
.PP
\fBParameters:\fP
.RS 4
\fIfilePath\fP The fully qualified path to the file you wish to save this cloud deck's configuration to.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSeedClouds()\fP 
.PP
\fBRestore()\fP
.RE
.PP
\fBReturns:\fP
.RS 4
True if the file was successfully written. 
.RE
.PP

.SS "virtual void SilverLining::CloudLayer::SeedClouds (const \fBAtmosphere\fP & atm)\fC [pure virtual]\fP"
.PP
Generates clouds within the cloud layer. 
.PP
\fBSeedClouds()\fP may only be called after configuring the \fBCloudLayer\fP by calling the \fBSetBaseWidth()\fP, \fBSetBaseLength()\fP, \fBSetBaseAltitude()\fP, \fBSetThickness()\fP, \fBSetDensity()\fP, and \fBSetLayerPosition()\fP methods. When called, it will invoke a cloud growth model to fill the cloud layer with clouds to meet the specified properties of the \fBCloudLayer\fP.
.PP
Once a cloud layer is seeded, you may use the \fBSave()\fP method to save it to disk if you'd like to be able to quickly restore it with the \fBRestore()\fP method, instead of recreating the layer from scratch every time.
.PP
No clouds will appear within your \fBCloudLayer\fP unless \fBSeedClouds()\fP is called!
.PP
\fBParameters:\fP
.RS 4
\fIatm\fP A const reference to the \fBAtmosphere\fP object that will ultimately contain this \fBCloudLayer\fP.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSave()\fP 
.PP
\fBRestore()\fP; 
.RE
.PP

.SS "void SilverLining::CloudLayer::SetBaseAltitude (double meters)\fC [inline]\fP"
.PP
Sets the altitude above sea level of the bottom of the \fBCloudLayer\fP. 
.PP
Here's some guidance on realistic settings (in meters) for various \fBCloudLayer\fP types:
.PP
.PD 0
.IP "\(bu" 2
Cumulus congestus, cumulus mediocris: Typically found fairly low; between 1000-2000m. 
.IP "\(bu" 2
Cumulonimbus: Generally extends to the ground if it's raining. 400m is an appropriate setting. 
.IP "\(bu" 2
Stratus: Found very low; typically 500-2000 m. 
.IP "\(bu" 2
Cirrus: Found very high; 6000 m or higher. 
.PP

.SS "void SilverLining::CloudLayer::SetBaseLength (double meters)\fC [inline]\fP"
.PP
Sets the size of the \fBCloudLayer\fP along the Z axis. 
.PP
See \fBSetBaseWidth()\fP for guidance on appropriate values for different types of CloudLayers. 
.SS "void SilverLining::CloudLayer::SetBaseWidth (double meters)\fC [inline]\fP"
.PP
Sets the size of the \fBCloudLayer\fP along the X axis. 
.PP
The cloud layer must be at least as big as the size of individual clouds within it. The size of the cloud layer may have important performance and visual impacts, so it should be chosen with care. Here are some general guidelines for setting the cloud layer dimensions:
.PP
.PD 0
.IP "\(bu" 2
Cumulus congestus and mediocris: The number of clouds created is proportional to the square of the layer dimensions, so performance will degrade quickly if unreasonably high dimensions are chosen. A balance must be found between performance (not having too many clouds to render at real-time speed) and visual acceptability (having enough clouds to fill the scene.) Dimensions of around 30 km or so generally fulfill both demands, but the number of clouds also depends on the cloud layer density (see \fBSetDensity()\fP).
.PP
.PD 0
.IP "\(bu" 2
Stratus: Stratus decks extend to the horizon, and the width and length specified are actually ignored.
.PP
.PD 0
.IP "\(bu" 2
Cumulonimbus: Due to the large size of cumulonimbus clouds and their isolated organization along 'squall lines', it's not realistic to have a rectangular deck of cumulonimbus clouds. Instead, the size of the cumulonimbus cloud layer will reflect the size of a single cumulonimbus cloud that fills the entire layer. Choose dimensions that reflect the size of the cloud itself, typically on the order of 5 km.
.PP
.PD 0
.IP "\(bu" 2
Cirrus: Cirrus decks are rendered as a high, textured plane, but it does not extend infinitely like stratus decks do. A large enough dimension should be chosen to fill the sky of your scene at the deck's altitude; typically, 100,000 meters is appropriate. 
.PP

.SS "void SilverLining::CloudLayer::SetDensity (double coveragePercentage)\fC [inline]\fP"
.PP
Sets the percentage of the sky that should be covered by this \fBCloudLayer\fP, from 0 - 1.0. 
.PP
For cumulus congestus and cumulus mediocris decks, this will affect the number of clouds generated during \fBSeedClouds()\fP. For stratus decks, setting a value less than 1.0 will result in a 'broken' cloud deck, which results in extremely high performance characteristics for variable cloud clover, but is much less visually realistic than a cumulus congestus deck. This value is ignored for cirrus and cumulonimbus cloud decks, which always represent a single cloud.
.PP
\fBParameters:\fP
.RS 4
\fIcoveragePercentage\fP The amount of the sky that should be covered by clouds, from 0 - 1.0. 
.RE
.PP

.SS "void SilverLining::CloudLayer::SetEnabled (bool enabled, unsigned long fadeTimeMS = \fC0\fP)"
.PP
Enable rendering of this cloud layer. 
.PP
New cloud layers are enabled by default.
.PP
Why would you want to explicitly enable and disable a cloud layer? Well, creating and seeding cloud layers - especially cumulus cloud layers - is computationally expensive and can take up to a second or two. If your application requires several cloud layers that are displayed at different times, it may make sense to create them all when your application initializes, and then just enable and disable them as needed, which is a much faster operation.
.PP
Optionally, you may fade cloud layers in or out over time to smoothly introduce them into your scene. Specify fadeTimeMS in order to enable this effect when enabling or disabling a cloud layer. Fading effects on cumulus layers are only supported on systems that support vertex shaders.
.PP
\fBParameters:\fP
.RS 4
\fIenabled\fP True if this cloud layer should be rendered during \fBAtmosphere::EndFrame()\fP, false if it should not be rendered. 
.br
\fIfadeTimeMS\fP The amount of time, in milliseconds, for the cloud layer to fade in or out. 
.RE
.PP

.SS "void SilverLining::CloudLayer::SetLayerPosition (double eastCoord, double southCoord)"
.PP
Specifies the location of the center of the \fBCloudLayer\fP. 
.PP
Sets the 'East' and 'South' coordinates of the CloudLayer's center position. For a right-handed coordinate system where Z points in, you'd pass in the X and Z coordinates of where you want the cloudlayer to be centered over, for example. A right-handed coordinate system where Z points up would pass in X and -Y instead. Cloud positions may move over time in response to simulated wind (see \fBAtmosphericConditions::SetWind()\fP). The 'up' coordinates are determined by \fBSetBaseAltitude()\fP.
.PP
If you are using a custom set of basis vectors, be sure that you have called \fBAtmosphere::SetUpVector()\fP and \fBAtmosphere::SetRightVector()\fP before calling this method.
.PP
Calling SetLayerPosition will reset any accumulated wind drift as well.
.PP
\fBSetLayerPosition()\fP is the one method on a \fBCloudLayer\fP that you may change at runtime, after the \fBCloudLayer\fP has been seeded and added into the scene. It will also pick up any changes you have made to the cloud's base altitude. Modifying other properties of the \fBCloudLayer\fP after it's been seeded require removing the \fBCloudLayer\fP from your \fBAtmosphericConditions\fP, and re-creating the layer.
.PP
\fBParameters:\fP
.RS 4
\fIeastCoord\fP The east coordinate of the CloudLayer's center position, in meters. 
.br
\fIsouthCoord\fP The south coordinate of the CloudLayer's center position, in meters. 
.RE
.PP

.SS "void SilverLining::CloudLayer::SetPrecipitation (int type, double intensity)"
.PP
Simulates precipitation under this cloud layer of a specified type. 
.PP
Any time the camera is under a cloud of this layer, precipitation effects will display if the type is set to something other than NONE.
.PP
Note, you may also set global precipitation effects that are not associated with a \fBCloudLayer\fP with the similar \fBAtmosphericConditions::SetPrecipitation()\fP method.
.PP
For mixed precipitation, you may call SetPrecipitation multiple times with different precipitation types. To clear all precipitation, call SetPrecipitation with a type of NONE. If you call this method multiple times for the same precipitation type, the intensity specified will overwrite the intensity previously specified for that type.
.PP
\fBParameters:\fP
.RS 4
\fItype\fP The type of precipitation to simulate under this cloud layer - NONE, RAIN, WET_SNOW, DRY_SNOW, or SLEET. 
.br
\fIintensity\fP The simulated rate of precipitation, in millimeters per hour. Reasonable ranges might be between 1 for light rain or 20 for heavier rain. This value will be clamped to the value specified by rain-max-intensity, snow-max-intensity, or sleet-max-intensity in resources/SilverLining.config, which is 30 by default.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBHasPrecipitationAtPosition()\fP 
.PP
\fBGetPrecipitation()\fP 
.RE
.PP

.SS "void SilverLining::CloudLayer::SetThickness (double meters)\fC [inline]\fP"
.PP
Sets the thickness of the \fBCloudLayer\fP in meters. 
.PP
'Thickness' has different meanings for different \fBCloudLayer\fP types:
.PP
.PD 0
.IP "\(bu" 2
Cumulus congestus, mediocris: The thickness specifies the variance in the altitude of the bottoms of each individual cloud within the \fBCloudLayer\fP. The actual height of each cloud is determined procedurally as part of the cloud growth model, and is not affected by \fBSetThickness()\fP. So, setting the thickness to 0 would result in a layer of clouds that all start at the same base altitude; setting a thickness of 100 would provide for some variance for increased realism. In reality, cloud layers rest on top of an air mass that cause most of the clouds to have flattened bottoms that start at roughly the same altitude.
.PP
.PD 0
.IP "\(bu" 2
Cumulonimbus: The \fBCloudLayer\fP dimensions specify the dimension of the single cloud within it, in this case. \fBSetThickness()\fP will specify the height of the cumulonimbus tower. 3000m would be an example of a resonable value to set.
.PP
.PD 0
.IP "\(bu" 2
Stratus: The thickness in this case specifies the actual thickness of the stratus deck, that is, the distance between the top and bottom of the stratus layer. Stratus clouds vary in thickness; 1000-2000 m are reasonable values. The thickness of the stratus deck will not impact performance, unlike cumulus decks.
.PP
.PD 0
.IP "\(bu" 2
Cirrus: The thickness is ignored for cirrus decks; cirrus decks are modeled as infinitely thin layers of ice crystals at high altitude. 
.PP

.SS "virtual bool SilverLining::CloudLayer::SupportsShadowMaps ()\fC [inline, virtual]\fP"
.PP
Returns if this \fBCloudLayer\fP supports the generation of shadow maps. 
.PP
Cumulus cloud decks have the ability to generate a texture map suitable for simulating shadows in your application's terrain and other objects. You may call this method to discover if your cloud deck has this capability. Shadow maps are not supported under DirectX9 if the 'render-offscreen' setting in resources/silverlining.config is enabled, or under DirectX10.
.PP
\fBSee also:\fP
.RS 4
\fBGenerateShadowMaps()\fP \fBBindShadowMap()\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for SilverLining from the source code.
