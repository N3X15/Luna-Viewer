.TH "SilverLining::LocalTime" 3 "3 Sep 2009" "Version 1.818" "SilverLining" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SilverLining::LocalTime \- A class to represent the simulated local time, time zone, and daylight savings time observation.  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include <LocalTime.h>\fP
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBLocalTime\fP ()"
.br
.RI "\fIDefault constructor. \fP"
.ti -1c
.RI "virtual \fB~LocalTime\fP ()"
.br
.RI "\fIDestructor. \fP"
.ti -1c
.RI "void \fBSetFromEpochSeconds\fP (time_t time)"
.br
.RI "\fIPopulates the \fBLocalTime\fP class based on epoch seconds (ie, as returned from \fCtime(NULL)\fP ). \fP"
.ti -1c
.RI "void \fBSetYear\fP (int year)"
.br
.RI "\fISet the calendar year to simulate. \fP"
.ti -1c
.RI "int \fBGetYear\fP () const "
.br
.RI "\fIRetrieves the Gregorian calendar year. \fP"
.ti -1c
.RI "void \fBSetMonth\fP (int month)"
.br
.RI "\fISets the calendar month to simulate. \fP"
.ti -1c
.RI "int \fBGetMonth\fP () const "
.br
.RI "\fIRetrieves the calendar month (1-12). \fP"
.ti -1c
.RI "void \fBSetDay\fP (int day)"
.br
.RI "\fISets the day of the month to simulate. \fP"
.ti -1c
.RI "int \fBGetDay\fP () const "
.br
.RI "\fIRetrieves the day of the month (1-31). \fP"
.ti -1c
.RI "void \fBSetHour\fP (int hour)"
.br
.RI "\fISets the hour of day to simulate. \fP"
.ti -1c
.RI "int \fBGetHour\fP () const "
.br
.RI "\fIRetrieves the hour of day (0-23). \fP"
.ti -1c
.RI "void \fBSetMinutes\fP (int minutes)"
.br
.RI "\fISets the minute of the hour to simulate. \fP"
.ti -1c
.RI "int \fBGetMinutes\fP () const "
.br
.RI "\fIRetrieves the minute of the hour (0-59). \fP"
.ti -1c
.RI "void \fBSetSeconds\fP (double seconds)"
.br
.RI "\fISets the second of the minute to simulate. \fP"
.ti -1c
.RI "double \fBGetSeconds\fP () const "
.br
.RI "\fIRetrieves the second of the minute (0-59). \fP"
.ti -1c
.RI "void \fBSetObservingDaylightSavingsTime\fP (bool inDST)"
.br
.RI "\fISets if Daylight Savings Time is currently observed in the simulation. \fP"
.ti -1c
.RI "bool \fBGetObservingDaylightSavingsTime\fP () const "
.br
.RI "\fIRetrieves if daylight savings time is observed in the simulation. \fP"
.ti -1c
.RI "void \fBSetTimeZone\fP (double zone)"
.br
.RI "\fISpecifies the time zone being simulated. \fP"
.ti -1c
.RI "double \fBGetTimeZone\fP () const "
.br
.RI "\fIRetrieves the currently simulated time zone. \fP"
.ti -1c
.RI "double \fBGetJulianDate\fP (bool terrestrialTime) const "
.br
.RI "\fIRetrieves the Julian Date that this \fBLocalTime\fP object represents. \fP"
.ti -1c
.RI "double \fBGetEpoch2000Centuries\fP (bool terrestrialTime) const "
.br
.RI "\fIObtains centuries and fraction since January 1, 2000 represented by this object. \fP"
.ti -1c
.RI "double \fBGetEpoch1990Days\fP (bool terrestrialTime) const "
.br
.RI "\fIObtains days elapsed since January 1, 1990 represented by this object on the Julian calendar. \fP"
.ti -1c
.RI "void \fBSetFromSystemTime\fP ()"
.br
.RI "\fIPopulate the object based on the system's current local time settings. \fP"
.ti -1c
.RI "void \fBAddSeconds\fP (long seconds)"
.br
.RI "\fIAdd the given number of seconds to the time represented by this object. \fP"
.in -1c
.SH "Detailed Description"
.PP 
A class to represent the simulated local time, time zone, and daylight savings time observation. 

\fBLocalTime\fP objects are passed into \fBAtmosphericConditions::SetTime()\fP to change the simulated time of day. Be sure that your \fBLocation\fP object represents a location consistent with the time zone you have specified as well. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "SilverLining::LocalTime::LocalTime ()"
.PP
Default constructor. 
.PP
Creates a local time with default settings (read from the SilverLining.config file if constructed after calling \fBAtmosphere::Initialize()\fP). 
.SS "virtual SilverLining::LocalTime::~LocalTime ()\fC [inline, virtual]\fP"
.PP
Destructor. 
.PP

.SH "Member Function Documentation"
.PP 
.SS "void SilverLining::LocalTime::AddSeconds (long seconds)"
.PP
Add the given number of seconds to the time represented by this object. 
.PP

.SS "int SilverLining::LocalTime::GetDay () const\fC [inline]\fP"
.PP
Retrieves the day of the month (1-31). 
.PP
\fBSee also:\fP
.RS 4
\fBSetDay()\fP 
.RE
.PP

.SS "double SilverLining::LocalTime::GetEpoch1990Days (bool terrestrialTime) const"
.PP
Obtains days elapsed since January 1, 1990 represented by this object on the Julian calendar. 
.PP
Used for internal astronomical calculations. Since this number is smaller than that returned by \fBGetJulianDate()\fP, it is of higher precision.
.PP
\fBParameters:\fP
.RS 4
\fIterrestrialTime\fP Specifying terrestrial time means you want atomic clock time, not corrected by leap seconds to account for slowing of the Earth's rotation, as opposed to GMT which does account for leap seconds.
.RE
.PP
\fBReturns:\fP
.RS 4
The fractional number of days elapsed since January 1, 1990. 
.RE
.PP

.SS "double SilverLining::LocalTime::GetEpoch2000Centuries (bool terrestrialTime) const"
.PP
Obtains centuries and fraction since January 1, 2000 represented by this object. 
.PP
Used for internal astronomical calculations. Since this number is smaller than that returned by \fBGetJulianDate()\fP, it is of higher precision.
.PP
\fBParameters:\fP
.RS 4
\fIterrestrialTime\fP Specifying terrestrial time means you want atomic clock time, not corrected by leap seconds to account for slowing of the Earth's rotation, as opposed to GMT which does account for leap seconds.
.RE
.PP
\fBReturns:\fP
.RS 4
The fractional number of centuries elapsed since January 1, 2000. 
.RE
.PP

.SS "int SilverLining::LocalTime::GetHour () const\fC [inline]\fP"
.PP
Retrieves the hour of day (0-23). 
.PP
\fBSee also:\fP
.RS 4
\fBSetHour()\fP 
.RE
.PP

.SS "double SilverLining::LocalTime::GetJulianDate (bool terrestrialTime) const"
.PP
Retrieves the Julian Date that this \fBLocalTime\fP object represents. 
.PP
Julian Dates are used for astronomical calculations (such as our own ephemeris model) and represent days and fractions since noon Universal Time on January 1, 4713 BCE on the Julian calendar. Note that due to precision limitations of 64-bit doubles, the resolution of the date returned may be as low as within 8 hours.
.PP
\fBParameters:\fP
.RS 4
\fIterrestrialTime\fP Specifying terrestrial time means you want atomic clock time, not corrected by leap seconds to account for slowing of the Earth's rotation, as opposed to GMT which does account for leap seconds.
.RE
.PP
\fBReturns:\fP
.RS 4
the Julian date that this object represents. 
.RE
.PP

.SS "int SilverLining::LocalTime::GetMinutes () const\fC [inline]\fP"
.PP
Retrieves the minute of the hour (0-59). 
.PP
\fBSee also:\fP
.RS 4
\fBSetMinutes()\fP 
.RE
.PP

.SS "int SilverLining::LocalTime::GetMonth () const\fC [inline]\fP"
.PP
Retrieves the calendar month (1-12). 
.PP
\fBSee also:\fP
.RS 4
\fBSetMonth()\fP 
.RE
.PP

.SS "bool SilverLining::LocalTime::GetObservingDaylightSavingsTime () const\fC [inline]\fP"
.PP
Retrieves if daylight savings time is observed in the simulation. 
.PP
\fBSee also:\fP
.RS 4
\fBSetObservingDaylightSavingsTime()\fP 
.RE
.PP

.SS "double SilverLining::LocalTime::GetSeconds () const\fC [inline]\fP"
.PP
Retrieves the second of the minute (0-59). 
.PP
\fBSee also:\fP
.RS 4
\fBSetSeconds()\fP 
.RE
.PP

.SS "double SilverLining::LocalTime::GetTimeZone () const\fC [inline]\fP"
.PP
Retrieves the currently simulated time zone. 
.PP
\fBReturns:\fP
.RS 4
The hour offset from GMT, ignoring daylight savings time. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSetTimeZone()\fP 
.RE
.PP

.SS "int SilverLining::LocalTime::GetYear () const\fC [inline]\fP"
.PP
Retrieves the Gregorian calendar year. 
.PP
\fBSee also:\fP
.RS 4
\fBSetYear()\fP 
.RE
.PP

.SS "void SilverLining::LocalTime::SetDay (int day)\fC [inline]\fP"
.PP
Sets the day of the month to simulate. 
.PP
\fBParameters:\fP
.RS 4
\fIday\fP The day of month, ranging from 1-31. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGetDay()\fP 
.RE
.PP

.SS "void SilverLining::LocalTime::SetFromEpochSeconds (time_t time)"
.PP
Populates the \fBLocalTime\fP class based on epoch seconds (ie, as returned from \fCtime(NULL)\fP ). 
.PP
Internally, it calls \fCgmtime()\fP on the value passed in, and populates the class based on the its results. The time zone will be set to GMT.
.PP
\fBParameters:\fP
.RS 4
\fItime\fP Seconds elapsed since midnight, January 1, 1970 UTC. 
.RE
.PP

.SS "void SilverLining::LocalTime::SetFromSystemTime ()"
.PP
Populate the object based on the system's current local time settings. 
.PP

.SS "void SilverLining::LocalTime::SetHour (int hour)\fC [inline]\fP"
.PP
Sets the hour of day to simulate. 
.PP
\fBParameters:\fP
.RS 4
\fIhour\fP The hour of day, ranging from 0-23 (0=midnight, 12=noon, 23=11PM) 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGetHour()\fP 
.RE
.PP

.SS "void SilverLining::LocalTime::SetMinutes (int minutes)\fC [inline]\fP"
.PP
Sets the minute of the hour to simulate. 
.PP
\fBParameters:\fP
.RS 4
\fIminutes\fP Minutes from 0-59 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGetMinutes()\fP 
.RE
.PP

.SS "void SilverLining::LocalTime::SetMonth (int month)\fC [inline]\fP"
.PP
Sets the calendar month to simulate. 
.PP
\fBParameters:\fP
.RS 4
\fImonth\fP The month to simulate, ranging from 1 (January) to 12 (December). 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGetMonth()\fP; 
.RE
.PP

.SS "void SilverLining::LocalTime::SetObservingDaylightSavingsTime (bool inDST)\fC [inline]\fP"
.PP
Sets if Daylight Savings Time is currently observed in the simulation. 
.PP
Not required if using \fBSetFromEpochSeconds()\fP, but must be set otherwise. 
.PP
\fBSee also:\fP
.RS 4
\fBGetObservingDaylightSavingsTime()\fP 
.RE
.PP

.SS "void SilverLining::LocalTime::SetSeconds (double seconds)\fC [inline]\fP"
.PP
Sets the second of the minute to simulate. 
.PP
\fBParameters:\fP
.RS 4
\fIseconds\fP Seconds from 0-59. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGetSeconds()\fP 
.RE
.PP

.SS "void SilverLining::LocalTime::SetTimeZone (double zone)\fC [inline]\fP"
.PP
Specifies the time zone being simulated. 
.PP
This is an hour offset from GMT, use the \fBTimeZones\fP enumerated type as a convenient way to specify the hour offset for a known time zone. Be sure that this time zone is consistent with the \fBLocation\fP you specify.
.PP
\fBParameters:\fP
.RS 4
\fIzone\fP Hour offset from GMT, ignoring daylight savings time. ie, PST is -8. Use the \fBTimeZones\fP enumeration to obtain the hour offset for specific time zones. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGetTimeZone()\fP 
.RE
.PP

.SS "void SilverLining::LocalTime::SetYear (int year)\fC [inline]\fP"
.PP
Set the calendar year to simulate. 
.PP
SilverLining can only handle Gregorian calendar years, which means that years before 1582 will not be accurately simulated. 
.PP
\fBSee also:\fP
.RS 4
\fBGetYear()\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for SilverLining from the source code.
