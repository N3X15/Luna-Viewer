.TH "SilverLining::AtmosphericConditions" 3 "3 Sep 2009" "Version 1.818" "SilverLining" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SilverLining::AtmosphericConditions \- A class to set the current simulation conditions for the sky.  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include <AtmosphericConditions.h>\fP
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBAtmosphericConditions\fP ()"
.br
.RI "\fIDefault constructor. \fP"
.ti -1c
.RI "virtual \fB~AtmosphericConditions\fP ()"
.br
.RI "\fIDestructor. \fP"
.ti -1c
.RI "void \fBSetLocation\fP (const \fBLocation\fP &location)"
.br
.RI "\fISets the simulated geographic location. \fP"
.ti -1c
.RI "const \fBLocation\fP & \fBGetLocation\fP () const "
.br
.RI "\fIGets the current simulated location. \fP"
.ti -1c
.RI "void \fBSetTime\fP (const \fBLocalTime\fP &time)"
.br
.RI "\fISets the simulated time of day in local time. \fP"
.ti -1c
.RI "const \fBLocalTime\fP & \fBGetTime\fP ()"
.br
.RI "\fIRetrieves the currently simulated time of day. \fP"
.ti -1c
.RI "void \fBSetWind\fP (const \fBWindVolume\fP &windVolume)"
.br
.RI "\fISets a volume of wind for moving clouds. \fP"
.ti -1c
.RI "void \fBClearWindVolumes\fP ()"
.br
.RI "\fIClears all wind volumes previously set via SetWind. \fP"
.ti -1c
.RI "void \fBGetWind\fP (double &velocity, double &heading, double altitude) const "
.br
.RI "\fIRetrieves the simulated wind at a given altitude. \fP"
.ti -1c
.RI "void \fBApplyWind\fP (double dt)"
.br
.RI "\fIApply wind to cloud layers for given time step. \fP"
.ti -1c
.RI "const std::vector< \fBWindVolume\fP > & \fBGetWindVolumes\fP () const "
.br
.RI "\fIGet a vector of all wind volumes being simulated. \fP"
.ti -1c
.RI "int \fBAddCloudLayer\fP (\fBCloudLayer\fP *layer)"
.br
.RI "\fIAdds a cloud layer to the simulated atmospheric conditions. \fP"
.ti -1c
.RI "bool \fBRemoveCloudLayer\fP (int layerHandle)"
.br
.RI "\fIRemoves a previously added cloud deck from the scene. \fP"
.ti -1c
.RI "void \fBRemoveAllCloudLayers\fP ()"
.br
.RI "\fIRemoves all cloud layers from the scene. \fP"
.ti -1c
.RI "bool \fBGetCloudLayer\fP (int layerHandle, \fBCloudLayer\fP **layer)"
.br
.RI "\fIObtain a pointer to a \fBCloudLayer\fP object. \fP"
.ti -1c
.RI "std::map< int, \fBCloudLayer\fP * > & \fBGetCloudLayers\fP ()"
.br
.RI "\fIObtain the stl map of \fBCloudLayer\fP objects. \fP"
.ti -1c
.RI "void \fBSetTurbidity\fP (double pTurbidity)"
.br
.RI "\fISets the 'turbidity' of the simulated atmosphere. \fP"
.ti -1c
.RI "double \fBGetTurbidity\fP () const "
.br
.RI "\fIGet the simulated atmospheric turbidity. \fP"
.ti -1c
.RI "void \fBSetVisibility\fP (double range)"
.br
.RI "\fISets the simulated visibility in meters; this will affect the appearance of clouds in the distance. \fP"
.ti -1c
.RI "double \fBGetVisibility\fP () const "
.br
.RI "\fIRetrieves the currently simulated visibility, in meters. \fP"
.ti -1c
.RI "void \fBSetFog\fP (double density, double r, double g, double b)"
.br
.RI "\fIExplicitly sets exponential fog color and density, if you need to match an existing scene. \fP"
.ti -1c
.RI "void \fBClearFog\fP ()"
.br
.RI "\fIClears explicitly set fog from \fBSetFog()\fP, and reverts the fog to simulating the visibility specified in \fBSetVisibility()\fP instead. \fP"
.ti -1c
.RI "void \fBGetFog\fP (bool &fogIsSet, double &density, double &r, double &g, double &b)"
.br
.RI "\fIRetrieves the explicit fog (if any) set by \fBSetFog()\fP. \fP"
.ti -1c
.RI "void \fBSetLightPollution\fP (double Wm2)"
.br
.RI "\fISets the simulated amount of nighttime light pollution, in watts per square meter. \fP"
.ti -1c
.RI "double \fBGetLightPollution\fP () const "
.br
.RI "\fIRetrieves the currently simulated light pollution, in watts per square meter. \fP"
.ti -1c
.RI "void \fBSetPrecipitation\fP (int precipitationType, double precipitationRate)"
.br
.RI "\fISimulates global precipitation of a specified type. \fP"
.ti -1c
.RI "void \fBEnableTimePassage\fP (bool enabled, long relightFrequencyMS)"
.br
.RI "\fIBy default, SilverLining will 'freeze' time at the time specified by \fBAtmosphericConditions::SetTime()\fP. \fP"
.ti -1c
.RI "void \fBSetMillisecondTimer\fP (const \fBMillisecondTimer\fP *timer)"
.br
.RI "\fIBy default, SilverLining will simulate the motion of clouds in the wind and the motion of astronomical objects (when \fBEnableTimePassage()\fP is active) by calling the system's millisecond timer. \fP"
.ti -1c
.RI "const \fBMillisecondTimer\fP * \fBGetMillisecondTimer\fP () const "
.br
.RI "\fIRetrieves the \fBMillisecondTimer\fP previously set by \fBSetMillisecondTimer()\fP, or the default timer if \fBSetMillisecondTimer()\fP is unset or set to NULL. \fP"
.in -1c
.SH "Detailed Description"
.PP 
A class to set the current simulation conditions for the sky. 

This class allows you to specify the simulated time, location, wind, visibility, haze, and cloud cover for your scene. You do so by instantiating your own \fBAtmosphericConditions\fP object, configuring it by calling its methods, and then passing it into your \fBAtmosphere\fP object via \fBAtmosphere::SetConditions()\fP.
.PP
To make changes to the \fBAtmosphericConditions\fP after it has been passed into \fBAtmosphere::SetConditions()\fP, call \fBAtmosphere::GetConditions()\fP and call methods on the \fBAtmosphericConditions\fP reference that it returns. \fBAtmosphere::SetConditions()\fP copies your \fBAtmosphericConditions\fP into the \fBAtmosphere\fP class, so changes made to the \fBAtmosphericConditions\fP used to initialize the \fBAtmosphere\fP will have no effect. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "SilverLining::AtmosphericConditions::AtmosphericConditions ()"
.PP
Default constructor. 
.PP
Creates an \fBAtmosphericConditions\fP object with default settings. 
.SS "virtual SilverLining::AtmosphericConditions::~AtmosphericConditions ()\fC [virtual]\fP"
.PP
Destructor. 
.PP
Destroys all members, but does not destroy the \fBCloudLayer\fP objects passed into \fBAddCloudLayer()\fP. 
.SH "Member Function Documentation"
.PP 
.SS "int SilverLining::AtmosphericConditions::AddCloudLayer (\fBCloudLayer\fP * layer)"
.PP
Adds a cloud layer to the simulated atmospheric conditions. 
.PP
Cloud layers are created via the \fBCloudLayerFactory::Create()\fP method, and won't become part of your scene until they are added to a \fBAtmosphericConditions\fP class that is then passed into \fBAtmosphere::SetConditions()\fP. The \fBCloudLayer\fP object will be destroyed along with this \fBAtmosphericConditions\fP class; there's no need to keep this object around for cleanup.
.PP
\fBParameters:\fP
.RS 4
\fIlayer\fP A \fBCloudLayer\fP created via \fBCloudLayerFactory::Create()\fP. This \fBCloudLayer\fP should be configured and seeded (see \fBCloudLayer::SeedClouds()\fP) prior to being passed in. 
.RE
.PP
\fBReturns:\fP
.RS 4
An integer handle to the cloud layer that may be used in calls to \fBRemoveCloudLayer()\fP and \fBGetCloudLayer()\fP. 
.RE
.PP

.SS "void SilverLining::AtmosphericConditions::ApplyWind (double dt)"
.PP
Apply wind to cloud layers for given time step. 
.PP
This is called by the \fBAtmosphere\fP class; you do not need to call this directly!
.PP
\fBParameters:\fP
.RS 4
\fIdt\fP Length of time to simulate wind over, in seconds. 
.RE
.PP

.SS "void SilverLining::AtmosphericConditions::ClearFog ()"
.PP
Clears explicitly set fog from \fBSetFog()\fP, and reverts the fog to simulating the visibility specified in \fBSetVisibility()\fP instead. 
.PP

.SS "void SilverLining::AtmosphericConditions::ClearWindVolumes ()"
.PP
Clears all wind volumes previously set via SetWind. 
.PP

.SS "void SilverLining::AtmosphericConditions::EnableTimePassage (bool enabled, long relightFrequencyMS)"
.PP
By default, SilverLining will 'freeze' time at the time specified by \fBAtmosphericConditions::SetTime()\fP. 
.PP
If you want to simulate the passage of time, call EnableTimePassage with the enabled parameter set to true.
.PP
Relighting the clouds is a relatively expensive operation, so for real time applications you probably won't want to relight the clouds every frame. The relightFrequencyMS parameter allows you to specify the interval, in milliseconds, between cloud relighting passes. The sky will continue to update in real time, along with the position of the sun, moon, and stars, between these intervals. If you have specified your own \fBMillisecondTimer\fP with \fBSetMillisecondTimer()\fP, the interval will be computed based on its concept of time.
.PP
If the enabled parameter is false (the default,) or the relightFrequencyMS parameter is set to -1, cloud relighting will only happen in response to calls to \fBAtmosphericConditions::SetTime()\fP.
.PP
Clouds will move with respect to the simulated wind irregardless of calling this method.
.PP
\fBParameters:\fP
.RS 4
\fIenabled\fP True if you want to simulate the passage of time between calls to \fBSetTime()\fP; false if the simulated time should remain static. 
.br
\fIrelightFrequencyMS\fP The interval, in milliseconds, between cloud relighting passes. Set to -1 to prevent cloud relighting outside of calls to \fBSetTime()\fP. 
.RE
.PP

.SS "bool SilverLining::AtmosphericConditions::GetCloudLayer (int layerHandle, \fBCloudLayer\fP ** layer)"
.PP
Obtain a pointer to a \fBCloudLayer\fP object. 
.PP
Given a cloud layer handle, obtain its underlying \fBCloudLayer\fP object.
.PP
\fBParameters:\fP
.RS 4
\fIlayerHandle\fP The integer handle to a cloud layer previously returned by \fBAddCloudLayer()\fP. 
.br
\fIlayer\fP A pointer to a pointer to receive the \fBCloudLayer\fP object pointer requested. 
.RE
.PP
\fBReturns:\fP
.RS 4
false if the layerHandle does not specify a \fBCloudLayer\fP being managed by this class. 
.RE
.PP

.SS "std::map<int, \fBCloudLayer\fP*>& SilverLining::AtmosphericConditions::GetCloudLayers ()\fC [inline]\fP"
.PP
Obtain the stl map of \fBCloudLayer\fP objects. 
.PP
An accessor for a reference to the STL map of \fBCloudLayer\fP objects managed by this \fBAtmosphericConditions\fP class. It is not const, and so it may be directly manipulated. Use with care. 
.SS "void SilverLining::AtmosphericConditions::GetFog (bool & fogIsSet, double & density, double & r, double & g, double & b)"
.PP
Retrieves the explicit fog (if any) set by \fBSetFog()\fP. 
.PP
\fBParameters:\fP
.RS 4
\fIfogIsSet\fP Returns true if SetFog has been called and ClearFog has not, meaning we are using fog with an explicitly defined application setting instead of simulating visibility. 
.br
\fIdensity\fP The exponential fog density term set in \fBSetFog()\fP 
.br
\fIr\fP The red component of the fog color specified in \fBSetFog()\fP. Ranges from 0-1. 
.br
\fIg\fP The green component of the fog color specified in \fBSetFog()\fP. Ranges from 0-1. 
.br
\fIb\fP The blue component of the fog color specified in \fBSetFog()\fP. Ranges from 0-1. 
.RE
.PP

.SS "double SilverLining::AtmosphericConditions::GetLightPollution () const\fC [inline]\fP"
.PP
Retrieves the currently simulated light pollution, in watts per square meter. 
.PP

.SS "const \fBLocation\fP& SilverLining::AtmosphericConditions::GetLocation () const"
.PP
Gets the current simulated location. 
.PP
\fBReturns:\fP
.RS 4
A const reference to a \fBLocation\fP object that may be queried for the current simulated geographic position. 
.RE
.PP

.SS "const \fBMillisecondTimer\fP* SilverLining::AtmosphericConditions::GetMillisecondTimer () const\fC [inline]\fP"
.PP
Retrieves the \fBMillisecondTimer\fP previously set by \fBSetMillisecondTimer()\fP, or the default timer if \fBSetMillisecondTimer()\fP is unset or set to NULL. 
.PP

.SS "const \fBLocalTime\fP& SilverLining::AtmosphericConditions::GetTime ()"
.PP
Retrieves the currently simulated time of day. 
.PP
Use this to obtain the local time, time zone, and daylight savings time observance being simulated.
.PP
This will also reflect the passage of time simulated by activating \fBEnableTimePassage()\fP. As such, it may differ from what was originally passed into \fBSetTime()\fP if time passage is activated.
.PP
\fBReturns:\fP
.RS 4
A const reference to a \fBLocalTime\fP object, which may be queried for the local time, time zone, and DST information being simulated. 
.RE
.PP

.SS "double SilverLining::AtmosphericConditions::GetTurbidity () const\fC [inline]\fP"
.PP
Get the simulated atmospheric turbidity. 
.PP
See \fBSetTurbidity()\fP for an explanation of turbidity values. 
.SS "double SilverLining::AtmosphericConditions::GetVisibility () const\fC [inline]\fP"
.PP
Retrieves the currently simulated visibility, in meters. 
.PP

.SS "void SilverLining::AtmosphericConditions::GetWind (double & velocity, double & heading, double altitude) const"
.PP
Retrieves the simulated wind at a given altitude. 
.PP
\fBParameters:\fP
.RS 4
\fIvelocity\fP Receives the simulated wind velocity in meters per second 
.br
\fIheading\fP Receives the simulated wind direction in degrees from North 
.br
\fIaltitude\fP The altitude, in meters, for which you want wind information. 
.RE
.PP

.SS "const std::vector<\fBWindVolume\fP>& SilverLining::AtmosphericConditions::GetWindVolumes () const\fC [inline]\fP"
.PP
Get a vector of all wind volumes being simulated. 
.PP
\fBReturns:\fP
.RS 4
A const reference to the STL vector of wind volumes currently being simulated. 
.RE
.PP

.SS "void SilverLining::AtmosphericConditions::RemoveAllCloudLayers ()"
.PP
Removes all cloud layers from the scene. 
.PP
All \fBCloudLayer\fP objects currently contained by this class will be removed and deleted. 
.SS "bool SilverLining::AtmosphericConditions::RemoveCloudLayer (int layerHandle)"
.PP
Removes a previously added cloud deck from the scene. 
.PP
The specified \fBCloudLayer\fP handle, if found, will be removed from the simulation and its \fBCloudLayer\fP object deleted.
.PP
\fBParameters:\fP
.RS 4
\fIlayerHandle\fP The integer handle previously returned from \fBAddCloudLayer()\fP. 
.RE
.PP
\fBReturns:\fP
.RS 4
true if the cloud deck was removed, false if the handle specified was not found. 
.RE
.PP

.SS "void SilverLining::AtmosphericConditions::SetFog (double density, double r, double g, double b)"
.PP
Explicitly sets exponential fog color and density, if you need to match an existing scene. 
.PP
If set, this will override the visibility effects from \fBSetVisibility()\fP. Color components are specified in the range 0-1. Density should be 1.0 / simulated visibility. If set, astronomical objects (the sun, moon, and stars) are not drawn, and clouds will be fogged as you specify. This is intended for real, thick fog, as opposed to \fBSetVisibility()\fP, which simulates extinction from atmospheric scattering. When using this, you'll usually want to call BeginFrame() with false in the first parameter to suppress drawing the sky box, and just clear your back buffer to the fog color instead. 
.SS "void SilverLining::AtmosphericConditions::SetLightPollution (double Wm2)\fC [inline]\fP"
.PP
Sets the simulated amount of nighttime light pollution, in watts per square meter. 
.PP
Defaults to zero. A reasonable value would be in the order of 0.01 
.SS "void SilverLining::AtmosphericConditions::SetLocation (const \fBLocation\fP & location)"
.PP
Sets the simulated geographic location. 
.PP
This affects the sun and moon positions relative to the horizon, and thereby also affects the lighting of the scene. Be sure that the location specified is consistent with the time zone specified in the \fBLocalTime\fP passed to \fBSetTime()\fP, or you will experience confusing results.
.PP
\fBParameters:\fP
.RS 4
\fIlocation\fP A reference to a \fBLocation\fP object that embodies the simulated latitude and longitude. 
.RE
.PP

.SS "void SilverLining::AtmosphericConditions::SetMillisecondTimer (const \fBMillisecondTimer\fP * timer)"
.PP
By default, SilverLining will simulate the motion of clouds in the wind and the motion of astronomical objects (when \fBEnableTimePassage()\fP is active) by calling the system's millisecond timer. 
.PP
If you want to accelerate, slow, or reverse the passage of time, you may instead provide your own \fBMillisecondTimer\fP implementation, and pass it in here. See the documentation for the \fBMillisecondTimer\fP class for more details.
.PP
\fBParameters:\fP
.RS 4
\fItimer\fP The \fBMillisecondTimer\fP object to use for moving clouds and astronomical objects over time, relative to the \fBLocalTime\fP passed into \fBSetTime()\fP. Pass NULL to restore the default timer. 
.RE
.PP

.SS "void SilverLining::AtmosphericConditions::SetPrecipitation (int precipitationType, double precipitationRate)"
.PP
Simulates global precipitation of a specified type. 
.PP
Precipitation effects will display if the type is set to something other than NONE.
.PP
Note, you may also set precipitation effects associated with a \fBCloudLayer\fP that only render when the camera is underneath a rain cloud with the similar \fBCloudLayer::SetPrecipitation()\fP method.
.PP
For mixed precipitation, you may call SetPrecipitation multiple times with different precipitation types. To clear all precipitation, call SetPrecipitation with a type of CloudLayer::NONE. If you call this method multiple times for the same precipitation type, the intensity specified will overwrite the intensity previously specified for that type.
.PP
\fBParameters:\fP
.RS 4
\fIprecipitationType\fP The type of precipitation to simulate under this cloud layer - CloudLayer::NONE, CloudLayer::RAIN, CloudLayer::WET_SNOW, CloudLayer::DRY_SNOW, or CloudLayer::SLEET. 
.br
\fIprecipitationRate\fP The simulated rate of precipitation, in millimeters per hour. Reasonable ranges might be between 1 for light rain or 20 for heavier rain. This value will be clamped to the value specified by rain-max-intensity, snow-max-intensity, or sleet-max-intensity in resources/SilverLining.config, which is 30 by default. 
.RE
.PP

.SS "void SilverLining::AtmosphericConditions::SetTime (const \fBLocalTime\fP & time)"
.PP
Sets the simulated time of day in local time. 
.PP
You must specify if daylight savings time is currently being observed or not. Be sure that the time zone specified is consistent with the simulated \fBLocation\fP passed to \fBSetLocation()\fP, or you will experience confusing results.
.PP
\fBParameters:\fP
.RS 4
\fItime\fP A reference to a \fBLocalTime\fP object that embodies the simulated local time, time zone, and daylight savings time observation. 
.RE
.PP

.SS "void SilverLining::AtmosphericConditions::SetTurbidity (double pTurbidity)\fC [inline]\fP"
.PP
Sets the 'turbidity' of the simulated atmosphere. 
.PP
You can think of this as a measure of 'haziness.' 1.0 would be a perfectly clear day and is the minimum value. Some guidelines for setting this value:
.PP
2 = very clear, range 50 km 3 = clear, range 15 km 7 = light haze, range 8 km
.PP
Setting turbidity is not an appropriate way to simulate fog; see \fBAtmosphere::SetHaze()\fP for one method, or for dense fog simply clear the backbuffer to the fog color and pass false to \fBAtmosphere::BeginFrame()\fP to suppress the sky rendering altogether.
.PP
Turbidity just lets you simulate the number of particles in the air. In practice it will vary the color of the sky from a pure light blue to a hazy, darker, yellowish color. Turbidity values below 1.8 or above 20.0 may lead to unpredictable results.
.PP
\fBParameters:\fP
.RS 4
\fI\\pTurbidity\fP The ratio of scattering due to haze to scattering due to molecules. 
.RE
.PP

.SS "void SilverLining::AtmosphericConditions::SetVisibility (double range)\fC [inline]\fP"
.PP
Sets the simulated visibility in meters; this will affect the appearance of clouds in the distance. 
.PP
Defaults to 30km. 
.SS "void SilverLining::AtmosphericConditions::SetWind (const \fBWindVolume\fP & windVolume)"
.PP
Sets a volume of wind for moving clouds. 
.PP
You may call this multiple times to define different wind velocities and directions at different altitudes. Wind also has some influence on cloud formation and the rendering of virga effects.
.PP
\fBParameters:\fP
.RS 4
\fIwindVolume\fP A \fBWindVolume\fP to add to the simulation. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for SilverLining from the source code.
