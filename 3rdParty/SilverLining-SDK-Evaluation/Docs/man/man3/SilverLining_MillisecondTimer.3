.TH "SilverLining::MillisecondTimer" 3 "3 Sep 2009" "Version 1.818" "SilverLining" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SilverLining::MillisecondTimer \- Exposes an interface to allow applications to control millisecond-level time.  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include <MillisecondTimer.h>\fP
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMillisecondTimer\fP ()"
.br
.RI "\fIDefault constructor. \fP"
.ti -1c
.RI "virtual \fB~MillisecondTimer\fP ()"
.br
.RI "\fIVirtual destructor. \fP"
.ti -1c
.RI "virtual unsigned long \fBGetMilliseconds\fP () const "
.br
.RI "\fIReturns elapsed milliseconds. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Exposes an interface to allow applications to control millisecond-level time. 

This timer is used to move cloud decks with respect to wind, and to simulate the real-time passage of time when \fBAtmosphericConditions::EnableTimePassage()\fP is activated.
.PP
By default, SilverLining will call the Win32 function timeGetTime() which will result in a simulation of real time that always moves forward. However, applications that want to move time backward for replays, or applications that want to simulate the acceleration of time, may pass in their own concept of elapsed milliseconds by extending this class.
.PP
To use your own \fBMillisecondTimer\fP in place of SilverLining's default implementation, instantiate your class that extends \fBMillisecondTimer\fP and implements its own \fBGetMilliseconds()\fP method. Then, pass this class instance to \fBAtmosphericConditions::SetMillisecondTimer()\fP. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "SilverLining::MillisecondTimer::MillisecondTimer ()\fC [inline]\fP"
.PP
Default constructor. 
.PP

.SS "virtual SilverLining::MillisecondTimer::~MillisecondTimer ()\fC [inline, virtual]\fP"
.PP
Virtual destructor. 
.PP

.SH "Member Function Documentation"
.PP 
.SS "virtual unsigned long SilverLining::MillisecondTimer::GetMilliseconds () const\fC [virtual]\fP"
.PP
Returns elapsed milliseconds. 
.PP
It doesn't matter what time this is relative to; SilverLining will only use the difference between subsequent calls to \fBGetMilliseconds()\fP to simulate the movement of the clouds and astronomical objects over time. The base class implementation of \fBGetMilliseconds()\fP simply calls the system function timeGetTime().
.PP
Avoid returning a value of zero; this value is special internally to flag the first frame. 

.SH "Author"
.PP 
Generated automatically by Doxygen for SilverLining from the source code.
